{"ast":null,"code":"var _jsxFileName = \"D:\\\\dhruv codes\\\\syntaxmeets\\\\frontend\\\\syntaxmeets\\\\src\\\\components\\\\Editor.js\";\nimport React, { Component } from \"react\";\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-min-noconflict/ext-searchbox\";\nimport \"ace-builds/src-min-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/mode-jsx\";\nimport { InputLabel, MenuItem, Select } from \"@material-ui/core\";\nconst languages = [\"c_cpp\", \"java\", \"python\", \"javascript\", \"html\", \"xml\", \"ruby\", \"css\", \"sass\", \"typescript\", \"kotlin\", \"swift\", \"markdown\", \"mysql\", \"json\", \"golang\", \"csharp\", \"sql\", \"sqlserver\"];\nconst themes = [\"monokai\", \"github\", \"tomorrow\", \"tomorrow_night\", \"kuroir\", \"twilight\", \"xcode\", \"textmate\", \"solarized_dark\", \"solarized_light\", \"terminal\"]; //extracting all the languages recquired\n\nlanguages.forEach(lang => {\n  require(`ace-builds/src-noconflict/mode-${lang}`);\n\n  require(`ace-builds/src-noconflict/snippets/${lang}`);\n}); //extracting themes\n\nthemes.forEach(theme => require(`ace-builds/src-noconflict/theme-${theme}`)); //default value to be displayed on code editor\n\nconst defaultValue = `#include <bits/stdc++.h>\n#define lli long long int\n#define endl \"\\\\n\"\n#define MAX 1000005\n#define MOD 1000000007\nusing namespace std;\n\n\nint main()\n{\n\tint t;\n\tcin>>t;\n\t\n\twhile(t--)\n\t{\n\t    //your code\n\t  \n\t}\n\treturn 0;\n}`;\n\nclass Editor extends Component {\n  onChange(newValue) {\n    console.log(\"change\", newValue);\n    this.setState({\n      value: newValue\n    });\n  }\n\n  onSelectionChange(newValue, event) {\n    console.log(\"select-change\", newValue);\n    console.log(\"select-change-event\", event);\n  }\n\n  onCursorChange(newValue, event) {\n    console.log(\"cursor-change\", newValue);\n    console.log(\"cursor-change-event\", event);\n  }\n\n  onValidate(annotations) {\n    console.log(\"onValidate\", annotations);\n  }\n\n  setPlaceholder(e) {\n    this.setState({\n      placeholder: e.target.value\n    });\n  }\n\n  setTheme(e) {\n    this.setState({\n      theme: e.target.value\n    });\n  }\n\n  setMode(e) {\n    this.setState({\n      mode: e.target.value\n    });\n  }\n\n  setBoolean(name, value) {\n    this.setState({\n      [name]: value\n    });\n  }\n\n  setFontSize(e) {\n    this.setState({\n      fontSize: parseInt(e.target.value, 10)\n    });\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: defaultValue,\n      placeholder: \"Placeholder Text\",\n      theme: \"monokai\",\n      mode: \"c_cpp\",\n      enableBasicAutocompletion: false,\n      enableLiveAutocompletion: false,\n      fontSize: 14,\n      showGutter: true,\n      showPrintMargin: true,\n      highlightActiveLine: true,\n      enableSnippets: false,\n      showLineNumbers: true\n    };\n    this.setPlaceholder = this.setPlaceholder.bind(this);\n    this.setTheme = this.setTheme.bind(this);\n    this.setMode = this.setMode.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.setFontSize = this.setFontSize.bind(this);\n    this.setBoolean = this.setBoolean.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"columns\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      id: \"select-language-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }\n    }, \"Language\"), /*#__PURE__*/React.createElement(Select, {\n      name: \"mode\",\n      labelId: \"select-language-label\",\n      id: \"select-language\",\n      value: this.state.mode,\n      onChange: this.setMode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }\n    }, languages.map(lang => /*#__PURE__*/React.createElement(MenuItem, {\n      value: lang,\n      key: lang,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 29\n      }\n    }, lang.toUpperCase()))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 25\n      }\n    }, \"Theme:\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"control\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"select\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      name: \"Theme\",\n      onChange: this.setTheme,\n      value: this.state.theme,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 33\n      }\n    }, themes.map(lang => /*#__PURE__*/React.createElement(\"option\", {\n      key: lang,\n      value: lang,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 41\n      }\n    }, lang)))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 25\n      }\n    }, \"Font Size:\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"control\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"select\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      name: \"Font Size\",\n      onChange: this.setFontSize,\n      value: this.state.fontSize,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 33\n      }\n    }, [14, 16, 18, 20, 24, 28, 32, 40].map(lang => /*#__PURE__*/React.createElement(\"option\", {\n      key: lang,\n      value: lang,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 41\n      }\n    }, lang)))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 25\n      }\n    }, \"Placeholder:\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"control\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"input\",\n      type: \"text\",\n      onChange: this.setPlaceholder,\n      value: this.state.placeholder,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 29\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"control\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"checkbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: this.state.enableBasicAutocompletion,\n      onChange: e => this.setBoolean(\"enableBasicAutocompletion\", e.target.checked),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 33\n      }\n    }), \"Enable Basic Autocomplete\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"control\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"checkbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: this.state.enableLiveAutocompletion,\n      onChange: e => this.setBoolean(\"enableLiveAutocompletion\", e.target.checked),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 33\n      }\n    }), \"Enable Live Autocomplete\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"control\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"checkbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: this.state.showGutter,\n      onChange: e => this.setBoolean(\"showGutter\", e.target.checked),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 33\n      }\n    }), \"Show Gutter\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"control\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"checkbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: this.state.showPrintMargin,\n      onChange: e => this.setBoolean(\"showPrintMargin\", e.target.checked),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 33\n      }\n    }), \"Show Print Margin\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"control\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"checkbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: this.state.highlightActiveLine,\n      onChange: e => this.setBoolean(\"highlightActiveLine\", e.target.checked),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 33\n      }\n    }), \"Highlight Active Line\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"control\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"checkbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: this.state.enableSnippets,\n      onChange: e => this.setBoolean(\"enableSnippets\", e.target.checked),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 33\n      }\n    }), \"Enable Snippets\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"control\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"checkbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: this.state.showLineNumbers,\n      onChange: e => this.setBoolean(\"showLineNumbers\", e.target.checked),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 33\n      }\n    }), \"Show Line Numbers\")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"examples column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 21\n      }\n    }, \"Editor\"), /*#__PURE__*/React.createElement(AceEditor, {\n      placeholder: this.state.placeholder,\n      mode: this.state.mode,\n      theme: this.state.theme,\n      name: \"blah2\",\n      onLoad: this.onLoad,\n      onChange: this.onChange,\n      onSelectionChange: this.onSelectionChange,\n      onCursorChange: this.onCursorChange,\n      onValidate: this.onValidate,\n      value: this.state.value,\n      fontSize: this.state.fontSize,\n      showPrintMargin: this.state.showPrintMargin,\n      showGutter: this.state.showGutter,\n      highlightActiveLine: this.state.highlightActiveLine,\n      setOptions: {\n        useWorker: false,\n        enableBasicAutocompletion: this.state.enableBasicAutocompletion,\n        enableLiveAutocompletion: this.state.enableLiveAutocompletion,\n        enableSnippets: this.state.enableSnippets,\n        showLineNumbers: this.state.showLineNumbers,\n        tabSize: 2\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nexport default Editor;\n/*\r\n<div className=\"field\">\r\n    <label>Mode:</label>\r\n    <p className=\"control\">\r\n        <span className=\"select\">\r\n            <select\r\n                name=\"mode\"\r\n                onChange={this.setMode}\r\n                value={this.state.mode}\r\n            >\r\n                {languages.map(lang => (\r\n                    <option key={lang} value={lang}>\r\n                        {lang}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n        </span>\r\n    </p>\r\n</div>\r\n\r\n*/","map":{"version":3,"sources":["D:/dhruv codes/syntaxmeets/frontend/syntaxmeets/src/components/Editor.js"],"names":["React","Component","AceEditor","InputLabel","MenuItem","Select","languages","themes","forEach","lang","require","theme","defaultValue","Editor","onChange","newValue","console","log","setState","value","onSelectionChange","event","onCursorChange","onValidate","annotations","setPlaceholder","e","placeholder","target","setTheme","setMode","mode","setBoolean","name","setFontSize","fontSize","parseInt","constructor","props","state","enableBasicAutocompletion","enableLiveAutocompletion","showGutter","showPrintMargin","highlightActiveLine","enableSnippets","showLineNumbers","bind","render","map","toUpperCase","checked","onLoad","useWorker","tabSize"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport AceEditor from \"react-ace\";\r\nimport \"ace-builds/src-min-noconflict/ext-searchbox\";\r\nimport \"ace-builds/src-min-noconflict/ext-language_tools\";\r\nimport \"ace-builds/src-noconflict/mode-jsx\";\r\nimport { InputLabel, MenuItem, Select } from \"@material-ui/core\"\r\n\r\n\r\nconst languages = [\r\n    \"c_cpp\",\r\n    \"java\",\r\n    \"python\",\r\n    \"javascript\",\r\n    \"html\",\r\n    \"xml\",\r\n    \"ruby\",\r\n    \"css\",\r\n    \"sass\",\r\n    \"typescript\",\r\n    \"kotlin\",\r\n    \"swift\",\r\n    \"markdown\",\r\n    \"mysql\",\r\n    \"json\",\r\n    \"golang\",\r\n    \"csharp\",\r\n    \"sql\",\r\n    \"sqlserver\",\r\n];\r\n\r\nconst themes = [\r\n    \"monokai\",\r\n    \"github\",\r\n    \"tomorrow\",\r\n    \"tomorrow_night\",\r\n    \"kuroir\",\r\n    \"twilight\",\r\n    \"xcode\",\r\n    \"textmate\",\r\n    \"solarized_dark\",\r\n    \"solarized_light\",\r\n    \"terminal\"\r\n];\r\n\r\n//extracting all the languages recquired\r\nlanguages.forEach(lang => {\r\n    require(`ace-builds/src-noconflict/mode-${lang}`);\r\n    require(`ace-builds/src-noconflict/snippets/${lang}`);\r\n});\r\n//extracting themes\r\nthemes.forEach(theme => require(`ace-builds/src-noconflict/theme-${theme}`));\r\n\r\n//default value to be displayed on code editor\r\nconst defaultValue = `#include <bits/stdc++.h>\r\n#define lli long long int\r\n#define endl \"\\\\n\"\r\n#define MAX 1000005\r\n#define MOD 1000000007\r\nusing namespace std;\r\n\r\n\r\nint main()\r\n{\r\n\tint t;\r\n\tcin>>t;\r\n\t\r\n\twhile(t--)\r\n\t{\r\n\t    //your code\r\n\t  \r\n\t}\r\n\treturn 0;\r\n}`;\r\n\r\n\r\n\r\nclass Editor extends Component {\r\n\r\n    onChange(newValue) {\r\n        console.log(\"change\", newValue);\r\n        this.setState({\r\n            value: newValue\r\n        });\r\n    }\r\n\r\n    onSelectionChange(newValue, event) {\r\n        console.log(\"select-change\", newValue);\r\n        console.log(\"select-change-event\", event);\r\n    }\r\n\r\n    onCursorChange(newValue, event) {\r\n        console.log(\"cursor-change\", newValue);\r\n        console.log(\"cursor-change-event\", event);\r\n    }\r\n\r\n    onValidate(annotations) {\r\n        console.log(\"onValidate\", annotations);\r\n    }\r\n\r\n    setPlaceholder(e) {\r\n        this.setState({\r\n            placeholder: e.target.value\r\n        });\r\n    }\r\n    setTheme(e) {\r\n        this.setState({\r\n            theme: e.target.value\r\n        });\r\n    }\r\n    setMode(e) {\r\n        this.setState({\r\n            mode: e.target.value\r\n        });\r\n    }\r\n    setBoolean(name, value) {\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n    setFontSize(e) {\r\n        this.setState({\r\n            fontSize: parseInt(e.target.value, 10)\r\n        });\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: defaultValue,\r\n            placeholder: \"Placeholder Text\",\r\n            theme: \"monokai\",\r\n            mode: \"c_cpp\",\r\n            enableBasicAutocompletion: false,\r\n            enableLiveAutocompletion: false,\r\n            fontSize: 14,\r\n            showGutter: true,\r\n            showPrintMargin: true,\r\n            highlightActiveLine: true,\r\n            enableSnippets: false,\r\n            showLineNumbers: true\r\n        };\r\n        this.setPlaceholder = this.setPlaceholder.bind(this);\r\n        this.setTheme = this.setTheme.bind(this);\r\n        this.setMode = this.setMode.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.setFontSize = this.setFontSize.bind(this);\r\n        this.setBoolean = this.setBoolean.bind(this);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"columns\">\r\n                <div className=\"column\">\r\n\r\n                    <InputLabel id=\"select-language-label\">Language</InputLabel>\r\n                    <Select\r\n                        name=\"mode\"\r\n                        labelId=\"select-language-label\"\r\n                        id=\"select-language\"\r\n                        value={this.state.mode}\r\n                        onChange={this.setMode}\r\n                    >\r\n                        {languages.map(lang => (\r\n                            <MenuItem value={lang} key={lang}>{lang.toUpperCase()}</MenuItem>\r\n\r\n                        ))}\r\n                    </Select>\r\n                    <div className=\"field\">\r\n                        <label>Theme:</label>\r\n                        <p className=\"control\">\r\n                            <span className=\"select\">\r\n                                <select\r\n                                    name=\"Theme\"\r\n                                    onChange={this.setTheme}\r\n                                    value={this.state.theme}\r\n                                >\r\n                                    {themes.map(lang => (\r\n                                        <option key={lang} value={lang}>\r\n                                            {lang}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            </span>\r\n                        </p>\r\n                    </div>\r\n\r\n                    <div className=\"field\">\r\n                        <label>Font Size:</label>\r\n                        <p className=\"control\">\r\n                            <span className=\"select\">\r\n                                <select\r\n                                    name=\"Font Size\"\r\n                                    onChange={this.setFontSize}\r\n                                    value={this.state.fontSize}\r\n                                >\r\n                                    {[14, 16, 18, 20, 24, 28, 32, 40].map(lang => (\r\n                                        <option key={lang} value={lang}>\r\n                                            {lang}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            </span>\r\n                        </p>\r\n                    </div>\r\n\r\n                    <div className=\"field\">\r\n                        <label>Placeholder:</label>\r\n                        <p className=\"control\">\r\n                            <input\r\n                                className=\"input\"\r\n                                type=\"text\"\r\n                                onChange={this.setPlaceholder}\r\n                                value={this.state.placeholder}\r\n                            />\r\n                        </p>\r\n                    </div>\r\n\r\n                    <div className=\"field\">\r\n                        <p className=\"control\">\r\n                            <label className=\"checkbox\">\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    checked={this.state.enableBasicAutocompletion}\r\n                                    onChange={e =>\r\n                                        this.setBoolean(\r\n                                            \"enableBasicAutocompletion\",\r\n                                            e.target.checked\r\n                                        )\r\n                                    }\r\n                                />\r\n                Enable Basic Autocomplete\r\n              </label>\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <p className=\"control\">\r\n                            <label className=\"checkbox\">\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    checked={this.state.enableLiveAutocompletion}\r\n                                    onChange={e =>\r\n                                        this.setBoolean(\r\n                                            \"enableLiveAutocompletion\",\r\n                                            e.target.checked\r\n                                        )\r\n                                    }\r\n                                />\r\n                Enable Live Autocomplete\r\n              </label>\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <p className=\"control\">\r\n                            <label className=\"checkbox\">\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    checked={this.state.showGutter}\r\n                                    onChange={e =>\r\n                                        this.setBoolean(\"showGutter\", e.target.checked)\r\n                                    }\r\n                                />\r\n                Show Gutter\r\n              </label>\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <p className=\"control\">\r\n                            <label className=\"checkbox\">\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    checked={this.state.showPrintMargin}\r\n                                    onChange={e =>\r\n                                        this.setBoolean(\"showPrintMargin\", e.target.checked)\r\n                                    }\r\n                                />\r\n                Show Print Margin\r\n              </label>\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <p className=\"control\">\r\n                            <label className=\"checkbox\">\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    checked={this.state.highlightActiveLine}\r\n                                    onChange={e =>\r\n                                        this.setBoolean(\"highlightActiveLine\", e.target.checked)\r\n                                    }\r\n                                />\r\n                Highlight Active Line\r\n              </label>\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <p className=\"control\">\r\n                            <label className=\"checkbox\">\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    checked={this.state.enableSnippets}\r\n                                    onChange={e =>\r\n                                        this.setBoolean(\"enableSnippets\", e.target.checked)\r\n                                    }\r\n                                />\r\n                Enable Snippets\r\n              </label>\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <p className=\"control\">\r\n                            <label className=\"checkbox\">\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    checked={this.state.showLineNumbers}\r\n                                    onChange={e =>\r\n                                        this.setBoolean(\"showLineNumbers\", e.target.checked)\r\n                                    }\r\n                                />\r\n                Show Line Numbers\r\n              </label>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"examples column\">\r\n                    <h2>Editor</h2>\r\n                    <AceEditor\r\n                        placeholder={this.state.placeholder}\r\n                        mode={this.state.mode}\r\n                        theme={this.state.theme}\r\n                        name=\"blah2\"\r\n                        onLoad={this.onLoad}\r\n                        onChange={this.onChange}\r\n                        onSelectionChange={this.onSelectionChange}\r\n                        onCursorChange={this.onCursorChange}\r\n                        onValidate={this.onValidate}\r\n                        value={this.state.value}\r\n                        fontSize={this.state.fontSize}\r\n                        showPrintMargin={this.state.showPrintMargin}\r\n                        showGutter={this.state.showGutter}\r\n                        highlightActiveLine={this.state.highlightActiveLine}\r\n                        setOptions={{\r\n                            useWorker: false,\r\n                            enableBasicAutocompletion: this.state.enableBasicAutocompletion,\r\n                            enableLiveAutocompletion: this.state.enableLiveAutocompletion,\r\n                            enableSnippets: this.state.enableSnippets,\r\n                            showLineNumbers: this.state.showLineNumbers,\r\n                            tabSize: 2\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Editor;\r\n\r\n\r\n/*\r\n<div className=\"field\">\r\n    <label>Mode:</label>\r\n    <p className=\"control\">\r\n        <span className=\"select\">\r\n            <select\r\n                name=\"mode\"\r\n                onChange={this.setMode}\r\n                value={this.state.mode}\r\n            >\r\n                {languages.map(lang => (\r\n                    <option key={lang} value={lang}>\r\n                        {lang}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n        </span>\r\n    </p>\r\n</div>\r\n\r\n*/"]},"metadata":{},"sourceType":"module"}