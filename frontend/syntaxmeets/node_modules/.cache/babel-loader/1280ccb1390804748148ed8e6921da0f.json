{"ast":null,"code":"ace.define(\"ace/mode/fortran_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var FortranHighlightRules = function () {\n    var keywords = \"call|case|contains|continue|cycle|do|else|elseif|end|enddo|endif|function|\" + \"if|implicit|in|include|inout|intent|module|none|only|out|print|program|return|\" + \"select|status|stop|subroutine|\" + \"return|then|use|while|write|\" + \"CALL|CASE|CONTAINS|CONTINUE|CYCLE|DO|ELSE|ELSEIF|END|ENDDO|ENDIF|FUNCTION|\" + \"IF|IMPLICIT|IN|INCLUDE|INOUT|INTENT|MODULE|NONE|ONLY|OUT|PRINT|PROGRAM|RETURN|\" + \"SELECT|STATUS|STOP|SUBROUTINE|\" + \"RETURN|THEN|USE|WHILE|WRITE\";\n    var keywordOperators = \"and|or|not|eq|ne|gt|ge|lt|le|\" + \"AND|OR|NOT|EQ|NE|GT|GE|LT|LE\";\n    var builtinConstants = \"true|false|TRUE|FALSE\";\n    var builtinFunctions = \"abs|achar|acos|acosh|adjustl|adjustr|aimag|aint|all|allocate|\" + \"anint|any|asin|asinh|associated|atan|atan2|atanh|\" + \"bessel_j0|bessel_j1|bessel_jn|bessel_y0|bessel_y1|bessel_yn|\" + \"bge|bgt|bit_size|ble|blt|btest|ceiling|char|cmplx|conjg|cos|cosh|\" + \"count|cpu_time|cshift|date_and_time|dble|deallocate|digits|dim|dot_product|dprod|\" + \"dshiftl|dshiftr|dsqrt|eoshift|epsilon|erf|erfc|erfc_scaled|exp|float|floor|\" + \"format|fraction|gamma|input|len|lge|lgt|lle|llt|log|log10|maskl|maskr|matmul|max|maxloc|maxval|\" + \"merge|min|minloc|minval|mod|modulo|nint|not|norm2|null|nullify|pack|parity|popcnt|poppar|\" + \"precision|present|product|radix|random_number|random_seed|range|repeat|reshape|round|\" + \"rrspacing|same_type_as|scale|scan|selected_char_kind|selected_int_kind|selected_real_kind|\" + \"set_exponent|shape|shifta|shiftl|shiftr|sign|sin|sinh|size|sngl|spacing|spread|\" + \"sqrt|sum|system_clock|tan|tanh|tiny|trailz|transfer|transpose|trim|ubound|unpack|verify|\" + \"ABS|ACHAR|ACOS|ACOSH|ADJUSTL|ADJUSTR|AIMAG|AINT|ALL|ALLOCATE|\" + \"ANINT|ANY|ASIN|ASINH|ASSOCIATED|ATAN|ATAN2|ATANH|\" + \"BESSEL_J0|BESSEL_J1|BESSEL_JN|BESSEL_Y0|BESSEL_Y1|BESSEL_YN|\" + \"BGE|BGT|BIT_SIZE|BLE|BLT|BTEST|CEILING|CHAR|CMPLX|CONJG|COS|COSH|\" + \"COUNT|CPU_TIME|CSHIFT|DATE_AND_TIME|DBLE|DEALLOCATE|DIGITS|DIM|DOT_PRODUCT|DPROD|\" + \"DSHIFTL|DSHIFTR|DSQRT|EOSHIFT|EPSILON|ERF|ERFC|ERFC_SCALED|EXP|FLOAT|FLOOR|\" + \"FORMAT|FRACTION|GAMMA|INPUT|LEN|LGE|LGT|LLE|LLT|LOG|LOG10|MASKL|MASKR|MATMUL|MAX|MAXLOC|MAXVAL|\" + \"MERGE|MIN|MINLOC|MINVAL|MOD|MODULO|NINT|NOT|NORM2|NULL|NULLIFY|PACK|PARITY|POPCNT|POPPAR|\" + \"PRECISION|PRESENT|PRODUCT|RADIX|RANDOM_NUMBER|RANDOM_SEED|RANGE|REPEAT|RESHAPE|ROUND|\" + \"RRSPACING|SAME_TYPE_AS|SCALE|SCAN|SELECTED_CHAR_KIND|SELECTED_INT_KIND|SELECTED_REAL_KIND|\" + \"SET_EXPONENT|SHAPE|SHIFTA|SHIFTL|SHIFTR|SIGN|SIN|SINH|SIZE|SNGL|SPACING|SPREAD|\" + \"SQRT|SUM|SYSTEM_CLOCK|TAN|TANH|TINY|TRAILZ|TRANSFER|TRANSPOSE|TRIM|UBOUND|UNPACK|VERIFY\";\n    var storageType = \"logical|character|integer|real|type|\" + \"LOGICAL|CHARACTER|INTEGER|REAL|TYPE\";\n    var storageModifiers = \"allocatable|dimension|intent|parameter|pointer|target|private|public|\" + \"ALLOCATABLE|DIMENSION|INTENT|PARAMETER|POINTER|TARGET|PRIVATE|PUBLIC\";\n    var keywordMapper = this.createKeywordMapper({\n      \"invalid.deprecated\": \"debugger\",\n      \"support.function\": builtinFunctions,\n      \"constant.language\": builtinConstants,\n      \"keyword\": keywords,\n      \"keyword.operator\": keywordOperators,\n      \"storage.type\": storageType,\n      \"storage.modifier\": storageModifiers\n    }, \"identifier\");\n    var strPre = \"(?:r|u|ur|R|U|UR|Ur|uR)?\";\n    var decimalInteger = \"(?:(?:[1-9]\\\\d*)|(?:0))\";\n    var octInteger = \"(?:0[oO]?[0-7]+)\";\n    var hexInteger = \"(?:0[xX][\\\\dA-Fa-f]+)\";\n    var binInteger = \"(?:0[bB][01]+)\";\n    var integer = \"(?:\" + decimalInteger + \"|\" + octInteger + \"|\" + hexInteger + \"|\" + binInteger + \")\";\n    var exponent = \"(?:[eE][+-]?\\\\d+)\";\n    var fraction = \"(?:\\\\.\\\\d+)\";\n    var intPart = \"(?:\\\\d+)\";\n    var pointFloat = \"(?:(?:\" + intPart + \"?\" + fraction + \")|(?:\" + intPart + \"\\\\.))\";\n    var exponentFloat = \"(?:(?:\" + pointFloat + \"|\" + intPart + \")\" + exponent + \")\";\n    var floatNumber = \"(?:\" + exponentFloat + \"|\" + pointFloat + \")\";\n    var stringEscape = \"\\\\\\\\(x[0-9A-Fa-f]{2}|[0-7]{3}|[\\\\\\\\abfnrtv'\\\"]|U[0-9A-Fa-f]{8}|u[0-9A-Fa-f]{4})\";\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"!.*$\"\n      }, {\n        token: \"string\",\n        // multi line \"\"\" string start\n        regex: strPre + '\"{3}',\n        next: \"qqstring3\"\n      }, {\n        token: \"string\",\n        // \" string\n        regex: strPre + '\"(?=.)',\n        next: \"qqstring\"\n      }, {\n        token: \"string\",\n        // multi line ''' string start\n        regex: strPre + \"'{3}\",\n        next: \"qstring3\"\n      }, {\n        token: \"string\",\n        // ' string\n        regex: strPre + \"'(?=.)\",\n        next: \"qstring\"\n      }, {\n        token: \"constant.numeric\",\n        // imaginary\n        regex: \"(?:\" + floatNumber + \"|\\\\d+)[jJ]\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: floatNumber\n      }, {\n        token: \"constant.numeric\",\n        // long integer\n        regex: integer + \"[lL]\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // integer\n        regex: integer + \"\\\\b\"\n      }, {\n        token: \"keyword\",\n        // pre-compiler directives\n        regex: \"#\\\\s*(?:include|import|define|undef|INCLUDE|IMPORT|DEFINE|UNDEF)\\\\b\"\n      }, {\n        token: \"keyword\",\n        // special case pre-compiler directive\n        regex: \"#\\\\s*(?:endif|ifdef|else|elseif|ifndef|ENDIF|IFDEF|ELSE|ELSEIF|IFNDEF)\\\\b\"\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n      }, {\n        token: \"keyword.operator\",\n        regex: \"\\\\+|\\\\-|\\\\*|\\\\*\\\\*|\\\\/|\\\\/\\\\/|%|<<|>>|&|\\\\||\\\\^|~|<|>|<=|=>|==|!=|<>|=\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[\\\\[\\\\(\\\\{]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\]\\\\)\\\\}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }],\n      \"qqstring3\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        // multi line \"\"\" string end\n        regex: '\"{3}',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"qstring3\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        // multi line \"\"\" string end\n        regex: '\"{3}',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"qqstring\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"qqstring\"\n      }, {\n        token: \"string\",\n        regex: '\"|$',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"qstring\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"qstring\"\n      }, {\n        token: \"string\",\n        regex: \"'|$\",\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }]\n    };\n  };\n\n  oop.inherits(FortranHighlightRules, TextHighlightRules);\n  exports.FortranHighlightRules = FortranHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/fortran\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/fortran_highlight_rules\", \"ace/mode/folding/cstyle\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var FortranHighlightRules = require(\"./fortran_highlight_rules\").FortranHighlightRules;\n\n  var CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var Range = require(\"../range\").Range;\n\n  var Mode = function () {\n    this.HighlightRules = FortranHighlightRules;\n    this.foldingRules = new CStyleFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"!\";\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n\n        if (match) {\n          indent += tab;\n        }\n      }\n\n      return indent;\n    };\n\n    var outdents = {\n      \"return\": 1,\n      \"break\": 1,\n      \"continue\": 1,\n      \"RETURN\": 1,\n      \"BREAK\": 1,\n      \"CONTINUE\": 1\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      if (input !== \"\\r\\n\" && input !== \"\\r\" && input !== \"\\n\") return false;\n      var tokens = this.getTokenizer().getLineTokens(line.trim(), state).tokens;\n      if (!tokens) return false;\n\n      do {\n        var last = tokens.pop();\n      } while (last && (last.type == \"comment\" || last.type == \"text\" && last.value.match(/^\\s+$/)));\n\n      if (!last) return false;\n      return last.type == \"keyword\" && outdents[last.value];\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      row += 1;\n      var indent = this.$getIndent(doc.getLine(row));\n      var tab = doc.getTabString();\n      if (indent.slice(-tab.length) == tab) doc.remove(new Range(row, indent.length - tab.length, row, indent.length));\n    };\n\n    this.$id = \"ace/mode/fortran\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/fortran\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["C:/Users/akash/Desktop/Project/React/SyntaxMeets/frontend/syntaxmeets/node_modules/ace-builds/src-noconflict/mode-fortran.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","FortranHighlightRules","keywords","keywordOperators","builtinConstants","builtinFunctions","storageType","storageModifiers","keywordMapper","createKeywordMapper","strPre","decimalInteger","octInteger","hexInteger","binInteger","integer","exponent","fraction","intPart","pointFloat","exponentFloat","floatNumber","stringEscape","$rules","token","regex","next","defaultToken","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","start","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","CStyleFoldMode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","getNextLineIndent","state","tab","$getIndent","tokenizedLine","getTokenizer","getLineTokens","tokens","type","outdents","checkOutdent","input","trim","last","pop","value","autoOutdent","doc","getTabString","slice","remove","$id"],"mappings":"AAAAA,GAAG,CAACC,MAAJ,CAAW,kCAAX,EAA8C,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,EAA8B,aAA9B,EAA4C,+BAA5C,CAA9C,EAA4H,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AAC/J;;AAEA,MAAIC,GAAG,GAAGH,OAAO,CAAC,YAAD,CAAjB;;AACA,MAAII,kBAAkB,GAAGJ,OAAO,CAAC,wBAAD,CAAP,CAAkCI,kBAA3D;;AAEA,MAAIC,qBAAqB,GAAG,YAAW;AAEnC,QAAIC,QAAQ,GACR,+EACA,gFADA,GAEA,gCAFA,GAGA,8BAHA,GAIA,4EAJA,GAKA,gFALA,GAMA,gCANA,GAOA,6BARJ;AAWA,QAAIC,gBAAgB,GAChB,kCACA,8BAFJ;AAKA,QAAIC,gBAAgB,GAChB,uBADJ;AAIA,QAAIC,gBAAgB,GAChB,kEACA,mDADA,GAEA,8DAFA,GAGA,mEAHA,GAIA,mFAJA,GAKA,6EALA,GAMA,iGANA,GAOA,2FAPA,GAQA,uFARA,GASA,4FATA,GAUA,iFAVA,GAWA,0FAXA,GAYA,+DAZA,GAaA,mDAbA,GAcA,8DAdA,GAeA,mEAfA,GAgBA,mFAhBA,GAiBA,6EAjBA,GAkBA,iGAlBA,GAmBA,2FAnBA,GAoBA,uFApBA,GAqBA,4FArBA,GAsBA,iFAtBA,GAuBA,yFAxBJ;AA2BA,QAAIC,WAAW,GACX,yCACA,qCAFJ;AAKA,QAAIC,gBAAgB,GAChB,0EACA,sEAFJ;AAKA,QAAIC,aAAa,GAAG,KAAKC,mBAAL,CAAyB;AACzC,4BAAsB,UADmB;AAEzC,0BAAoBJ,gBAFqB;AAGzC,2BAAqBD,gBAHoB;AAIzC,iBAAWF,QAJ8B;AAKzC,0BAAoBC,gBALqB;AAMzC,sBAAgBG,WANyB;AAOzC,0BAAqBC;AAPoB,KAAzB,EAQjB,YARiB,CAApB;AAUA,QAAIG,MAAM,GAAG,0BAAb;AAEA,QAAIC,cAAc,GAAG,yBAArB;AACA,QAAIC,UAAU,GAAG,kBAAjB;AACA,QAAIC,UAAU,GAAG,uBAAjB;AACA,QAAIC,UAAU,GAAG,gBAAjB;AACA,QAAIC,OAAO,GAAG,QAAQJ,cAAR,GAAyB,GAAzB,GAA+BC,UAA/B,GAA4C,GAA5C,GAAkDC,UAAlD,GAA+D,GAA/D,GAAqEC,UAArE,GAAkF,GAAhG;AAEA,QAAIE,QAAQ,GAAG,mBAAf;AACA,QAAIC,QAAQ,GAAG,aAAf;AACA,QAAIC,OAAO,GAAG,UAAd;AACA,QAAIC,UAAU,GAAG,WAAWD,OAAX,GAAqB,GAArB,GAA2BD,QAA3B,GAAsC,OAAtC,GAAgDC,OAAhD,GAA0D,OAA3E;AACA,QAAIE,aAAa,GAAG,WAAWD,UAAX,GAAwB,GAAxB,GAA+BD,OAA/B,GAAyC,GAAzC,GAA+CF,QAA/C,GAA0D,GAA9E;AACA,QAAIK,WAAW,GAAG,QAAQD,aAAR,GAAwB,GAAxB,GAA8BD,UAA9B,GAA2C,GAA7D;AAEA,QAAIG,YAAY,GAAI,iFAApB;AAEA,SAAKC,MAAL,GAAc;AACV,eAAU,CAAE;AACRC,QAAAA,KAAK,EAAG,SADA;AAERC,QAAAA,KAAK,EAAG;AAFA,OAAF,EAGP;AACCD,QAAAA,KAAK,EAAG,QADT;AAC6B;AAC5BC,QAAAA,KAAK,EAAGf,MAAM,GAAG,MAFlB;AAGCgB,QAAAA,IAAI,EAAG;AAHR,OAHO,EAOP;AACCF,QAAAA,KAAK,EAAG,QADT;AAC6B;AAC5BC,QAAAA,KAAK,EAAGf,MAAM,GAAG,QAFlB;AAGCgB,QAAAA,IAAI,EAAG;AAHR,OAPO,EAWP;AACCF,QAAAA,KAAK,EAAG,QADT;AAC6B;AAC5BC,QAAAA,KAAK,EAAGf,MAAM,GAAG,MAFlB;AAGCgB,QAAAA,IAAI,EAAG;AAHR,OAXO,EAeP;AACCF,QAAAA,KAAK,EAAG,QADT;AAC6B;AAC5BC,QAAAA,KAAK,EAAGf,MAAM,GAAG,QAFlB;AAGCgB,QAAAA,IAAI,EAAG;AAHR,OAfO,EAmBP;AACCF,QAAAA,KAAK,EAAG,kBADT;AAC6B;AAC5BC,QAAAA,KAAK,EAAG,QAAQJ,WAAR,GAAsB;AAF/B,OAnBO,EAsBP;AACCG,QAAAA,KAAK,EAAG,kBADT;AAC6B;AAC5BC,QAAAA,KAAK,EAAGJ;AAFT,OAtBO,EAyBP;AACCG,QAAAA,KAAK,EAAG,kBADT;AAC6B;AAC5BC,QAAAA,KAAK,EAAGV,OAAO,GAAG;AAFnB,OAzBO,EA4BP;AACCS,QAAAA,KAAK,EAAG,kBADT;AAC6B;AAC5BC,QAAAA,KAAK,EAAGV,OAAO,GAAG;AAFnB,OA5BO,EA+BP;AACCS,QAAAA,KAAK,EAAG,SADT;AACoB;AACnBC,QAAAA,KAAK,EAAG;AAFT,OA/BO,EAkCP;AACCD,QAAAA,KAAK,EAAG,SADT;AACoB;AACnBC,QAAAA,KAAK,EAAG;AAFT,OAlCO,EAqCP;AACCD,QAAAA,KAAK,EAAGhB,aADT;AAECiB,QAAAA,KAAK,EAAG;AAFT,OArCO,EAwCP;AACCD,QAAAA,KAAK,EAAG,kBADT;AAECC,QAAAA,KAAK,EAAG;AAFT,OAxCO,EA2CP;AACCD,QAAAA,KAAK,EAAG,cADT;AAECC,QAAAA,KAAK,EAAG;AAFT,OA3CO,EA8CP;AACCD,QAAAA,KAAK,EAAG,cADT;AAECC,QAAAA,KAAK,EAAG;AAFT,OA9CO,EAiDP;AACCD,QAAAA,KAAK,EAAG,MADT;AAECC,QAAAA,KAAK,EAAG;AAFT,OAjDO,CADA;AAsDV,mBAAc,CAAE;AACZD,QAAAA,KAAK,EAAG,0BADI;AAEZC,QAAAA,KAAK,EAAGH;AAFI,OAAF,EAGX;AACCE,QAAAA,KAAK,EAAG,QADT;AACmB;AAClBC,QAAAA,KAAK,EAAG,MAFT;AAGCC,QAAAA,IAAI,EAAG;AAHR,OAHW,EAOX;AACCC,QAAAA,YAAY,EAAG;AADhB,OAPW,CAtDJ;AAgEV,kBAAa,CAAE;AACXH,QAAAA,KAAK,EAAG,0BADG;AAEXC,QAAAA,KAAK,EAAGH;AAFG,OAAF,EAGV;AACCE,QAAAA,KAAK,EAAG,QADT;AACmB;AAClBC,QAAAA,KAAK,EAAG,MAFT;AAGCC,QAAAA,IAAI,EAAG;AAHR,OAHU,EAOV;AACCC,QAAAA,YAAY,EAAG;AADhB,OAPU,CAhEH;AA0EV,kBAAa,CAAC;AACVH,QAAAA,KAAK,EAAG,0BADE;AAEVC,QAAAA,KAAK,EAAGH;AAFE,OAAD,EAGV;AACCE,QAAAA,KAAK,EAAG,QADT;AAECC,QAAAA,KAAK,EAAG,OAFT;AAGCC,QAAAA,IAAI,EAAI;AAHT,OAHU,EAOV;AACCF,QAAAA,KAAK,EAAG,QADT;AAECC,QAAAA,KAAK,EAAG,KAFT;AAGCC,QAAAA,IAAI,EAAI;AAHT,OAPU,EAWV;AACCC,QAAAA,YAAY,EAAE;AADf,OAXU,CA1EH;AAwFV,iBAAY,CAAC;AACTH,QAAAA,KAAK,EAAG,0BADC;AAETC,QAAAA,KAAK,EAAGH;AAFC,OAAD,EAGT;AACCE,QAAAA,KAAK,EAAG,QADT;AAECC,QAAAA,KAAK,EAAG,OAFT;AAGCC,QAAAA,IAAI,EAAI;AAHT,OAHS,EAOT;AACCF,QAAAA,KAAK,EAAG,QADT;AAECC,QAAAA,KAAK,EAAG,KAFT;AAGCC,QAAAA,IAAI,EAAI;AAHT,OAPS,EAWT;AACCC,QAAAA,YAAY,EAAE;AADf,OAXS;AAxFF,KAAd;AAuGH,GA7LD;;AA+LA5B,EAAAA,GAAG,CAAC6B,QAAJ,CAAa3B,qBAAb,EAAoCD,kBAApC;AAEAH,EAAAA,OAAO,CAACI,qBAAR,GAAgCA,qBAAhC;AACC,CAxMD;AA0MAP,GAAG,CAACC,MAAJ,CAAW,yBAAX,EAAqC,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,EAA8B,aAA9B,EAA4C,WAA5C,EAAwD,4BAAxD,CAArC,EAA4H,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AAC/J;;AAEA,MAAIC,GAAG,GAAGH,OAAO,CAAC,eAAD,CAAjB;;AACA,MAAIiC,KAAK,GAAGjC,OAAO,CAAC,aAAD,CAAP,CAAuBiC,KAAnC;;AACA,MAAIC,YAAY,GAAGlC,OAAO,CAAC,aAAD,CAAP,CAAuBmC,QAA1C;;AAEA,MAAIA,QAAQ,GAAGlC,OAAO,CAACkC,QAAR,GAAmB,UAASC,YAAT,EAAuB;AACrD,QAAIA,YAAJ,EAAkB;AACd,WAAKC,kBAAL,GAA0B,IAAIC,MAAJ,CACtB,KAAKD,kBAAL,CAAwBE,MAAxB,CAA+BC,OAA/B,CAAuC,WAAvC,EAAoD,MAAMJ,YAAY,CAACK,KAAvE,CADsB,CAA1B;AAGA,WAAKC,iBAAL,GAAyB,IAAIJ,MAAJ,CACrB,KAAKI,iBAAL,CAAuBH,MAAvB,CAA8BC,OAA9B,CAAsC,WAAtC,EAAmD,MAAMJ,YAAY,CAACO,GAAtE,CADqB,CAAzB;AAGH;AACJ,GATD;;AAUAxC,EAAAA,GAAG,CAAC6B,QAAJ,CAAaG,QAAb,EAAuBD,YAAvB;AAEA,GAAC,YAAW;AAER,SAAKG,kBAAL,GAA0B,kCAA1B;AACA,SAAKK,iBAAL,GAAyB,sCAAzB;AACA,SAAKE,wBAAL,GAA+B,sBAA/B;AACA,SAAKC,wBAAL,GAAgC,0BAAhC;AACA,SAAKC,aAAL,GAAqB,2BAArB;AACA,SAAKC,kBAAL,GAA0B,KAAKC,aAA/B;;AACA,SAAKA,aAAL,GAAqB,UAASC,OAAT,EAAkBC,SAAlB,EAA6BC,GAA7B,EAAkC;AACnD,UAAIC,IAAI,GAAGH,OAAO,CAACI,OAAR,CAAgBF,GAAhB,CAAX;;AAEA,UAAI,KAAKP,wBAAL,CAA8BU,IAA9B,CAAmCF,IAAnC,CAAJ,EAA8C;AAC1C,YAAI,CAAC,KAAKN,aAAL,CAAmBQ,IAAnB,CAAwBF,IAAxB,CAAD,IAAkC,CAAC,KAAKP,wBAAL,CAA8BS,IAA9B,CAAmCF,IAAnC,CAAvC,EACI,OAAO,EAAP;AACP;;AAED,UAAIG,EAAE,GAAG,KAAKR,kBAAL,CAAwBE,OAAxB,EAAiCC,SAAjC,EAA4CC,GAA5C,CAAT;;AAEA,UAAI,CAACI,EAAD,IAAO,KAAKT,aAAL,CAAmBQ,IAAnB,CAAwBF,IAAxB,CAAX,EACI,OAAO,OAAP,CAX+C,CAW/B;;AAEpB,aAAOG,EAAP;AACH,KAdD;;AAgBA,SAAKC,kBAAL,GAA0B,UAASP,OAAT,EAAkBC,SAAlB,EAA6BC,GAA7B,EAAkCM,cAAlC,EAAkD;AACxE,UAAIL,IAAI,GAAGH,OAAO,CAACI,OAAR,CAAgBF,GAAhB,CAAX;AAEA,UAAI,KAAKL,aAAL,CAAmBQ,IAAnB,CAAwBF,IAAxB,CAAJ,EACI,OAAO,KAAKM,qBAAL,CAA2BT,OAA3B,EAAoCG,IAApC,EAA0CD,GAA1C,CAAP;AAEJ,UAAIQ,KAAK,GAAGP,IAAI,CAACO,KAAL,CAAW,KAAKtB,kBAAhB,CAAZ;;AACA,UAAIsB,KAAJ,EAAW;AACP,YAAIC,CAAC,GAAGD,KAAK,CAACE,KAAd;AAEA,YAAIF,KAAK,CAAC,CAAD,CAAT,EACI,OAAO,KAAKG,mBAAL,CAAyBb,OAAzB,EAAkCU,KAAK,CAAC,CAAD,CAAvC,EAA4CR,GAA5C,EAAiDS,CAAjD,CAAP;AAEJ,YAAIG,KAAK,GAAGd,OAAO,CAACe,mBAAR,CAA4Bb,GAA5B,EAAiCS,CAAC,GAAGD,KAAK,CAAC,CAAD,CAAL,CAASM,MAA9C,EAAsD,CAAtD,CAAZ;;AAEA,YAAIF,KAAK,IAAI,CAACA,KAAK,CAACG,WAAN,EAAd,EAAmC;AAC/B,cAAIT,cAAJ,EAAoB;AAChBM,YAAAA,KAAK,GAAG,KAAKI,eAAL,CAAqBlB,OAArB,EAA8BE,GAA9B,CAAR;AACH,WAFD,MAEO,IAAID,SAAS,IAAI,KAAjB,EACHa,KAAK,GAAG,IAAR;AACP;;AAED,eAAOA,KAAP;AACH;;AAED,UAAIb,SAAS,KAAK,WAAlB,EACI;AAEJ,UAAIS,KAAK,GAAGP,IAAI,CAACO,KAAL,CAAW,KAAKjB,iBAAhB,CAAZ;;AACA,UAAIiB,KAAJ,EAAW;AACP,YAAIC,CAAC,GAAGD,KAAK,CAACE,KAAN,GAAcF,KAAK,CAAC,CAAD,CAAL,CAASM,MAA/B;AAEA,YAAIN,KAAK,CAAC,CAAD,CAAT,EACI,OAAO,KAAKS,mBAAL,CAAyBnB,OAAzB,EAAkCU,KAAK,CAAC,CAAD,CAAvC,EAA4CR,GAA5C,EAAiDS,CAAjD,CAAP;AAEJ,eAAOX,OAAO,CAACe,mBAAR,CAA4Bb,GAA5B,EAAiCS,CAAjC,EAAoC,CAAC,CAArC,CAAP;AACH;AACJ,KArCD;;AAuCA,SAAKO,eAAL,GAAuB,UAASlB,OAAT,EAAkBE,GAAlB,EAAuB;AAC1C,UAAIC,IAAI,GAAGH,OAAO,CAACI,OAAR,CAAgBF,GAAhB,CAAX;AACA,UAAIkB,WAAW,GAAGjB,IAAI,CAACkB,MAAL,CAAY,IAAZ,CAAlB;AACA,UAAIC,QAAQ,GAAGpB,GAAf;AACA,UAAIqB,WAAW,GAAGpB,IAAI,CAACa,MAAvB;AACAd,MAAAA,GAAG,GAAGA,GAAG,GAAG,CAAZ;AACA,UAAIsB,MAAM,GAAGtB,GAAb;AACA,UAAIuB,MAAM,GAAGzB,OAAO,CAAC0B,SAAR,EAAb;;AACA,aAAO,EAAExB,GAAF,GAAQuB,MAAf,EAAuB;AACnBtB,QAAAA,IAAI,GAAGH,OAAO,CAACI,OAAR,CAAgBF,GAAhB,CAAP;AACA,YAAIyB,MAAM,GAAGxB,IAAI,CAACkB,MAAL,CAAY,IAAZ,CAAb;AACA,YAAIM,MAAM,KAAK,CAAC,CAAhB,EACI;AACJ,YAAKP,WAAW,GAAGO,MAAnB,EACI;AACJ,YAAIC,QAAQ,GAAG,KAAKrB,kBAAL,CAAwBP,OAAxB,EAAiC,KAAjC,EAAwCE,GAAxC,CAAf;;AAEA,YAAI0B,QAAJ,EAAc;AACV,cAAIA,QAAQ,CAACpC,KAAT,CAAeU,GAAf,IAAsBoB,QAA1B,EAAoC;AAChC;AACH,WAFD,MAEO,IAAIM,QAAQ,CAACX,WAAT,EAAJ,EAA4B;AAC/Bf,YAAAA,GAAG,GAAG0B,QAAQ,CAAClC,GAAT,CAAaQ,GAAnB;AACH,WAFM,MAEA,IAAIkB,WAAW,IAAIO,MAAnB,EAA2B;AAC9B;AACH;AACJ;;AACDH,QAAAA,MAAM,GAAGtB,GAAT;AACH;;AAED,aAAO,IAAIlB,KAAJ,CAAUsC,QAAV,EAAoBC,WAApB,EAAiCC,MAAjC,EAAyCxB,OAAO,CAACI,OAAR,CAAgBoB,MAAhB,EAAwBR,MAAjE,CAAP;AACH,KA9BD;;AA+BA,SAAKP,qBAAL,GAA6B,UAAST,OAAT,EAAkBG,IAAlB,EAAwBD,GAAxB,EAA6B;AACtD,UAAIqB,WAAW,GAAGpB,IAAI,CAACkB,MAAL,CAAY,MAAZ,CAAlB;AACA,UAAII,MAAM,GAAGzB,OAAO,CAAC0B,SAAR,EAAb;AACA,UAAIJ,QAAQ,GAAGpB,GAAf;AAEA,UAAI2B,EAAE,GAAG,sCAAT;AACA,UAAIC,KAAK,GAAG,CAAZ;;AACA,aAAO,EAAE5B,GAAF,GAAQuB,MAAf,EAAuB;AACnBtB,QAAAA,IAAI,GAAGH,OAAO,CAACI,OAAR,CAAgBF,GAAhB,CAAP;AACA,YAAI6B,CAAC,GAAGF,EAAE,CAACG,IAAH,CAAQ7B,IAAR,CAAR;AACA,YAAI,CAAC4B,CAAL,EAAQ;AACR,YAAIA,CAAC,CAAC,CAAD,CAAL,EAAUD,KAAK,GAAf,KACKA,KAAK;AAEV,YAAI,CAACA,KAAL,EAAY;AACf;;AAED,UAAIN,MAAM,GAAGtB,GAAb;;AACA,UAAIsB,MAAM,GAAGF,QAAb,EAAuB;AACnB,eAAO,IAAItC,KAAJ,CAAUsC,QAAV,EAAoBC,WAApB,EAAiCC,MAAjC,EAAyCrB,IAAI,CAACa,MAA9C,CAAP;AACH;AACJ,KArBD;AAuBH,GArHD,EAqHGiB,IArHH,CAqHQ/C,QAAQ,CAACgD,SArHjB;AAuHC,CA1ID;AA4IArF,GAAG,CAACC,MAAJ,CAAW,kBAAX,EAA8B,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,EAA8B,aAA9B,EAA4C,eAA5C,EAA4D,kCAA5D,EAA+F,yBAA/F,EAAyH,WAAzH,CAA9B,EAAqK,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AACxM;;AAEA,MAAIC,GAAG,GAAGH,OAAO,CAAC,YAAD,CAAjB;;AACA,MAAIoF,QAAQ,GAAGpF,OAAO,CAAC,QAAD,CAAP,CAAkBqF,IAAjC;;AACA,MAAIhF,qBAAqB,GAAGL,OAAO,CAAC,2BAAD,CAAP,CAAqCK,qBAAjE;;AACA,MAAIiF,cAAc,GAAGtF,OAAO,CAAC,kBAAD,CAAP,CAA4BmC,QAAjD;;AACA,MAAIF,KAAK,GAAGjC,OAAO,CAAC,UAAD,CAAP,CAAoBiC,KAAhC;;AAEA,MAAIoD,IAAI,GAAG,YAAW;AAClB,SAAKE,cAAL,GAAsBlF,qBAAtB;AACA,SAAKmF,YAAL,GAAoB,IAAIF,cAAJ,EAApB;AACA,SAAKG,UAAL,GAAkB,KAAKC,iBAAvB;AACH,GAJD;;AAKAvF,EAAAA,GAAG,CAAC6B,QAAJ,CAAaqD,IAAb,EAAmBD,QAAnB;AAEA,GAAC,YAAW;AAER,SAAKO,gBAAL,GAAwB,GAAxB;;AAEA,SAAKC,iBAAL,GAAyB,UAASC,KAAT,EAAgBzC,IAAhB,EAAsB0C,GAAtB,EAA2B;AAChD,UAAIlB,MAAM,GAAG,KAAKmB,UAAL,CAAgB3C,IAAhB,CAAb;AAEA,UAAI4C,aAAa,GAAG,KAAKC,YAAL,GAAoBC,aAApB,CAAkC9C,IAAlC,EAAwCyC,KAAxC,CAApB;AACA,UAAIM,MAAM,GAAGH,aAAa,CAACG,MAA3B;;AAEA,UAAIA,MAAM,CAAClC,MAAP,IAAiBkC,MAAM,CAACA,MAAM,CAAClC,MAAP,GAAc,CAAf,CAAN,CAAwBmC,IAAxB,IAAgC,SAArD,EAAgE;AAC5D,eAAOxB,MAAP;AACH;;AAED,UAAIiB,KAAK,IAAI,OAAb,EAAsB;AAClB,YAAIlC,KAAK,GAAGP,IAAI,CAACO,KAAL,CAAW,kBAAX,CAAZ;;AACA,YAAIA,KAAJ,EAAW;AACPiB,UAAAA,MAAM,IAAIkB,GAAV;AACH;AACJ;;AAED,aAAOlB,MAAP;AACH,KAlBD;;AAoBA,QAAIyB,QAAQ,GAAG;AACX,gBAAU,CADC;AAEX,eAAS,CAFE;AAGX,kBAAY,CAHD;AAIX,gBAAU,CAJC;AAKX,eAAS,CALE;AAMX,kBAAY;AAND,KAAf;;AASA,SAAKC,YAAL,GAAoB,UAAST,KAAT,EAAgBzC,IAAhB,EAAsBmD,KAAtB,EAA6B;AAC7C,UAAIA,KAAK,KAAK,MAAV,IAAoBA,KAAK,KAAK,IAA9B,IAAsCA,KAAK,KAAK,IAApD,EACI,OAAO,KAAP;AAEJ,UAAIJ,MAAM,GAAG,KAAKF,YAAL,GAAoBC,aAApB,CAAkC9C,IAAI,CAACoD,IAAL,EAAlC,EAA+CX,KAA/C,EAAsDM,MAAnE;AAEA,UAAI,CAACA,MAAL,EACI,OAAO,KAAP;;AACJ,SAAG;AACC,YAAIM,IAAI,GAAGN,MAAM,CAACO,GAAP,EAAX;AACH,OAFD,QAESD,IAAI,KAAKA,IAAI,CAACL,IAAL,IAAa,SAAb,IAA2BK,IAAI,CAACL,IAAL,IAAa,MAAb,IAAuBK,IAAI,CAACE,KAAL,CAAWhD,KAAX,CAAiB,OAAjB,CAAvD,CAFb;;AAIA,UAAI,CAAC8C,IAAL,EACI,OAAO,KAAP;AAEJ,aAAQA,IAAI,CAACL,IAAL,IAAa,SAAb,IAA0BC,QAAQ,CAACI,IAAI,CAACE,KAAN,CAA1C;AACH,KAhBD;;AAkBA,SAAKC,WAAL,GAAmB,UAASf,KAAT,EAAgBgB,GAAhB,EAAqB1D,GAArB,EAA0B;AAEzCA,MAAAA,GAAG,IAAI,CAAP;AACA,UAAIyB,MAAM,GAAG,KAAKmB,UAAL,CAAgBc,GAAG,CAACxD,OAAJ,CAAYF,GAAZ,CAAhB,CAAb;AACA,UAAI2C,GAAG,GAAGe,GAAG,CAACC,YAAJ,EAAV;AACA,UAAIlC,MAAM,CAACmC,KAAP,CAAa,CAACjB,GAAG,CAAC7B,MAAlB,KAA6B6B,GAAjC,EACIe,GAAG,CAACG,MAAJ,CAAW,IAAI/E,KAAJ,CAAUkB,GAAV,EAAeyB,MAAM,CAACX,MAAP,GAAc6B,GAAG,CAAC7B,MAAjC,EAAyCd,GAAzC,EAA8CyB,MAAM,CAACX,MAArD,CAAX;AACP,KAPD;;AASA,SAAKgD,GAAL,GAAW,kBAAX;AACH,GA7DD,EA6DG/B,IA7DH,CA6DQG,IAAI,CAACF,SA7Db;AA+DAlF,EAAAA,OAAO,CAACoF,IAAR,GAAeA,IAAf;AACC,CAhFD;;AAgFmB,CAAC,YAAW;AACXvF,EAAAA,GAAG,CAACE,OAAJ,CAAY,CAAC,kBAAD,CAAZ,EAAkC,UAASgF,CAAT,EAAY;AAC1C,QAAI,OAAO9E,MAAP,IAAiB,QAAjB,IAA6B,OAAOD,OAAP,IAAkB,QAA/C,IAA2DC,MAA/D,EAAuE;AACnEA,MAAAA,MAAM,CAACD,OAAP,GAAiB+E,CAAjB;AACH;AACJ,GAJD;AAKH,CANE","sourcesContent":["ace.define(\"ace/mode/fortran_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\nvar FortranHighlightRules = function() {\r\n\r\n    var keywords = (\r\n        \"call|case|contains|continue|cycle|do|else|elseif|end|enddo|endif|function|\"+ \r\n        \"if|implicit|in|include|inout|intent|module|none|only|out|print|program|return|\"+ \r\n        \"select|status|stop|subroutine|\" +\r\n        \"return|then|use|while|write|\"+\r\n        \"CALL|CASE|CONTAINS|CONTINUE|CYCLE|DO|ELSE|ELSEIF|END|ENDDO|ENDIF|FUNCTION|\"+\r\n        \"IF|IMPLICIT|IN|INCLUDE|INOUT|INTENT|MODULE|NONE|ONLY|OUT|PRINT|PROGRAM|RETURN|\"+\r\n        \"SELECT|STATUS|STOP|SUBROUTINE|\" +\r\n        \"RETURN|THEN|USE|WHILE|WRITE\"\r\n    );\r\n\r\n    var keywordOperators = (\r\n        \"and|or|not|eq|ne|gt|ge|lt|le|\" +\r\n        \"AND|OR|NOT|EQ|NE|GT|GE|LT|LE\" \r\n    );\r\n\r\n    var builtinConstants = (\r\n        \"true|false|TRUE|FALSE\"\r\n    );\r\n\r\n    var builtinFunctions = (\r\n        \"abs|achar|acos|acosh|adjustl|adjustr|aimag|aint|all|allocate|\"+\r\n        \"anint|any|asin|asinh|associated|atan|atan2|atanh|\"+\r\n        \"bessel_j0|bessel_j1|bessel_jn|bessel_y0|bessel_y1|bessel_yn|\"+\r\n        \"bge|bgt|bit_size|ble|blt|btest|ceiling|char|cmplx|conjg|cos|cosh|\"+\r\n        \"count|cpu_time|cshift|date_and_time|dble|deallocate|digits|dim|dot_product|dprod|\"+\r\n        \"dshiftl|dshiftr|dsqrt|eoshift|epsilon|erf|erfc|erfc_scaled|exp|float|floor|\"+\r\n        \"format|fraction|gamma|input|len|lge|lgt|lle|llt|log|log10|maskl|maskr|matmul|max|maxloc|maxval|\"+\r\n        \"merge|min|minloc|minval|mod|modulo|nint|not|norm2|null|nullify|pack|parity|popcnt|poppar|\"+\r\n        \"precision|present|product|radix|random_number|random_seed|range|repeat|reshape|round|\"+\r\n        \"rrspacing|same_type_as|scale|scan|selected_char_kind|selected_int_kind|selected_real_kind|\"+\r\n        \"set_exponent|shape|shifta|shiftl|shiftr|sign|sin|sinh|size|sngl|spacing|spread|\"+\r\n        \"sqrt|sum|system_clock|tan|tanh|tiny|trailz|transfer|transpose|trim|ubound|unpack|verify|\" +\r\n        \"ABS|ACHAR|ACOS|ACOSH|ADJUSTL|ADJUSTR|AIMAG|AINT|ALL|ALLOCATE|\"+\r\n        \"ANINT|ANY|ASIN|ASINH|ASSOCIATED|ATAN|ATAN2|ATANH|\"+\r\n        \"BESSEL_J0|BESSEL_J1|BESSEL_JN|BESSEL_Y0|BESSEL_Y1|BESSEL_YN|\"+\r\n        \"BGE|BGT|BIT_SIZE|BLE|BLT|BTEST|CEILING|CHAR|CMPLX|CONJG|COS|COSH|\"+\r\n        \"COUNT|CPU_TIME|CSHIFT|DATE_AND_TIME|DBLE|DEALLOCATE|DIGITS|DIM|DOT_PRODUCT|DPROD|\"+\r\n        \"DSHIFTL|DSHIFTR|DSQRT|EOSHIFT|EPSILON|ERF|ERFC|ERFC_SCALED|EXP|FLOAT|FLOOR|\"+\r\n        \"FORMAT|FRACTION|GAMMA|INPUT|LEN|LGE|LGT|LLE|LLT|LOG|LOG10|MASKL|MASKR|MATMUL|MAX|MAXLOC|MAXVAL|\"+\r\n        \"MERGE|MIN|MINLOC|MINVAL|MOD|MODULO|NINT|NOT|NORM2|NULL|NULLIFY|PACK|PARITY|POPCNT|POPPAR|\"+\r\n        \"PRECISION|PRESENT|PRODUCT|RADIX|RANDOM_NUMBER|RANDOM_SEED|RANGE|REPEAT|RESHAPE|ROUND|\"+\r\n        \"RRSPACING|SAME_TYPE_AS|SCALE|SCAN|SELECTED_CHAR_KIND|SELECTED_INT_KIND|SELECTED_REAL_KIND|\"+\r\n        \"SET_EXPONENT|SHAPE|SHIFTA|SHIFTL|SHIFTR|SIGN|SIN|SINH|SIZE|SNGL|SPACING|SPREAD|\"+\r\n        \"SQRT|SUM|SYSTEM_CLOCK|TAN|TANH|TINY|TRAILZ|TRANSFER|TRANSPOSE|TRIM|UBOUND|UNPACK|VERIFY\"\r\n    );\r\n\r\n    var storageType = (\r\n        \"logical|character|integer|real|type|\" +\r\n        \"LOGICAL|CHARACTER|INTEGER|REAL|TYPE\"    \r\n    );\r\n\r\n    var storageModifiers = ( \r\n        \"allocatable|dimension|intent|parameter|pointer|target|private|public|\" +\r\n        \"ALLOCATABLE|DIMENSION|INTENT|PARAMETER|POINTER|TARGET|PRIVATE|PUBLIC\"\r\n    );\r\n\r\n    var keywordMapper = this.createKeywordMapper({\r\n        \"invalid.deprecated\": \"debugger\",\r\n        \"support.function\": builtinFunctions,\r\n        \"constant.language\": builtinConstants,\r\n        \"keyword\": keywords,\r\n        \"keyword.operator\": keywordOperators,\r\n        \"storage.type\": storageType,\r\n        \"storage.modifier\" : storageModifiers\r\n    }, \"identifier\");\r\n\r\n    var strPre = \"(?:r|u|ur|R|U|UR|Ur|uR)?\";\r\n\r\n    var decimalInteger = \"(?:(?:[1-9]\\\\d*)|(?:0))\";\r\n    var octInteger = \"(?:0[oO]?[0-7]+)\";\r\n    var hexInteger = \"(?:0[xX][\\\\dA-Fa-f]+)\";\r\n    var binInteger = \"(?:0[bB][01]+)\";\r\n    var integer = \"(?:\" + decimalInteger + \"|\" + octInteger + \"|\" + hexInteger + \"|\" + binInteger + \")\";\r\n\r\n    var exponent = \"(?:[eE][+-]?\\\\d+)\";\r\n    var fraction = \"(?:\\\\.\\\\d+)\";\r\n    var intPart = \"(?:\\\\d+)\";\r\n    var pointFloat = \"(?:(?:\" + intPart + \"?\" + fraction + \")|(?:\" + intPart + \"\\\\.))\";\r\n    var exponentFloat = \"(?:(?:\" + pointFloat + \"|\" +  intPart + \")\" + exponent + \")\";\r\n    var floatNumber = \"(?:\" + exponentFloat + \"|\" + pointFloat + \")\";\r\n\r\n    var stringEscape =  \"\\\\\\\\(x[0-9A-Fa-f]{2}|[0-7]{3}|[\\\\\\\\abfnrtv'\\\"]|U[0-9A-Fa-f]{8}|u[0-9A-Fa-f]{4})\";\r\n\r\n    this.$rules = {\r\n        \"start\" : [ {\r\n            token : \"comment\",\r\n            regex : \"!.*$\"\r\n        }, {\r\n            token : \"string\",           // multi line \"\"\" string start\r\n            regex : strPre + '\"{3}',\r\n            next : \"qqstring3\"\r\n        }, {\r\n            token : \"string\",           // \" string\r\n            regex : strPre + '\"(?=.)',\r\n            next : \"qqstring\"\r\n        }, {\r\n            token : \"string\",           // multi line ''' string start\r\n            regex : strPre + \"'{3}\",\r\n            next : \"qstring3\"\r\n        }, {\r\n            token : \"string\",           // ' string\r\n            regex : strPre + \"'(?=.)\",\r\n            next : \"qstring\"\r\n        }, {\r\n            token : \"constant.numeric\", // imaginary\r\n            regex : \"(?:\" + floatNumber + \"|\\\\d+)[jJ]\\\\b\"\r\n        }, {\r\n            token : \"constant.numeric\", // float\r\n            regex : floatNumber\r\n        }, {\r\n            token : \"constant.numeric\", // long integer\r\n            regex : integer + \"[lL]\\\\b\"\r\n        }, {\r\n            token : \"constant.numeric\", // integer\r\n            regex : integer + \"\\\\b\"\r\n        }, {\r\n            token : \"keyword\", // pre-compiler directives\r\n            regex : \"#\\\\s*(?:include|import|define|undef|INCLUDE|IMPORT|DEFINE|UNDEF)\\\\b\"\r\n        }, {\r\n            token : \"keyword\", // special case pre-compiler directive\r\n            regex : \"#\\\\s*(?:endif|ifdef|else|elseif|ifndef|ENDIF|IFDEF|ELSE|ELSEIF|IFNDEF)\\\\b\"\r\n        }, {\r\n            token : keywordMapper,\r\n            regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\r\n        }, {\r\n            token : \"keyword.operator\",\r\n            regex : \"\\\\+|\\\\-|\\\\*|\\\\*\\\\*|\\\\/|\\\\/\\\\/|%|<<|>>|&|\\\\||\\\\^|~|<|>|<=|=>|==|!=|<>|=\"\r\n        }, {\r\n            token : \"paren.lparen\",\r\n            regex : \"[\\\\[\\\\(\\\\{]\"\r\n        }, {\r\n            token : \"paren.rparen\",\r\n            regex : \"[\\\\]\\\\)\\\\}]\"\r\n        }, {\r\n            token : \"text\",\r\n            regex : \"\\\\s+\"\r\n        } ],\r\n        \"qqstring3\" : [ {\r\n            token : \"constant.language.escape\",\r\n            regex : stringEscape\r\n        }, {\r\n            token : \"string\", // multi line \"\"\" string end\r\n            regex : '\"{3}',\r\n            next : \"start\"\r\n        }, {\r\n            defaultToken : \"string\"\r\n        } ],\r\n        \"qstring3\" : [ {\r\n            token : \"constant.language.escape\",\r\n            regex : stringEscape\r\n        }, {\r\n            token : \"string\", // multi line \"\"\" string end\r\n            regex : '\"{3}',\r\n            next : \"start\"\r\n        }, {\r\n            defaultToken : \"string\"\r\n        } ],\r\n        \"qqstring\" : [{\r\n            token : \"constant.language.escape\",\r\n            regex : stringEscape\r\n        }, {\r\n            token : \"string\",\r\n            regex : \"\\\\\\\\$\",\r\n            next  : \"qqstring\"\r\n        }, {\r\n            token : \"string\",\r\n            regex : '\"|$',\r\n            next  : \"start\"\r\n        }, {\r\n            defaultToken: \"string\"\r\n        }],\r\n        \"qstring\" : [{\r\n            token : \"constant.language.escape\",\r\n            regex : stringEscape\r\n        }, {\r\n            token : \"string\",\r\n            regex : \"\\\\\\\\$\",\r\n            next  : \"qstring\"\r\n        }, {\r\n            token : \"string\",\r\n            regex : \"'|$\",\r\n            next  : \"start\"\r\n        }, {\r\n            defaultToken: \"string\"\r\n        }]\r\n    };\r\n};\r\n\r\noop.inherits(FortranHighlightRules, TextHighlightRules);\r\n\r\nexports.FortranHighlightRules = FortranHighlightRules;\r\n});\r\n\r\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../../lib/oop\");\r\nvar Range = require(\"../../range\").Range;\r\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\r\n\r\nvar FoldMode = exports.FoldMode = function(commentRegex) {\r\n    if (commentRegex) {\r\n        this.foldingStartMarker = new RegExp(\r\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\r\n        );\r\n        this.foldingStopMarker = new RegExp(\r\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\r\n        );\r\n    }\r\n};\r\noop.inherits(FoldMode, BaseFoldMode);\r\n\r\n(function() {\r\n    \r\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\r\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\r\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\r\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\r\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\r\n    this._getFoldWidgetBase = this.getFoldWidget;\r\n    this.getFoldWidget = function(session, foldStyle, row) {\r\n        var line = session.getLine(row);\r\n    \r\n        if (this.singleLineBlockCommentRe.test(line)) {\r\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\r\n                return \"\";\r\n        }\r\n    \r\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\r\n    \r\n        if (!fw && this.startRegionRe.test(line))\r\n            return \"start\"; // lineCommentRegionStart\r\n    \r\n        return fw;\r\n    };\r\n\r\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\r\n        var line = session.getLine(row);\r\n        \r\n        if (this.startRegionRe.test(line))\r\n            return this.getCommentRegionBlock(session, line, row);\r\n        \r\n        var match = line.match(this.foldingStartMarker);\r\n        if (match) {\r\n            var i = match.index;\r\n\r\n            if (match[1])\r\n                return this.openingBracketBlock(session, match[1], row, i);\r\n                \r\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\r\n            \r\n            if (range && !range.isMultiLine()) {\r\n                if (forceMultiline) {\r\n                    range = this.getSectionRange(session, row);\r\n                } else if (foldStyle != \"all\")\r\n                    range = null;\r\n            }\r\n            \r\n            return range;\r\n        }\r\n\r\n        if (foldStyle === \"markbegin\")\r\n            return;\r\n\r\n        var match = line.match(this.foldingStopMarker);\r\n        if (match) {\r\n            var i = match.index + match[0].length;\r\n\r\n            if (match[1])\r\n                return this.closingBracketBlock(session, match[1], row, i);\r\n\r\n            return session.getCommentFoldRange(row, i, -1);\r\n        }\r\n    };\r\n    \r\n    this.getSectionRange = function(session, row) {\r\n        var line = session.getLine(row);\r\n        var startIndent = line.search(/\\S/);\r\n        var startRow = row;\r\n        var startColumn = line.length;\r\n        row = row + 1;\r\n        var endRow = row;\r\n        var maxRow = session.getLength();\r\n        while (++row < maxRow) {\r\n            line = session.getLine(row);\r\n            var indent = line.search(/\\S/);\r\n            if (indent === -1)\r\n                continue;\r\n            if  (startIndent > indent)\r\n                break;\r\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\r\n            \r\n            if (subRange) {\r\n                if (subRange.start.row <= startRow) {\r\n                    break;\r\n                } else if (subRange.isMultiLine()) {\r\n                    row = subRange.end.row;\r\n                } else if (startIndent == indent) {\r\n                    break;\r\n                }\r\n            }\r\n            endRow = row;\r\n        }\r\n        \r\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\r\n    };\r\n    this.getCommentRegionBlock = function(session, line, row) {\r\n        var startColumn = line.search(/\\s*$/);\r\n        var maxRow = session.getLength();\r\n        var startRow = row;\r\n        \r\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\r\n        var depth = 1;\r\n        while (++row < maxRow) {\r\n            line = session.getLine(row);\r\n            var m = re.exec(line);\r\n            if (!m) continue;\r\n            if (m[1]) depth--;\r\n            else depth++;\r\n\r\n            if (!depth) break;\r\n        }\r\n\r\n        var endRow = row;\r\n        if (endRow > startRow) {\r\n            return new Range(startRow, startColumn, endRow, line.length);\r\n        }\r\n    };\r\n\r\n}).call(FoldMode.prototype);\r\n\r\n});\r\n\r\nace.define(\"ace/mode/fortran\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/fortran_highlight_rules\",\"ace/mode/folding/cstyle\",\"ace/range\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextMode = require(\"./text\").Mode;\r\nvar FortranHighlightRules = require(\"./fortran_highlight_rules\").FortranHighlightRules;\r\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\r\nvar Range = require(\"../range\").Range;\r\n\r\nvar Mode = function() {\r\n    this.HighlightRules = FortranHighlightRules;\r\n    this.foldingRules = new CStyleFoldMode();\r\n    this.$behaviour = this.$defaultBehaviour;\r\n};\r\noop.inherits(Mode, TextMode);\r\n\r\n(function() {\r\n\r\n    this.lineCommentStart = \"!\";\r\n\r\n    this.getNextLineIndent = function(state, line, tab) {\r\n        var indent = this.$getIndent(line);\r\n\r\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\r\n        var tokens = tokenizedLine.tokens;\r\n\r\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\r\n            return indent;\r\n        }\r\n\r\n        if (state == \"start\") {\r\n            var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\r\n            if (match) {\r\n                indent += tab;\r\n            }\r\n        }\r\n\r\n        return indent;\r\n    };\r\n\r\n    var outdents = {\r\n        \"return\": 1,\r\n        \"break\": 1,\r\n        \"continue\": 1,\r\n        \"RETURN\": 1,\r\n        \"BREAK\": 1,\r\n        \"CONTINUE\": 1\r\n    };\r\n\r\n    this.checkOutdent = function(state, line, input) {\r\n        if (input !== \"\\r\\n\" && input !== \"\\r\" && input !== \"\\n\")\r\n            return false;\r\n\r\n        var tokens = this.getTokenizer().getLineTokens(line.trim(), state).tokens;\r\n\r\n        if (!tokens)\r\n            return false;\r\n        do {\r\n            var last = tokens.pop();\r\n        } while (last && (last.type == \"comment\" || (last.type == \"text\" && last.value.match(/^\\s+$/))));\r\n\r\n        if (!last)\r\n            return false;\r\n\r\n        return (last.type == \"keyword\" && outdents[last.value]);\r\n    };\r\n\r\n    this.autoOutdent = function(state, doc, row) {\r\n\r\n        row += 1;\r\n        var indent = this.$getIndent(doc.getLine(row));\r\n        var tab = doc.getTabString();\r\n        if (indent.slice(-tab.length) == tab)\r\n            doc.remove(new Range(row, indent.length-tab.length, row, indent.length));\r\n    };\r\n\r\n    this.$id = \"ace/mode/fortran\";\r\n}).call(Mode.prototype);\r\n\r\nexports.Mode = Mode;\r\n});                (function() {\r\n                    ace.require([\"ace/mode/fortran\"], function(m) {\r\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\r\n                            module.exports = m;\r\n                        }\r\n                    });\r\n                })();\r\n            "]},"metadata":{},"sourceType":"script"}