{"ast":null,"code":"ace.define(\"ace/snippets/clojure\", [\"require\", \"exports\", \"module\"], function (require, exports, module) {\n  \"use strict\";\n\n  exports.snippetText = \"snippet comm\\n\\\r\n\t(comment\\n\\\r\n\t  ${1}\\n\\\r\n\t  )\\n\\\r\nsnippet condp\\n\\\r\n\t(condp ${1:pred} ${2:expr}\\n\\\r\n\t  ${3})\\n\\\r\nsnippet def\\n\\\r\n\t(def ${1})\\n\\\r\nsnippet defm\\n\\\r\n\t(defmethod ${1:multifn} \\\"${2:doc-string}\\\" ${3:dispatch-val} [${4:args}]\\n\\\r\n\t  ${5})\\n\\\r\nsnippet defmm\\n\\\r\n\t(defmulti ${1:name} \\\"${2:doc-string}\\\" ${3:dispatch-fn})\\n\\\r\nsnippet defma\\n\\\r\n\t(defmacro ${1:name} \\\"${2:doc-string}\\\" ${3:dispatch-fn})\\n\\\r\nsnippet defn\\n\\\r\n\t(defn ${1:name} \\\"${2:doc-string}\\\" [${3:arg-list}]\\n\\\r\n\t  ${4})\\n\\\r\nsnippet defp\\n\\\r\n\t(defprotocol ${1:name}\\n\\\r\n\t  ${2})\\n\\\r\nsnippet defr\\n\\\r\n\t(defrecord ${1:name} [${2:fields}]\\n\\\r\n\t  ${3:protocol}\\n\\\r\n\t  ${4})\\n\\\r\nsnippet deft\\n\\\r\n\t(deftest ${1:name}\\n\\\r\n\t    (is (= ${2:assertion})))\\n\\\r\n\t  ${3})\\n\\\r\nsnippet is\\n\\\r\n\t(is (= ${1} ${2}))\\n\\\r\nsnippet defty\\n\\\r\n\t(deftype ${1:Name} [${2:fields}]\\n\\\r\n\t  ${3:Protocol}\\n\\\r\n\t  ${4})\\n\\\r\nsnippet doseq\\n\\\r\n\t(doseq [${1:elem} ${2:coll}]\\n\\\r\n\t  ${3})\\n\\\r\nsnippet fn\\n\\\r\n\t(fn [${1:arg-list}] ${2})\\n\\\r\nsnippet if\\n\\\r\n\t(if ${1:test-expr}\\n\\\r\n\t  ${2:then-expr}\\n\\\r\n\t  ${3:else-expr})\\n\\\r\nsnippet if-let \\n\\\r\n\t(if-let [${1:result} ${2:test-expr}]\\n\\\r\n\t\t(${3:then-expr} $1)\\n\\\r\n\t\t(${4:else-expr}))\\n\\\r\nsnippet imp\\n\\\r\n\t(:import [${1:package}])\\n\\\r\n\t& {:keys [${1:keys}] :or {${2:defaults}}}\\n\\\r\nsnippet let\\n\\\r\n\t(let [${1:name} ${2:expr}]\\n\\\r\n\t\t${3})\\n\\\r\nsnippet letfn\\n\\\r\n\t(letfn [(${1:name) [${2:args}]\\n\\\r\n\t          ${3})])\\n\\\r\nsnippet map\\n\\\r\n\t(map ${1:func} ${2:coll})\\n\\\r\nsnippet mapl\\n\\\r\n\t(map #(${1:lambda}) ${2:coll})\\n\\\r\nsnippet met\\n\\\r\n\t(${1:name} [${2:this} ${3:args}]\\n\\\r\n\t  ${4})\\n\\\r\nsnippet ns\\n\\\r\n\t(ns ${1:name}\\n\\\r\n\t  ${2})\\n\\\r\nsnippet dotimes\\n\\\r\n\t(dotimes [_ 10]\\n\\\r\n\t  (time\\n\\\r\n\t    (dotimes [_ ${1:times}]\\n\\\r\n\t      ${2})))\\n\\\r\nsnippet pmethod\\n\\\r\n\t(${1:name} [${2:this} ${3:args}])\\n\\\r\nsnippet refer\\n\\\r\n\t(:refer-clojure :exclude [${1}])\\n\\\r\nsnippet require\\n\\\r\n\t(:require [${1:namespace} :as [${2}]])\\n\\\r\nsnippet use\\n\\\r\n\t(:use [${1:namespace} :only [${2}]])\\n\\\r\nsnippet print\\n\\\r\n\t(println ${1})\\n\\\r\nsnippet reduce\\n\\\r\n\t(reduce ${1:(fn [p n] ${3})} ${2})\\n\\\r\nsnippet when\\n\\\r\n\t(when ${1:test} ${2:body})\\n\\\r\nsnippet when-let\\n\\\r\n\t(when-let [${1:result} ${2:test}]\\n\\\r\n\t\t${3:body})\\n\\\r\n\";\n  exports.scope = \"clojure\";\n});\n\n(function () {\n  ace.require([\"ace/snippets/clojure\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["C:/Users/akash/Desktop/Project/React/SyntaxMeets/frontend/syntaxmeets/node_modules/ace-builds/src-noconflict/snippets/clojure.js"],"names":["ace","define","require","exports","module","snippetText","scope","m"],"mappings":"AAAAA,GAAG,CAACC,MAAJ,CAAW,sBAAX,EAAkC,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,CAAlC,EAAkE,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AACrG;;AAEAD,EAAAA,OAAO,CAACE,WAAR,GAAsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAtB;AA2FAF,EAAAA,OAAO,CAACG,KAAR,GAAgB,SAAhB;AAEC,CAhGD;;AAgGmB,CAAC,YAAW;AACXN,EAAAA,GAAG,CAACE,OAAJ,CAAY,CAAC,sBAAD,CAAZ,EAAsC,UAASK,CAAT,EAAY;AAC9C,QAAI,OAAOH,MAAP,IAAiB,QAAjB,IAA6B,OAAOD,OAAP,IAAkB,QAA/C,IAA2DC,MAA/D,EAAuE;AACnEA,MAAAA,MAAM,CAACD,OAAP,GAAiBI,CAAjB;AACH;AACJ,GAJD;AAKH,CANE","sourcesContent":["ace.define(\"ace/snippets/clojure\",[\"require\",\"exports\",\"module\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nexports.snippetText = \"snippet comm\\n\\\r\n\t(comment\\n\\\r\n\t  ${1}\\n\\\r\n\t  )\\n\\\r\nsnippet condp\\n\\\r\n\t(condp ${1:pred} ${2:expr}\\n\\\r\n\t  ${3})\\n\\\r\nsnippet def\\n\\\r\n\t(def ${1})\\n\\\r\nsnippet defm\\n\\\r\n\t(defmethod ${1:multifn} \\\"${2:doc-string}\\\" ${3:dispatch-val} [${4:args}]\\n\\\r\n\t  ${5})\\n\\\r\nsnippet defmm\\n\\\r\n\t(defmulti ${1:name} \\\"${2:doc-string}\\\" ${3:dispatch-fn})\\n\\\r\nsnippet defma\\n\\\r\n\t(defmacro ${1:name} \\\"${2:doc-string}\\\" ${3:dispatch-fn})\\n\\\r\nsnippet defn\\n\\\r\n\t(defn ${1:name} \\\"${2:doc-string}\\\" [${3:arg-list}]\\n\\\r\n\t  ${4})\\n\\\r\nsnippet defp\\n\\\r\n\t(defprotocol ${1:name}\\n\\\r\n\t  ${2})\\n\\\r\nsnippet defr\\n\\\r\n\t(defrecord ${1:name} [${2:fields}]\\n\\\r\n\t  ${3:protocol}\\n\\\r\n\t  ${4})\\n\\\r\nsnippet deft\\n\\\r\n\t(deftest ${1:name}\\n\\\r\n\t    (is (= ${2:assertion})))\\n\\\r\n\t  ${3})\\n\\\r\nsnippet is\\n\\\r\n\t(is (= ${1} ${2}))\\n\\\r\nsnippet defty\\n\\\r\n\t(deftype ${1:Name} [${2:fields}]\\n\\\r\n\t  ${3:Protocol}\\n\\\r\n\t  ${4})\\n\\\r\nsnippet doseq\\n\\\r\n\t(doseq [${1:elem} ${2:coll}]\\n\\\r\n\t  ${3})\\n\\\r\nsnippet fn\\n\\\r\n\t(fn [${1:arg-list}] ${2})\\n\\\r\nsnippet if\\n\\\r\n\t(if ${1:test-expr}\\n\\\r\n\t  ${2:then-expr}\\n\\\r\n\t  ${3:else-expr})\\n\\\r\nsnippet if-let \\n\\\r\n\t(if-let [${1:result} ${2:test-expr}]\\n\\\r\n\t\t(${3:then-expr} $1)\\n\\\r\n\t\t(${4:else-expr}))\\n\\\r\nsnippet imp\\n\\\r\n\t(:import [${1:package}])\\n\\\r\n\t& {:keys [${1:keys}] :or {${2:defaults}}}\\n\\\r\nsnippet let\\n\\\r\n\t(let [${1:name} ${2:expr}]\\n\\\r\n\t\t${3})\\n\\\r\nsnippet letfn\\n\\\r\n\t(letfn [(${1:name) [${2:args}]\\n\\\r\n\t          ${3})])\\n\\\r\nsnippet map\\n\\\r\n\t(map ${1:func} ${2:coll})\\n\\\r\nsnippet mapl\\n\\\r\n\t(map #(${1:lambda}) ${2:coll})\\n\\\r\nsnippet met\\n\\\r\n\t(${1:name} [${2:this} ${3:args}]\\n\\\r\n\t  ${4})\\n\\\r\nsnippet ns\\n\\\r\n\t(ns ${1:name}\\n\\\r\n\t  ${2})\\n\\\r\nsnippet dotimes\\n\\\r\n\t(dotimes [_ 10]\\n\\\r\n\t  (time\\n\\\r\n\t    (dotimes [_ ${1:times}]\\n\\\r\n\t      ${2})))\\n\\\r\nsnippet pmethod\\n\\\r\n\t(${1:name} [${2:this} ${3:args}])\\n\\\r\nsnippet refer\\n\\\r\n\t(:refer-clojure :exclude [${1}])\\n\\\r\nsnippet require\\n\\\r\n\t(:require [${1:namespace} :as [${2}]])\\n\\\r\nsnippet use\\n\\\r\n\t(:use [${1:namespace} :only [${2}]])\\n\\\r\nsnippet print\\n\\\r\n\t(println ${1})\\n\\\r\nsnippet reduce\\n\\\r\n\t(reduce ${1:(fn [p n] ${3})} ${2})\\n\\\r\nsnippet when\\n\\\r\n\t(when ${1:test} ${2:body})\\n\\\r\nsnippet when-let\\n\\\r\n\t(when-let [${1:result} ${2:test}]\\n\\\r\n\t\t${3:body})\\n\\\r\n\";\r\nexports.scope = \"clojure\";\r\n\r\n});                (function() {\r\n                    ace.require([\"ace/snippets/clojure\"], function(m) {\r\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\r\n                            module.exports = m;\r\n                        }\r\n                    });\r\n                })();\r\n            "]},"metadata":{},"sourceType":"script"}