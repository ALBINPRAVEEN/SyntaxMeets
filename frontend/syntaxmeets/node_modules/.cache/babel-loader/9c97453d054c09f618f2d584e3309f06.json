{"ast":null,"code":"ace.define(\"ace/snippets/ruby\", [\"require\", \"exports\", \"module\"], function (require, exports, module) {\n  \"use strict\";\n\n  exports.snippetText = \"########################################\\n\\\r\n# Ruby snippets - for Rails, see below #\\n\\\r\n########################################\\n\\\r\n\\n\\\r\n# encoding for Ruby 1.9\\n\\\r\nsnippet enc\\n\\\r\n\t# encoding: utf-8\\n\\\r\n\\n\\\r\n# #!/usr/bin/env ruby\\n\\\r\nsnippet #!\\n\\\r\n\t#!/usr/bin/env ruby\\n\\\r\n\t# encoding: utf-8\\n\\\r\n\\n\\\r\n# New Block\\n\\\r\nsnippet =b\\n\\\r\n\t=begin rdoc\\n\\\r\n\t\t${1}\\n\\\r\n\t=end\\n\\\r\nsnippet y\\n\\\r\n\t:yields: ${1:arguments}\\n\\\r\nsnippet rb\\n\\\r\n\t#!/usr/bin/env ruby -wKU\\n\\\r\nsnippet beg\\n\\\r\n\tbegin\\n\\\r\n\t\t${3}\\n\\\r\n\trescue ${1:Exception} => ${2:e}\\n\\\r\n\tend\\n\\\r\n\\n\\\r\nsnippet req require\\n\\\r\n\trequire \\\"${1}\\\"${2}\\n\\\r\nsnippet #\\n\\\r\n\t# =>\\n\\\r\nsnippet end\\n\\\r\n\t__END__\\n\\\r\nsnippet case\\n\\\r\n\tcase ${1:object}\\n\\\r\n\twhen ${2:condition}\\n\\\r\n\t\t${3}\\n\\\r\n\tend\\n\\\r\nsnippet when\\n\\\r\n\twhen ${1:condition}\\n\\\r\n\t\t${2}\\n\\\r\nsnippet def\\n\\\r\n\tdef ${1:method_name}\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet deft\\n\\\r\n\tdef test_${1:case_name}\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet if\\n\\\r\n\tif ${1:condition}\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet ife\\n\\\r\n\tif ${1:condition}\\n\\\r\n\t\t${2}\\n\\\r\n\telse\\n\\\r\n\t\t${3}\\n\\\r\n\tend\\n\\\r\nsnippet elsif\\n\\\r\n\telsif ${1:condition}\\n\\\r\n\t\t${2}\\n\\\r\nsnippet unless\\n\\\r\n\tunless ${1:condition}\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet while\\n\\\r\n\twhile ${1:condition}\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet for\\n\\\r\n\tfor ${1:e} in ${2:c}\\n\\\r\n\t\t${3}\\n\\\r\n\tend\\n\\\r\nsnippet until\\n\\\r\n\tuntil ${1:condition}\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet cla class .. end\\n\\\r\n\tclass ${1:`substitute(Filename(), '\\\\(_\\\\|^\\\\)\\\\(.\\\\)', '\\\\u\\\\2', 'g')`}\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet cla class .. initialize .. end\\n\\\r\n\tclass ${1:`substitute(Filename(), '\\\\(_\\\\|^\\\\)\\\\(.\\\\)', '\\\\u\\\\2', 'g')`}\\n\\\r\n\t\tdef initialize(${2:args})\\n\\\r\n\t\t\t${3}\\n\\\r\n\t\tend\\n\\\r\n\tend\\n\\\r\nsnippet cla class .. < ParentClass .. initialize .. end\\n\\\r\n\tclass ${1:`substitute(Filename(), '\\\\(_\\\\|^\\\\)\\\\(.\\\\)', '\\\\u\\\\2', 'g')`} < ${2:ParentClass}\\n\\\r\n\t\tdef initialize(${3:args})\\n\\\r\n\t\t\t${4}\\n\\\r\n\t\tend\\n\\\r\n\tend\\n\\\r\nsnippet cla ClassName = Struct .. do .. end\\n\\\r\n\t${1:`substitute(Filename(), '\\\\(_\\\\|^\\\\)\\\\(.\\\\)', '\\\\u\\\\2', 'g')`} = Struct.new(:${2:attr_names}) do\\n\\\r\n\t\tdef ${3:method_name}\\n\\\r\n\t\t\t${4}\\n\\\r\n\t\tend\\n\\\r\n\tend\\n\\\r\nsnippet cla class BlankSlate .. initialize .. end\\n\\\r\n\tclass ${1:BlankSlate}\\n\\\r\n\t\tinstance_methods.each { |meth| undef_method(meth) unless meth =~ /\\\\A__/ }\\n\\\r\n\tend\\n\\\r\nsnippet cla class << self .. end\\n\\\r\n\tclass << ${1:self}\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\n# class .. < DelegateClass .. initialize .. end\\n\\\r\nsnippet cla-\\n\\\r\n\tclass ${1:`substitute(Filename(), '\\\\(_\\\\|^\\\\)\\\\(.\\\\)', '\\\\u\\\\2', 'g')`} < DelegateClass(${2:ParentClass})\\n\\\r\n\t\tdef initialize(${3:args})\\n\\\r\n\t\t\tsuper(${4:del_obj})\\n\\\r\n\\n\\\r\n\t\t\t${5}\\n\\\r\n\t\tend\\n\\\r\n\tend\\n\\\r\nsnippet mod module .. end\\n\\\r\n\tmodule ${1:`substitute(Filename(), '\\\\(_\\\\|^\\\\)\\\\(.\\\\)', '\\\\u\\\\2', 'g')`}\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet mod module .. module_function .. end\\n\\\r\n\tmodule ${1:`substitute(Filename(), '\\\\(_\\\\|^\\\\)\\\\(.\\\\)', '\\\\u\\\\2', 'g')`}\\n\\\r\n\t\tmodule_function\\n\\\r\n\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet mod module .. ClassMethods .. end\\n\\\r\n\tmodule ${1:`substitute(Filename(), '\\\\(_\\\\|^\\\\)\\\\(.\\\\)', '\\\\u\\\\2', 'g')`}\\n\\\r\n\t\tmodule ClassMethods\\n\\\r\n\t\t\t${2}\\n\\\r\n\t\tend\\n\\\r\n\\n\\\r\n\t\tmodule InstanceMethods\\n\\\r\n\\n\\\r\n\t\tend\\n\\\r\n\\n\\\r\n\t\tdef self.included(receiver)\\n\\\r\n\t\t\treceiver.extend         ClassMethods\\n\\\r\n\t\t\treceiver.send :include, InstanceMethods\\n\\\r\n\t\tend\\n\\\r\n\tend\\n\\\r\n# attr_reader\\n\\\r\nsnippet r\\n\\\r\n\tattr_reader :${1:attr_names}\\n\\\r\n# attr_writer\\n\\\r\nsnippet w\\n\\\r\n\tattr_writer :${1:attr_names}\\n\\\r\n# attr_accessor\\n\\\r\nsnippet rw\\n\\\r\n\tattr_accessor :${1:attr_names}\\n\\\r\nsnippet atp\\n\\\r\n\tattr_protected :${1:attr_names}\\n\\\r\nsnippet ata\\n\\\r\n\tattr_accessible :${1:attr_names}\\n\\\r\n# include Enumerable\\n\\\r\nsnippet Enum\\n\\\r\n\tinclude Enumerable\\n\\\r\n\\n\\\r\n\tdef each(&block)\\n\\\r\n\t\t${1}\\n\\\r\n\tend\\n\\\r\n# include Comparable\\n\\\r\nsnippet Comp\\n\\\r\n\tinclude Comparable\\n\\\r\n\\n\\\r\n\tdef <=>(other)\\n\\\r\n\t\t${1}\\n\\\r\n\tend\\n\\\r\n# extend Forwardable\\n\\\r\nsnippet Forw-\\n\\\r\n\textend Forwardable\\n\\\r\n# def self\\n\\\r\nsnippet defs\\n\\\r\n\tdef self.${1:class_method_name}\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\n# def method_missing\\n\\\r\nsnippet defmm\\n\\\r\n\tdef method_missing(meth, *args, &blk)\\n\\\r\n\t\t${1}\\n\\\r\n\tend\\n\\\r\nsnippet defd\\n\\\r\n\tdef_delegator :${1:@del_obj}, :${2:del_meth}, :${3:new_name}\\n\\\r\nsnippet defds\\n\\\r\n\tdef_delegators :${1:@del_obj}, :${2:del_methods}\\n\\\r\nsnippet am\\n\\\r\n\talias_method :${1:new_name}, :${2:old_name}\\n\\\r\nsnippet app\\n\\\r\n\tif __FILE__ == $PROGRAM_NAME\\n\\\r\n\t\t${1}\\n\\\r\n\tend\\n\\\r\n# usage_if()\\n\\\r\nsnippet usai\\n\\\r\n\tif ARGV.${1}\\n\\\r\n\t\tabort \\\"Usage: #{$PROGRAM_NAME} ${2:ARGS_GO_HERE}\\\"${3}\\n\\\r\n\tend\\n\\\r\n# usage_unless()\\n\\\r\nsnippet usau\\n\\\r\n\tunless ARGV.${1}\\n\\\r\n\t\tabort \\\"Usage: #{$PROGRAM_NAME} ${2:ARGS_GO_HERE}\\\"${3}\\n\\\r\n\tend\\n\\\r\nsnippet array\\n\\\r\n\tArray.new(${1:10}) { |${2:i}| ${3} }\\n\\\r\nsnippet hash\\n\\\r\n\tHash.new { |${1:hash}, ${2:key}| $1[$2] = ${3} }\\n\\\r\nsnippet file File.foreach() { |line| .. }\\n\\\r\n\tFile.foreach(${1:\\\"path/to/file\\\"}) { |${2:line}| ${3} }\\n\\\r\nsnippet file File.read()\\n\\\r\n\tFile.read(${1:\\\"path/to/file\\\"})${2}\\n\\\r\nsnippet Dir Dir.global() { |file| .. }\\n\\\r\n\tDir.glob(${1:\\\"dir/glob/*\\\"}) { |${2:file}| ${3} }\\n\\\r\nsnippet Dir Dir[\\\"..\\\"]\\n\\\r\n\tDir[${1:\\\"glob/**/*.rb\\\"}]${2}\\n\\\r\nsnippet dir\\n\\\r\n\tFilename.dirname(__FILE__)\\n\\\r\nsnippet deli\\n\\\r\n\tdelete_if { |${1:e}| ${2} }\\n\\\r\nsnippet fil\\n\\\r\n\tfill(${1:range}) { |${2:i}| ${3} }\\n\\\r\n# flatten_once()\\n\\\r\nsnippet flao\\n\\\r\n\tinject(Array.new) { |${1:arr}, ${2:a}| $1.push(*$2)}${3}\\n\\\r\nsnippet zip\\n\\\r\n\tzip(${1:enums}) { |${2:row}| ${3} }\\n\\\r\n# downto(0) { |n| .. }\\n\\\r\nsnippet dow\\n\\\r\n\tdownto(${1:0}) { |${2:n}| ${3} }\\n\\\r\nsnippet ste\\n\\\r\n\tstep(${1:2}) { |${2:n}| ${3} }\\n\\\r\nsnippet tim\\n\\\r\n\ttimes { |${1:n}| ${2} }\\n\\\r\nsnippet upt\\n\\\r\n\tupto(${1:1.0/0.0}) { |${2:n}| ${3} }\\n\\\r\nsnippet loo\\n\\\r\n\tloop { ${1} }\\n\\\r\nsnippet ea\\n\\\r\n\teach { |${1:e}| ${2} }\\n\\\r\nsnippet ead\\n\\\r\n\teach do |${1:e}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet eab\\n\\\r\n\teach_byte { |${1:byte}| ${2} }\\n\\\r\nsnippet eac- each_char { |chr| .. }\\n\\\r\n\teach_char { |${1:chr}| ${2} }\\n\\\r\nsnippet eac- each_cons(..) { |group| .. }\\n\\\r\n\teach_cons(${1:2}) { |${2:group}| ${3} }\\n\\\r\nsnippet eai\\n\\\r\n\teach_index { |${1:i}| ${2} }\\n\\\r\nsnippet eaid\\n\\\r\n\teach_index do |${1:i}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet eak\\n\\\r\n\teach_key { |${1:key}| ${2} }\\n\\\r\nsnippet eakd\\n\\\r\n\teach_key do |${1:key}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet eal\\n\\\r\n\teach_line { |${1:line}| ${2} }\\n\\\r\nsnippet eald\\n\\\r\n\teach_line do |${1:line}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet eap\\n\\\r\n\teach_pair { |${1:name}, ${2:val}| ${3} }\\n\\\r\nsnippet eapd\\n\\\r\n\teach_pair do |${1:name}, ${2:val}|\\n\\\r\n\t\t${3}\\n\\\r\n\tend\\n\\\r\nsnippet eas-\\n\\\r\n\teach_slice(${1:2}) { |${2:group}| ${3} }\\n\\\r\nsnippet easd-\\n\\\r\n\teach_slice(${1:2}) do |${2:group}|\\n\\\r\n\t\t${3}\\n\\\r\n\tend\\n\\\r\nsnippet eav\\n\\\r\n\teach_value { |${1:val}| ${2} }\\n\\\r\nsnippet eavd\\n\\\r\n\teach_value do |${1:val}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet eawi\\n\\\r\n\teach_with_index { |${1:e}, ${2:i}| ${3} }\\n\\\r\nsnippet eawid\\n\\\r\n\teach_with_index do |${1:e},${2:i}|\\n\\\r\n\t\t${3}\\n\\\r\n\tend\\n\\\r\nsnippet reve\\n\\\r\n\treverse_each { |${1:e}| ${2} }\\n\\\r\nsnippet reved\\n\\\r\n\treverse_each do |${1:e}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet inj\\n\\\r\n\tinject(${1:init}) { |${2:mem}, ${3:var}| ${4} }\\n\\\r\nsnippet injd\\n\\\r\n\tinject(${1:init}) do |${2:mem}, ${3:var}|\\n\\\r\n\t\t${4}\\n\\\r\n\tend\\n\\\r\nsnippet map\\n\\\r\n\tmap { |${1:e}| ${2} }\\n\\\r\nsnippet mapd\\n\\\r\n\tmap do |${1:e}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet mapwi-\\n\\\r\n\tenum_with_index.map { |${1:e}, ${2:i}| ${3} }\\n\\\r\nsnippet sor\\n\\\r\n\tsort { |a, b| ${1} }\\n\\\r\nsnippet sorb\\n\\\r\n\tsort_by { |${1:e}| ${2} }\\n\\\r\nsnippet ran\\n\\\r\n\tsort_by { rand }\\n\\\r\nsnippet all\\n\\\r\n\tall? { |${1:e}| ${2} }\\n\\\r\nsnippet any\\n\\\r\n\tany? { |${1:e}| ${2} }\\n\\\r\nsnippet cl\\n\\\r\n\tclassify { |${1:e}| ${2} }\\n\\\r\nsnippet col\\n\\\r\n\tcollect { |${1:e}| ${2} }\\n\\\r\nsnippet cold\\n\\\r\n\tcollect do |${1:e}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet det\\n\\\r\n\tdetect { |${1:e}| ${2} }\\n\\\r\nsnippet detd\\n\\\r\n\tdetect do |${1:e}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet fet\\n\\\r\n\tfetch(${1:name}) { |${2:key}| ${3} }\\n\\\r\nsnippet fin\\n\\\r\n\tfind { |${1:e}| ${2} }\\n\\\r\nsnippet find\\n\\\r\n\tfind do |${1:e}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet fina\\n\\\r\n\tfind_all { |${1:e}| ${2} }\\n\\\r\nsnippet finad\\n\\\r\n\tfind_all do |${1:e}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet gre\\n\\\r\n\tgrep(${1:/pattern/}) { |${2:match}| ${3} }\\n\\\r\nsnippet sub\\n\\\r\n\t${1:g}sub(${2:/pattern/}) { |${3:match}| ${4} }\\n\\\r\nsnippet sca\\n\\\r\n\tscan(${1:/pattern/}) { |${2:match}| ${3} }\\n\\\r\nsnippet scad\\n\\\r\n\tscan(${1:/pattern/}) do |${2:match}|\\n\\\r\n\t\t${3}\\n\\\r\n\tend\\n\\\r\nsnippet max\\n\\\r\n\tmax { |a, b| ${1} }\\n\\\r\nsnippet min\\n\\\r\n\tmin { |a, b| ${1} }\\n\\\r\nsnippet par\\n\\\r\n\tpartition { |${1:e}| ${2} }\\n\\\r\nsnippet pard\\n\\\r\n\tpartition do |${1:e}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet rej\\n\\\r\n\treject { |${1:e}| ${2} }\\n\\\r\nsnippet rejd\\n\\\r\n\treject do |${1:e}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet sel\\n\\\r\n\tselect { |${1:e}| ${2} }\\n\\\r\nsnippet seld\\n\\\r\n\tselect do |${1:e}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet lam\\n\\\r\n\tlambda { |${1:args}| ${2} }\\n\\\r\nsnippet doo\\n\\\r\n\tdo\\n\\\r\n\t\t${1}\\n\\\r\n\tend\\n\\\r\nsnippet dov\\n\\\r\n\tdo |${1:variable}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet :\\n\\\r\n\t:${1:key} => ${2:\\\"value\\\"}${3}\\n\\\r\nsnippet ope\\n\\\r\n\topen(${1:\\\"path/or/url/or/pipe\\\"}, \\\"${2:w}\\\") { |${3:io}| ${4} }\\n\\\r\n# path_from_here()\\n\\\r\nsnippet fpath\\n\\\r\n\tFile.join(File.dirname(__FILE__), *%2[${1:rel path here}])${2}\\n\\\r\n# unix_filter {}\\n\\\r\nsnippet unif\\n\\\r\n\tARGF.each_line${1} do |${2:line}|\\n\\\r\n\t\t${3}\\n\\\r\n\tend\\n\\\r\n# option_parse {}\\n\\\r\nsnippet optp\\n\\\r\n\trequire \\\"optparse\\\"\\n\\\r\n\\n\\\r\n\toptions = {${1:default => \\\"args\\\"}}\\n\\\r\n\\n\\\r\n\tARGV.options do |opts|\\n\\\r\n\t\topts.banner = \\\"Usage: #{File.basename($PROGRAM_NAME)}\\n\\\r\nsnippet opt\\n\\\r\n\topts.on( \\\"-${1:o}\\\", \\\"--${2:long-option-name}\\\", ${3:String},\\n\\\r\n\t         \\\"${4:Option description.}\\\") do |${5:opt}|\\n\\\r\n\t\t${6}\\n\\\r\n\tend\\n\\\r\nsnippet tc\\n\\\r\n\trequire \\\"test/unit\\\"\\n\\\r\n\\n\\\r\n\trequire \\\"${1:library_file_name}\\\"\\n\\\r\n\\n\\\r\n\tclass Test${2:$1} < Test::Unit::TestCase\\n\\\r\n\t\tdef test_${3:case_name}\\n\\\r\n\t\t\t${4}\\n\\\r\n\t\tend\\n\\\r\n\tend\\n\\\r\nsnippet ts\\n\\\r\n\trequire \\\"test/unit\\\"\\n\\\r\n\\n\\\r\n\trequire \\\"tc_${1:test_case_file}\\\"\\n\\\r\n\trequire \\\"tc_${2:test_case_file}\\\"${3}\\n\\\r\nsnippet as\\n\\\r\n\tassert ${1:test}, \\\"${2:Failure message.}\\\"${3}\\n\\\r\nsnippet ase\\n\\\r\n\tassert_equal ${1:expected}, ${2:actual}${3}\\n\\\r\nsnippet asne\\n\\\r\n\tassert_not_equal ${1:unexpected}, ${2:actual}${3}\\n\\\r\nsnippet asid\\n\\\r\n\tassert_in_delta ${1:expected_float}, ${2:actual_float}, ${3:2 ** -20}${4}\\n\\\r\nsnippet asio\\n\\\r\n\tassert_instance_of ${1:ExpectedClass}, ${2:actual_instance}${3}\\n\\\r\nsnippet asko\\n\\\r\n\tassert_kind_of ${1:ExpectedKind}, ${2:actual_instance}${3}\\n\\\r\nsnippet asn\\n\\\r\n\tassert_nil ${1:instance}${2}\\n\\\r\nsnippet asnn\\n\\\r\n\tassert_not_nil ${1:instance}${2}\\n\\\r\nsnippet asm\\n\\\r\n\tassert_match /${1:expected_pattern}/, ${2:actual_string}${3}\\n\\\r\nsnippet asnm\\n\\\r\n\tassert_no_match /${1:unexpected_pattern}/, ${2:actual_string}${3}\\n\\\r\nsnippet aso\\n\\\r\n\tassert_operator ${1:left}, :${2:operator}, ${3:right}${4}\\n\\\r\nsnippet asr\\n\\\r\n\tassert_raise ${1:Exception} { ${2} }\\n\\\r\nsnippet asrd\\n\\\r\n\tassert_raise ${1:Exception} do\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet asnr\\n\\\r\n\tassert_nothing_raised ${1:Exception} { ${2} }\\n\\\r\nsnippet asnrd\\n\\\r\n\tassert_nothing_raised ${1:Exception} do\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet asrt\\n\\\r\n\tassert_respond_to ${1:object}, :${2:method}${3}\\n\\\r\nsnippet ass assert_same(..)\\n\\\r\n\tassert_same ${1:expected}, ${2:actual}${3}\\n\\\r\nsnippet ass assert_send(..)\\n\\\r\n\tassert_send [${1:object}, :${2:message}, ${3:args}]${4}\\n\\\r\nsnippet asns\\n\\\r\n\tassert_not_same ${1:unexpected}, ${2:actual}${3}\\n\\\r\nsnippet ast\\n\\\r\n\tassert_throws :${1:expected} { ${2} }\\n\\\r\nsnippet astd\\n\\\r\n\tassert_throws :${1:expected} do\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet asnt\\n\\\r\n\tassert_nothing_thrown { ${1} }\\n\\\r\nsnippet asntd\\n\\\r\n\tassert_nothing_thrown do\\n\\\r\n\t\t${1}\\n\\\r\n\tend\\n\\\r\nsnippet fl\\n\\\r\n\tflunk \\\"${1:Failure message.}\\\"${2}\\n\\\r\n# Benchmark.bmbm do .. end\\n\\\r\nsnippet bm-\\n\\\r\n\tTESTS = ${1:10_000}\\n\\\r\n\tBenchmark.bmbm do |results|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet rep\\n\\\r\n\tresults.report(\\\"${1:name}:\\\") { TESTS.times { ${2} }}\\n\\\r\n# Marshal.dump(.., file)\\n\\\r\nsnippet Md\\n\\\r\n\tFile.open(${1:\\\"path/to/file.dump\\\"}, \\\"wb\\\") { |${2:file}| Marshal.dump(${3:obj}, $2) }${4}\\n\\\r\n# Mashal.load(obj)\\n\\\r\nsnippet Ml\\n\\\r\n\tFile.open(${1:\\\"path/to/file.dump\\\"}, \\\"rb\\\") { |${2:file}| Marshal.load($2) }${3}\\n\\\r\n# deep_copy(..)\\n\\\r\nsnippet deec\\n\\\r\n\tMarshal.load(Marshal.dump(${1:obj_to_copy}))${2}\\n\\\r\nsnippet Pn-\\n\\\r\n\tPStore.new(${1:\\\"file_name.pstore\\\"})${2}\\n\\\r\nsnippet tra\\n\\\r\n\ttransaction(${1:true}) { ${2} }\\n\\\r\n# xmlread(..)\\n\\\r\nsnippet xml-\\n\\\r\n\tREXML::Document.new(File.read(${1:\\\"path/to/file\\\"}))${2}\\n\\\r\n# xpath(..) { .. }\\n\\\r\nsnippet xpa\\n\\\r\n\telements.each(${1:\\\"//Xpath\\\"}) do |${2:node}|\\n\\\r\n\t\t${3}\\n\\\r\n\tend\\n\\\r\n# class_from_name()\\n\\\r\nsnippet clafn\\n\\\r\n\tsplit(\\\"::\\\").inject(Object) { |par, const| par.const_get(const) }\\n\\\r\n# singleton_class()\\n\\\r\nsnippet sinc\\n\\\r\n\tclass << self; self end\\n\\\r\nsnippet nam\\n\\\r\n\tnamespace :${1:`Filename()`} do\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet tas\\n\\\r\n\tdesc \\\"${1:Task description}\\\"\\n\\\r\n\ttask :${2:task_name => [:dependent, :tasks]} do\\n\\\r\n\t\t${3}\\n\\\r\n\tend\\n\\\r\n# block\\n\\\r\nsnippet b\\n\\\r\n\t{ |${1:var}| ${2} }\\n\\\r\nsnippet begin\\n\\\r\n\tbegin\\n\\\r\n\t\traise 'A test exception.'\\n\\\r\n\trescue Exception => e\\n\\\r\n\t\tputs e.message\\n\\\r\n\t\tputs e.backtrace.inspect\\n\\\r\n\telse\\n\\\r\n\t\t# other exception\\n\\\r\n\tensure\\n\\\r\n\t\t# always executed\\n\\\r\n\tend\\n\\\r\n\\n\\\r\n#debugging\\n\\\r\nsnippet debug\\n\\\r\n\trequire 'ruby-debug'; debugger; true;\\n\\\r\nsnippet pry\\n\\\r\n\trequire 'pry'; binding.pry\\n\\\r\n\\n\\\r\n#############################################\\n\\\r\n# Rails snippets - for pure Ruby, see above #\\n\\\r\n#############################################\\n\\\r\nsnippet art\\n\\\r\n\tassert_redirected_to ${1::action => \\\"${2:index}\\\"}\\n\\\r\nsnippet artnp\\n\\\r\n\tassert_redirected_to ${1:parent}_${2:child}_path(${3:@$1}, ${4:@$2})\\n\\\r\nsnippet artnpp\\n\\\r\n\tassert_redirected_to ${1:parent}_${2:child}_path(${3:@$1})\\n\\\r\nsnippet artp\\n\\\r\n\tassert_redirected_to ${1:model}_path(${2:@$1})\\n\\\r\nsnippet artpp\\n\\\r\n\tassert_redirected_to ${1:model}s_path\\n\\\r\nsnippet asd\\n\\\r\n\tassert_difference \\\"${1:Model}.${2:count}\\\", $1 do\\n\\\r\n\t\t${3}\\n\\\r\n\tend\\n\\\r\nsnippet asnd\\n\\\r\n\tassert_no_difference \\\"${1:Model}.${2:count}\\\" do\\n\\\r\n\t\t${3}\\n\\\r\n\tend\\n\\\r\nsnippet asre\\n\\\r\n\tassert_response :${1:success}, @response.body${2}\\n\\\r\nsnippet asrj\\n\\\r\n\tassert_rjs :${1:replace}, \\\"${2:dom id}\\\"\\n\\\r\nsnippet ass assert_select(..)\\n\\\r\n\tassert_select '${1:path}', :${2:text} => '${3:inner_html' ${4:do}\\n\\\r\nsnippet bf\\n\\\r\n\tbefore_filter :${1:method}\\n\\\r\nsnippet bt\\n\\\r\n\tbelongs_to :${1:association}\\n\\\r\nsnippet crw\\n\\\r\n\tcattr_accessor :${1:attr_names}\\n\\\r\nsnippet defcreate\\n\\\r\n\tdef create\\n\\\r\n\t\t@${1:model_class_name} = ${2:ModelClassName}.new(params[:$1])\\n\\\r\n\\n\\\r\n\t\trespond_to do |wants|\\n\\\r\n\t\t\tif @$1.save\\n\\\r\n\t\t\t\tflash[:notice] = '$2 was successfully created.'\\n\\\r\n\t\t\t\twants.html { redirect_to(@$1) }\\n\\\r\n\t\t\t\twants.xml  { render :xml => @$1, :status => :created, :location => @$1 }\\n\\\r\n\t\t\telse\\n\\\r\n\t\t\t\twants.html { render :action => \\\"new\\\" }\\n\\\r\n\t\t\t\twants.xml  { render :xml => @$1.errors, :status => :unprocessable_entity }\\n\\\r\n\t\t\tend\\n\\\r\n\t\tend\\n\\\r\n\tend${3}\\n\\\r\nsnippet defdestroy\\n\\\r\n\tdef destroy\\n\\\r\n\t\t@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])\\n\\\r\n\t\t@$1.destroy\\n\\\r\n\\n\\\r\n\t\trespond_to do |wants|\\n\\\r\n\t\t\twants.html { redirect_to($1s_url) }\\n\\\r\n\t\t\twants.xml  { head :ok }\\n\\\r\n\t\tend\\n\\\r\n\tend${3}\\n\\\r\nsnippet defedit\\n\\\r\n\tdef edit\\n\\\r\n\t\t@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])\\n\\\r\n\tend\\n\\\r\nsnippet defindex\\n\\\r\n\tdef index\\n\\\r\n\t\t@${1:model_class_name} = ${2:ModelClassName}.all\\n\\\r\n\\n\\\r\n\t\trespond_to do |wants|\\n\\\r\n\t\t\twants.html # index.html.erb\\n\\\r\n\t\t\twants.xml  { render :xml => @$1s }\\n\\\r\n\t\tend\\n\\\r\n\tend${3}\\n\\\r\nsnippet defnew\\n\\\r\n\tdef new\\n\\\r\n\t\t@${1:model_class_name} = ${2:ModelClassName}.new\\n\\\r\n\\n\\\r\n\t\trespond_to do |wants|\\n\\\r\n\t\t\twants.html # new.html.erb\\n\\\r\n\t\t\twants.xml  { render :xml => @$1 }\\n\\\r\n\t\tend\\n\\\r\n\tend${3}\\n\\\r\nsnippet defshow\\n\\\r\n\tdef show\\n\\\r\n\t\t@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])\\n\\\r\n\\n\\\r\n\t\trespond_to do |wants|\\n\\\r\n\t\t\twants.html # show.html.erb\\n\\\r\n\t\t\twants.xml  { render :xml => @$1 }\\n\\\r\n\t\tend\\n\\\r\n\tend${3}\\n\\\r\nsnippet defupdate\\n\\\r\n\tdef update\\n\\\r\n\t\t@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])\\n\\\r\n\\n\\\r\n\t\trespond_to do |wants|\\n\\\r\n\t\t\tif @$1.update_attributes(params[:$1])\\n\\\r\n\t\t\t\tflash[:notice] = '$2 was successfully updated.'\\n\\\r\n\t\t\t\twants.html { redirect_to(@$1) }\\n\\\r\n\t\t\t\twants.xml  { head :ok }\\n\\\r\n\t\t\telse\\n\\\r\n\t\t\t\twants.html { render :action => \\\"edit\\\" }\\n\\\r\n\t\t\t\twants.xml  { render :xml => @$1.errors, :status => :unprocessable_entity }\\n\\\r\n\t\t\tend\\n\\\r\n\t\tend\\n\\\r\n\tend${3}\\n\\\r\nsnippet flash\\n\\\r\n\tflash[:${1:notice}] = \\\"${2}\\\"\\n\\\r\nsnippet habtm\\n\\\r\n\thas_and_belongs_to_many :${1:object}, :join_table => \\\"${2:table_name}\\\", :foreign_key => \\\"${3}_id\\\"${4}\\n\\\r\nsnippet hm\\n\\\r\n\thas_many :${1:object}\\n\\\r\nsnippet hmd\\n\\\r\n\thas_many :${1:other}s, :class_name => \\\"${2:$1}\\\", :foreign_key => \\\"${3:$1}_id\\\", :dependent => :destroy${4}\\n\\\r\nsnippet hmt\\n\\\r\n\thas_many :${1:object}, :through => :${2:object}\\n\\\r\nsnippet ho\\n\\\r\n\thas_one :${1:object}\\n\\\r\nsnippet i18\\n\\\r\n\tI18n.t('${1:type.key}')${2}\\n\\\r\nsnippet ist\\n\\\r\n\t<%= image_submit_tag(\\\"${1:agree.png}\\\", :id => \\\"${2:id}\\\"${3} %>\\n\\\r\nsnippet log\\n\\\r\n\tRails.logger.${1:debug} ${2}\\n\\\r\nsnippet log2\\n\\\r\n\tRAILS_DEFAULT_LOGGER.${1:debug} ${2}\\n\\\r\nsnippet logd\\n\\\r\n\tlogger.debug { \\\"${1:message}\\\" }${2}\\n\\\r\nsnippet loge\\n\\\r\n\tlogger.error { \\\"${1:message}\\\" }${2}\\n\\\r\nsnippet logf\\n\\\r\n\tlogger.fatal { \\\"${1:message}\\\" }${2}\\n\\\r\nsnippet logi\\n\\\r\n\tlogger.info { \\\"${1:message}\\\" }${2}\\n\\\r\nsnippet logw\\n\\\r\n\tlogger.warn { \\\"${1:message}\\\" }${2}\\n\\\r\nsnippet mapc\\n\\\r\n\t${1:map}.${2:connect} '${3:controller/:action/:id}'\\n\\\r\nsnippet mapca\\n\\\r\n\t${1:map}.catch_all \\\"*${2:anything}\\\", :controller => \\\"${3:default}\\\", :action => \\\"${4:error}\\\"${5}\\n\\\r\nsnippet mapr\\n\\\r\n\t${1:map}.resource :${2:resource}\\n\\\r\nsnippet maprs\\n\\\r\n\t${1:map}.resources :${2:resource}\\n\\\r\nsnippet mapwo\\n\\\r\n\t${1:map}.with_options :${2:controller} => '${3:thing}' do |$3|\\n\\\r\n\t\t${4}\\n\\\r\n\tend\\n\\\r\nsnippet mbs\\n\\\r\n\tbefore_save :${1:method}\\n\\\r\nsnippet mcht\\n\\\r\n\tchange_table :${1:table_name} do |t|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet mp\\n\\\r\n\tmap(&:${1:id})\\n\\\r\nsnippet mrw\\n\\\r\n\tmattr_accessor :${1:attr_names}\\n\\\r\nsnippet oa\\n\\\r\n\torder(\\\"${1:field}\\\")\\n\\\r\nsnippet od\\n\\\r\n\torder(\\\"${1:field} DESC\\\")\\n\\\r\nsnippet pa\\n\\\r\n\tparams[:${1:id}]${2}\\n\\\r\nsnippet ra\\n\\\r\n\trender :action => \\\"${1:action}\\\"\\n\\\r\nsnippet ral\\n\\\r\n\trender :action => \\\"${1:action}\\\", :layout => \\\"${2:layoutname}\\\"\\n\\\r\nsnippet rest\\n\\\r\n\trespond_to do |wants|\\n\\\r\n\t\twants.${1:html} { ${2} }\\n\\\r\n\tend\\n\\\r\nsnippet rf\\n\\\r\n\trender :file => \\\"${1:filepath}\\\"\\n\\\r\nsnippet rfu\\n\\\r\n\trender :file => \\\"${1:filepath}\\\", :use_full_path => ${2:false}\\n\\\r\nsnippet ri\\n\\\r\n\trender :inline => \\\"${1:<%= 'hello' %>}\\\"\\n\\\r\nsnippet ril\\n\\\r\n\trender :inline => \\\"${1:<%= 'hello' %>}\\\", :locals => { ${2::name} => \\\"${3:value}\\\"${4} }\\n\\\r\nsnippet rit\\n\\\r\n\trender :inline => \\\"${1:<%= 'hello' %>}\\\", :type => ${2::rxml}\\n\\\r\nsnippet rjson\\n\\\r\n\trender :json => ${1:text to render}\\n\\\r\nsnippet rl\\n\\\r\n\trender :layout => \\\"${1:layoutname}\\\"\\n\\\r\nsnippet rn\\n\\\r\n\trender :nothing => ${1:true}\\n\\\r\nsnippet rns\\n\\\r\n\trender :nothing => ${1:true}, :status => ${2:401}\\n\\\r\nsnippet rp\\n\\\r\n\trender :partial => \\\"${1:item}\\\"\\n\\\r\nsnippet rpc\\n\\\r\n\trender :partial => \\\"${1:item}\\\", :collection => ${2:@$1s}\\n\\\r\nsnippet rpl\\n\\\r\n\trender :partial => \\\"${1:item}\\\", :locals => { :${2:$1} => ${3:@$1}\\n\\\r\nsnippet rpo\\n\\\r\n\trender :partial => \\\"${1:item}\\\", :object => ${2:@$1}\\n\\\r\nsnippet rps\\n\\\r\n\trender :partial => \\\"${1:item}\\\", :status => ${2:500}\\n\\\r\nsnippet rt\\n\\\r\n\trender :text => \\\"${1:text to render}\\\"\\n\\\r\nsnippet rtl\\n\\\r\n\trender :text => \\\"${1:text to render}\\\", :layout => \\\"${2:layoutname}\\\"\\n\\\r\nsnippet rtlt\\n\\\r\n\trender :text => \\\"${1:text to render}\\\", :layout => ${2:true}\\n\\\r\nsnippet rts\\n\\\r\n\trender :text => \\\"${1:text to render}\\\", :status => ${2:401}\\n\\\r\nsnippet ru\\n\\\r\n\trender :update do |${1:page}|\\n\\\r\n\t\t$1.${2}\\n\\\r\n\tend\\n\\\r\nsnippet rxml\\n\\\r\n\trender :xml => ${1:text to render}\\n\\\r\nsnippet sc\\n\\\r\n\tscope :${1:name}, :where(:@${2:field} => ${3:value})\\n\\\r\nsnippet sl\\n\\\r\n\tscope :${1:name}, lambda do |${2:value}|\\n\\\r\n\t\twhere(\\\"${3:field = ?}\\\", ${4:bind var})\\n\\\r\n\tend\\n\\\r\nsnippet sha1\\n\\\r\n\tDigest::SHA1.hexdigest(${1:string})\\n\\\r\nsnippet sweeper\\n\\\r\n\tclass ${1:ModelClassName}Sweeper < ActionController::Caching::Sweeper\\n\\\r\n\t\tobserve $1\\n\\\r\n\\n\\\r\n\t\tdef after_save(${2:model_class_name})\\n\\\r\n\t\t\texpire_cache($2)\\n\\\r\n\t\tend\\n\\\r\n\\n\\\r\n\t\tdef after_destroy($2)\\n\\\r\n\t\t\texpire_cache($2)\\n\\\r\n\t\tend\\n\\\r\n\\n\\\r\n\t\tdef expire_cache($2)\\n\\\r\n\t\t\texpire_page\\n\\\r\n\t\tend\\n\\\r\n\tend\\n\\\r\nsnippet tcb\\n\\\r\n\tt.boolean :${1:title}\\n\\\r\n\t${2}\\n\\\r\nsnippet tcbi\\n\\\r\n\tt.binary :${1:title}, :limit => ${2:2}.megabytes\\n\\\r\n\t${3}\\n\\\r\nsnippet tcd\\n\\\r\n\tt.decimal :${1:title}, :precision => ${2:10}, :scale => ${3:2}\\n\\\r\n\t${4}\\n\\\r\nsnippet tcda\\n\\\r\n\tt.date :${1:title}\\n\\\r\n\t${2}\\n\\\r\nsnippet tcdt\\n\\\r\n\tt.datetime :${1:title}\\n\\\r\n\t${2}\\n\\\r\nsnippet tcf\\n\\\r\n\tt.float :${1:title}\\n\\\r\n\t${2}\\n\\\r\nsnippet tch\\n\\\r\n\tt.change :${1:name}, :${2:string}, :${3:limit} => ${4:80}\\n\\\r\n\t${5}\\n\\\r\nsnippet tci\\n\\\r\n\tt.integer :${1:title}\\n\\\r\n\t${2}\\n\\\r\nsnippet tcl\\n\\\r\n\tt.integer :lock_version, :null => false, :default => 0\\n\\\r\n\t${1}\\n\\\r\nsnippet tcr\\n\\\r\n\tt.references :${1:taggable}, :polymorphic => { :default => '${2:Photo}' }\\n\\\r\n\t${3}\\n\\\r\nsnippet tcs\\n\\\r\n\tt.string :${1:title}\\n\\\r\n\t${2}\\n\\\r\nsnippet tct\\n\\\r\n\tt.text :${1:title}\\n\\\r\n\t${2}\\n\\\r\nsnippet tcti\\n\\\r\n\tt.time :${1:title}\\n\\\r\n\t${2}\\n\\\r\nsnippet tcts\\n\\\r\n\tt.timestamp :${1:title}\\n\\\r\n\t${2}\\n\\\r\nsnippet tctss\\n\\\r\n\tt.timestamps\\n\\\r\n\t${1}\\n\\\r\nsnippet va\\n\\\r\n\tvalidates_associated :${1:attribute}\\n\\\r\nsnippet vao\\n\\\r\n\tvalidates_acceptance_of :${1:terms}\\n\\\r\nsnippet vc\\n\\\r\n\tvalidates_confirmation_of :${1:attribute}\\n\\\r\nsnippet ve\\n\\\r\n\tvalidates_exclusion_of :${1:attribute}, :in => ${2:%w( mov avi )}\\n\\\r\nsnippet vf\\n\\\r\n\tvalidates_format_of :${1:attribute}, :with => /${2:regex}/\\n\\\r\nsnippet vi\\n\\\r\n\tvalidates_inclusion_of :${1:attribute}, :in => %w(${2: mov avi })\\n\\\r\nsnippet vl\\n\\\r\n\tvalidates_length_of :${1:attribute}, :within => ${2:3}..${3:20}\\n\\\r\nsnippet vn\\n\\\r\n\tvalidates_numericality_of :${1:attribute}\\n\\\r\nsnippet vpo\\n\\\r\n\tvalidates_presence_of :${1:attribute}\\n\\\r\nsnippet vu\\n\\\r\n\tvalidates_uniqueness_of :${1:attribute}\\n\\\r\nsnippet wants\\n\\\r\n\twants.${1:js|xml|html} { ${2} }\\n\\\r\nsnippet wc\\n\\\r\n\twhere(${1:\\\"conditions\\\"}${2:, bind_var})\\n\\\r\nsnippet wh\\n\\\r\n\twhere(${1:field} => ${2:value})\\n\\\r\nsnippet xdelete\\n\\\r\n\txhr :delete, :${1:destroy}, :id => ${2:1}${3}\\n\\\r\nsnippet xget\\n\\\r\n\txhr :get, :${1:show}, :id => ${2:1}${3}\\n\\\r\nsnippet xpost\\n\\\r\n\txhr :post, :${1:create}, :${2:object} => { ${3} }\\n\\\r\nsnippet xput\\n\\\r\n\txhr :put, :${1:update}, :id => ${2:1}, :${3:object} => { ${4} }${5}\\n\\\r\nsnippet test\\n\\\r\n\ttest \\\"should ${1:do something}\\\" do\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\n#migrations\\n\\\r\nsnippet mac\\n\\\r\n\tadd_column :${1:table_name}, :${2:column_name}, :${3:data_type}\\n\\\r\nsnippet mrc\\n\\\r\n\tremove_column :${1:table_name}, :${2:column_name}\\n\\\r\nsnippet mrnc\\n\\\r\n\trename_column :${1:table_name}, :${2:old_column_name}, :${3:new_column_name}\\n\\\r\nsnippet mcc\\n\\\r\n\tchange_column :${1:table}, :${2:column}, :${3:type}\\n\\\r\nsnippet mccc\\n\\\r\n\tt.column :${1:title}, :${2:string}\\n\\\r\nsnippet mct\\n\\\r\n\tcreate_table :${1:table_name} do |t|\\n\\\r\n\t\tt.column :${2:name}, :${3:type}\\n\\\r\n\tend\\n\\\r\nsnippet migration\\n\\\r\n\tclass ${1:class_name} < ActiveRecord::Migration\\n\\\r\n\t\tdef self.up\\n\\\r\n\t\t\t${2}\\n\\\r\n\t\tend\\n\\\r\n\\n\\\r\n\t\tdef self.down\\n\\\r\n\t\tend\\n\\\r\n\tend\\n\\\r\n\\n\\\r\nsnippet trc\\n\\\r\n\tt.remove :${1:column}\\n\\\r\nsnippet tre\\n\\\r\n\tt.rename :${1:old_column_name}, :${2:new_column_name}\\n\\\r\n\t${3}\\n\\\r\nsnippet tref\\n\\\r\n\tt.references :${1:model}\\n\\\r\n\\n\\\r\n#rspec\\n\\\r\nsnippet it\\n\\\r\n\tit \\\"${1:spec_name}\\\" do\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet itp\\n\\\r\n\tit \\\"${1:spec_name}\\\"\\n\\\r\n\t${2}\\n\\\r\nsnippet desc\\n\\\r\n\tdescribe ${1:class_name} do\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet cont\\n\\\r\n\tcontext \\\"${1:message}\\\" do\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet bef\\n\\\r\n\tbefore :${1:each} do\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet aft\\n\\\r\n\tafter :${1:each} do\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\n\";\n  exports.scope = \"ruby\";\n});\n\n(function () {\n  ace.require([\"ace/snippets/ruby\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["C:/Users/akash/Desktop/Project/React/SyntaxMeets/frontend/syntaxmeets/node_modules/ace-builds/src-noconflict/snippets/ruby.js"],"names":["ace","define","require","exports","module","snippetText","scope","m"],"mappings":"AAAAA,GAAG,CAACC,MAAJ,CAAW,mBAAX,EAA+B,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,CAA/B,EAA+D,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AAClG;;AAEAD,EAAAA,OAAO,CAACE,WAAR,GAAsB;AACth6BA;AAi6BAF,EAAAA,OAAO,CAACG,KAAR,GAAgB,MAAhB;AAEC,CAt6BD;;AAs6BmB,CAAC,YAAW;AACXN,EAAAA,GAAG,CAACE,OAAJ,CAAY,CAAC,mBAAD,CAAZ,EAAmC,UAASK,CAAT,EAAY;AAC3C,QAAI,OAAOH,MAAP,IAAiB,QAAjB,IAA6B,OAAOD,OAAP,IAAkB,QAA/C,IAA2DC,MAA/D,EAAuE;AACnEA,MAAAA,MAAM,CAACD,OAAP,GAAiBI,CAAjB;AACH;AACJ,GAJD;AAKH,CANE","sourcesContent":["ace.define(\"ace/snippets/ruby\",[\"require\",\"exports\",\"module\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nexports.snippetText = \"########################################\\n\\\r\n# Ruby snippets - for Rails, see below #\\n\\\r\n########################################\\n\\\r\n\\n\\\r\n# encoding for Ruby 1.9\\n\\\r\nsnippet enc\\n\\\r\n\t# encoding: utf-8\\n\\\r\n\\n\\\r\n# #!/usr/bin/env ruby\\n\\\r\nsnippet #!\\n\\\r\n\t#!/usr/bin/env ruby\\n\\\r\n\t# encoding: utf-8\\n\\\r\n\\n\\\r\n# New Block\\n\\\r\nsnippet =b\\n\\\r\n\t=begin rdoc\\n\\\r\n\t\t${1}\\n\\\r\n\t=end\\n\\\r\nsnippet y\\n\\\r\n\t:yields: ${1:arguments}\\n\\\r\nsnippet rb\\n\\\r\n\t#!/usr/bin/env ruby -wKU\\n\\\r\nsnippet beg\\n\\\r\n\tbegin\\n\\\r\n\t\t${3}\\n\\\r\n\trescue ${1:Exception} => ${2:e}\\n\\\r\n\tend\\n\\\r\n\\n\\\r\nsnippet req require\\n\\\r\n\trequire \\\"${1}\\\"${2}\\n\\\r\nsnippet #\\n\\\r\n\t# =>\\n\\\r\nsnippet end\\n\\\r\n\t__END__\\n\\\r\nsnippet case\\n\\\r\n\tcase ${1:object}\\n\\\r\n\twhen ${2:condition}\\n\\\r\n\t\t${3}\\n\\\r\n\tend\\n\\\r\nsnippet when\\n\\\r\n\twhen ${1:condition}\\n\\\r\n\t\t${2}\\n\\\r\nsnippet def\\n\\\r\n\tdef ${1:method_name}\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet deft\\n\\\r\n\tdef test_${1:case_name}\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet if\\n\\\r\n\tif ${1:condition}\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet ife\\n\\\r\n\tif ${1:condition}\\n\\\r\n\t\t${2}\\n\\\r\n\telse\\n\\\r\n\t\t${3}\\n\\\r\n\tend\\n\\\r\nsnippet elsif\\n\\\r\n\telsif ${1:condition}\\n\\\r\n\t\t${2}\\n\\\r\nsnippet unless\\n\\\r\n\tunless ${1:condition}\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet while\\n\\\r\n\twhile ${1:condition}\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet for\\n\\\r\n\tfor ${1:e} in ${2:c}\\n\\\r\n\t\t${3}\\n\\\r\n\tend\\n\\\r\nsnippet until\\n\\\r\n\tuntil ${1:condition}\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet cla class .. end\\n\\\r\n\tclass ${1:`substitute(Filename(), '\\\\(_\\\\|^\\\\)\\\\(.\\\\)', '\\\\u\\\\2', 'g')`}\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet cla class .. initialize .. end\\n\\\r\n\tclass ${1:`substitute(Filename(), '\\\\(_\\\\|^\\\\)\\\\(.\\\\)', '\\\\u\\\\2', 'g')`}\\n\\\r\n\t\tdef initialize(${2:args})\\n\\\r\n\t\t\t${3}\\n\\\r\n\t\tend\\n\\\r\n\tend\\n\\\r\nsnippet cla class .. < ParentClass .. initialize .. end\\n\\\r\n\tclass ${1:`substitute(Filename(), '\\\\(_\\\\|^\\\\)\\\\(.\\\\)', '\\\\u\\\\2', 'g')`} < ${2:ParentClass}\\n\\\r\n\t\tdef initialize(${3:args})\\n\\\r\n\t\t\t${4}\\n\\\r\n\t\tend\\n\\\r\n\tend\\n\\\r\nsnippet cla ClassName = Struct .. do .. end\\n\\\r\n\t${1:`substitute(Filename(), '\\\\(_\\\\|^\\\\)\\\\(.\\\\)', '\\\\u\\\\2', 'g')`} = Struct.new(:${2:attr_names}) do\\n\\\r\n\t\tdef ${3:method_name}\\n\\\r\n\t\t\t${4}\\n\\\r\n\t\tend\\n\\\r\n\tend\\n\\\r\nsnippet cla class BlankSlate .. initialize .. end\\n\\\r\n\tclass ${1:BlankSlate}\\n\\\r\n\t\tinstance_methods.each { |meth| undef_method(meth) unless meth =~ /\\\\A__/ }\\n\\\r\n\tend\\n\\\r\nsnippet cla class << self .. end\\n\\\r\n\tclass << ${1:self}\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\n# class .. < DelegateClass .. initialize .. end\\n\\\r\nsnippet cla-\\n\\\r\n\tclass ${1:`substitute(Filename(), '\\\\(_\\\\|^\\\\)\\\\(.\\\\)', '\\\\u\\\\2', 'g')`} < DelegateClass(${2:ParentClass})\\n\\\r\n\t\tdef initialize(${3:args})\\n\\\r\n\t\t\tsuper(${4:del_obj})\\n\\\r\n\\n\\\r\n\t\t\t${5}\\n\\\r\n\t\tend\\n\\\r\n\tend\\n\\\r\nsnippet mod module .. end\\n\\\r\n\tmodule ${1:`substitute(Filename(), '\\\\(_\\\\|^\\\\)\\\\(.\\\\)', '\\\\u\\\\2', 'g')`}\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet mod module .. module_function .. end\\n\\\r\n\tmodule ${1:`substitute(Filename(), '\\\\(_\\\\|^\\\\)\\\\(.\\\\)', '\\\\u\\\\2', 'g')`}\\n\\\r\n\t\tmodule_function\\n\\\r\n\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet mod module .. ClassMethods .. end\\n\\\r\n\tmodule ${1:`substitute(Filename(), '\\\\(_\\\\|^\\\\)\\\\(.\\\\)', '\\\\u\\\\2', 'g')`}\\n\\\r\n\t\tmodule ClassMethods\\n\\\r\n\t\t\t${2}\\n\\\r\n\t\tend\\n\\\r\n\\n\\\r\n\t\tmodule InstanceMethods\\n\\\r\n\\n\\\r\n\t\tend\\n\\\r\n\\n\\\r\n\t\tdef self.included(receiver)\\n\\\r\n\t\t\treceiver.extend         ClassMethods\\n\\\r\n\t\t\treceiver.send :include, InstanceMethods\\n\\\r\n\t\tend\\n\\\r\n\tend\\n\\\r\n# attr_reader\\n\\\r\nsnippet r\\n\\\r\n\tattr_reader :${1:attr_names}\\n\\\r\n# attr_writer\\n\\\r\nsnippet w\\n\\\r\n\tattr_writer :${1:attr_names}\\n\\\r\n# attr_accessor\\n\\\r\nsnippet rw\\n\\\r\n\tattr_accessor :${1:attr_names}\\n\\\r\nsnippet atp\\n\\\r\n\tattr_protected :${1:attr_names}\\n\\\r\nsnippet ata\\n\\\r\n\tattr_accessible :${1:attr_names}\\n\\\r\n# include Enumerable\\n\\\r\nsnippet Enum\\n\\\r\n\tinclude Enumerable\\n\\\r\n\\n\\\r\n\tdef each(&block)\\n\\\r\n\t\t${1}\\n\\\r\n\tend\\n\\\r\n# include Comparable\\n\\\r\nsnippet Comp\\n\\\r\n\tinclude Comparable\\n\\\r\n\\n\\\r\n\tdef <=>(other)\\n\\\r\n\t\t${1}\\n\\\r\n\tend\\n\\\r\n# extend Forwardable\\n\\\r\nsnippet Forw-\\n\\\r\n\textend Forwardable\\n\\\r\n# def self\\n\\\r\nsnippet defs\\n\\\r\n\tdef self.${1:class_method_name}\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\n# def method_missing\\n\\\r\nsnippet defmm\\n\\\r\n\tdef method_missing(meth, *args, &blk)\\n\\\r\n\t\t${1}\\n\\\r\n\tend\\n\\\r\nsnippet defd\\n\\\r\n\tdef_delegator :${1:@del_obj}, :${2:del_meth}, :${3:new_name}\\n\\\r\nsnippet defds\\n\\\r\n\tdef_delegators :${1:@del_obj}, :${2:del_methods}\\n\\\r\nsnippet am\\n\\\r\n\talias_method :${1:new_name}, :${2:old_name}\\n\\\r\nsnippet app\\n\\\r\n\tif __FILE__ == $PROGRAM_NAME\\n\\\r\n\t\t${1}\\n\\\r\n\tend\\n\\\r\n# usage_if()\\n\\\r\nsnippet usai\\n\\\r\n\tif ARGV.${1}\\n\\\r\n\t\tabort \\\"Usage: #{$PROGRAM_NAME} ${2:ARGS_GO_HERE}\\\"${3}\\n\\\r\n\tend\\n\\\r\n# usage_unless()\\n\\\r\nsnippet usau\\n\\\r\n\tunless ARGV.${1}\\n\\\r\n\t\tabort \\\"Usage: #{$PROGRAM_NAME} ${2:ARGS_GO_HERE}\\\"${3}\\n\\\r\n\tend\\n\\\r\nsnippet array\\n\\\r\n\tArray.new(${1:10}) { |${2:i}| ${3} }\\n\\\r\nsnippet hash\\n\\\r\n\tHash.new { |${1:hash}, ${2:key}| $1[$2] = ${3} }\\n\\\r\nsnippet file File.foreach() { |line| .. }\\n\\\r\n\tFile.foreach(${1:\\\"path/to/file\\\"}) { |${2:line}| ${3} }\\n\\\r\nsnippet file File.read()\\n\\\r\n\tFile.read(${1:\\\"path/to/file\\\"})${2}\\n\\\r\nsnippet Dir Dir.global() { |file| .. }\\n\\\r\n\tDir.glob(${1:\\\"dir/glob/*\\\"}) { |${2:file}| ${3} }\\n\\\r\nsnippet Dir Dir[\\\"..\\\"]\\n\\\r\n\tDir[${1:\\\"glob/**/*.rb\\\"}]${2}\\n\\\r\nsnippet dir\\n\\\r\n\tFilename.dirname(__FILE__)\\n\\\r\nsnippet deli\\n\\\r\n\tdelete_if { |${1:e}| ${2} }\\n\\\r\nsnippet fil\\n\\\r\n\tfill(${1:range}) { |${2:i}| ${3} }\\n\\\r\n# flatten_once()\\n\\\r\nsnippet flao\\n\\\r\n\tinject(Array.new) { |${1:arr}, ${2:a}| $1.push(*$2)}${3}\\n\\\r\nsnippet zip\\n\\\r\n\tzip(${1:enums}) { |${2:row}| ${3} }\\n\\\r\n# downto(0) { |n| .. }\\n\\\r\nsnippet dow\\n\\\r\n\tdownto(${1:0}) { |${2:n}| ${3} }\\n\\\r\nsnippet ste\\n\\\r\n\tstep(${1:2}) { |${2:n}| ${3} }\\n\\\r\nsnippet tim\\n\\\r\n\ttimes { |${1:n}| ${2} }\\n\\\r\nsnippet upt\\n\\\r\n\tupto(${1:1.0/0.0}) { |${2:n}| ${3} }\\n\\\r\nsnippet loo\\n\\\r\n\tloop { ${1} }\\n\\\r\nsnippet ea\\n\\\r\n\teach { |${1:e}| ${2} }\\n\\\r\nsnippet ead\\n\\\r\n\teach do |${1:e}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet eab\\n\\\r\n\teach_byte { |${1:byte}| ${2} }\\n\\\r\nsnippet eac- each_char { |chr| .. }\\n\\\r\n\teach_char { |${1:chr}| ${2} }\\n\\\r\nsnippet eac- each_cons(..) { |group| .. }\\n\\\r\n\teach_cons(${1:2}) { |${2:group}| ${3} }\\n\\\r\nsnippet eai\\n\\\r\n\teach_index { |${1:i}| ${2} }\\n\\\r\nsnippet eaid\\n\\\r\n\teach_index do |${1:i}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet eak\\n\\\r\n\teach_key { |${1:key}| ${2} }\\n\\\r\nsnippet eakd\\n\\\r\n\teach_key do |${1:key}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet eal\\n\\\r\n\teach_line { |${1:line}| ${2} }\\n\\\r\nsnippet eald\\n\\\r\n\teach_line do |${1:line}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet eap\\n\\\r\n\teach_pair { |${1:name}, ${2:val}| ${3} }\\n\\\r\nsnippet eapd\\n\\\r\n\teach_pair do |${1:name}, ${2:val}|\\n\\\r\n\t\t${3}\\n\\\r\n\tend\\n\\\r\nsnippet eas-\\n\\\r\n\teach_slice(${1:2}) { |${2:group}| ${3} }\\n\\\r\nsnippet easd-\\n\\\r\n\teach_slice(${1:2}) do |${2:group}|\\n\\\r\n\t\t${3}\\n\\\r\n\tend\\n\\\r\nsnippet eav\\n\\\r\n\teach_value { |${1:val}| ${2} }\\n\\\r\nsnippet eavd\\n\\\r\n\teach_value do |${1:val}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet eawi\\n\\\r\n\teach_with_index { |${1:e}, ${2:i}| ${3} }\\n\\\r\nsnippet eawid\\n\\\r\n\teach_with_index do |${1:e},${2:i}|\\n\\\r\n\t\t${3}\\n\\\r\n\tend\\n\\\r\nsnippet reve\\n\\\r\n\treverse_each { |${1:e}| ${2} }\\n\\\r\nsnippet reved\\n\\\r\n\treverse_each do |${1:e}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet inj\\n\\\r\n\tinject(${1:init}) { |${2:mem}, ${3:var}| ${4} }\\n\\\r\nsnippet injd\\n\\\r\n\tinject(${1:init}) do |${2:mem}, ${3:var}|\\n\\\r\n\t\t${4}\\n\\\r\n\tend\\n\\\r\nsnippet map\\n\\\r\n\tmap { |${1:e}| ${2} }\\n\\\r\nsnippet mapd\\n\\\r\n\tmap do |${1:e}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet mapwi-\\n\\\r\n\tenum_with_index.map { |${1:e}, ${2:i}| ${3} }\\n\\\r\nsnippet sor\\n\\\r\n\tsort { |a, b| ${1} }\\n\\\r\nsnippet sorb\\n\\\r\n\tsort_by { |${1:e}| ${2} }\\n\\\r\nsnippet ran\\n\\\r\n\tsort_by { rand }\\n\\\r\nsnippet all\\n\\\r\n\tall? { |${1:e}| ${2} }\\n\\\r\nsnippet any\\n\\\r\n\tany? { |${1:e}| ${2} }\\n\\\r\nsnippet cl\\n\\\r\n\tclassify { |${1:e}| ${2} }\\n\\\r\nsnippet col\\n\\\r\n\tcollect { |${1:e}| ${2} }\\n\\\r\nsnippet cold\\n\\\r\n\tcollect do |${1:e}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet det\\n\\\r\n\tdetect { |${1:e}| ${2} }\\n\\\r\nsnippet detd\\n\\\r\n\tdetect do |${1:e}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet fet\\n\\\r\n\tfetch(${1:name}) { |${2:key}| ${3} }\\n\\\r\nsnippet fin\\n\\\r\n\tfind { |${1:e}| ${2} }\\n\\\r\nsnippet find\\n\\\r\n\tfind do |${1:e}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet fina\\n\\\r\n\tfind_all { |${1:e}| ${2} }\\n\\\r\nsnippet finad\\n\\\r\n\tfind_all do |${1:e}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet gre\\n\\\r\n\tgrep(${1:/pattern/}) { |${2:match}| ${3} }\\n\\\r\nsnippet sub\\n\\\r\n\t${1:g}sub(${2:/pattern/}) { |${3:match}| ${4} }\\n\\\r\nsnippet sca\\n\\\r\n\tscan(${1:/pattern/}) { |${2:match}| ${3} }\\n\\\r\nsnippet scad\\n\\\r\n\tscan(${1:/pattern/}) do |${2:match}|\\n\\\r\n\t\t${3}\\n\\\r\n\tend\\n\\\r\nsnippet max\\n\\\r\n\tmax { |a, b| ${1} }\\n\\\r\nsnippet min\\n\\\r\n\tmin { |a, b| ${1} }\\n\\\r\nsnippet par\\n\\\r\n\tpartition { |${1:e}| ${2} }\\n\\\r\nsnippet pard\\n\\\r\n\tpartition do |${1:e}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet rej\\n\\\r\n\treject { |${1:e}| ${2} }\\n\\\r\nsnippet rejd\\n\\\r\n\treject do |${1:e}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet sel\\n\\\r\n\tselect { |${1:e}| ${2} }\\n\\\r\nsnippet seld\\n\\\r\n\tselect do |${1:e}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet lam\\n\\\r\n\tlambda { |${1:args}| ${2} }\\n\\\r\nsnippet doo\\n\\\r\n\tdo\\n\\\r\n\t\t${1}\\n\\\r\n\tend\\n\\\r\nsnippet dov\\n\\\r\n\tdo |${1:variable}|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet :\\n\\\r\n\t:${1:key} => ${2:\\\"value\\\"}${3}\\n\\\r\nsnippet ope\\n\\\r\n\topen(${1:\\\"path/or/url/or/pipe\\\"}, \\\"${2:w}\\\") { |${3:io}| ${4} }\\n\\\r\n# path_from_here()\\n\\\r\nsnippet fpath\\n\\\r\n\tFile.join(File.dirname(__FILE__), *%2[${1:rel path here}])${2}\\n\\\r\n# unix_filter {}\\n\\\r\nsnippet unif\\n\\\r\n\tARGF.each_line${1} do |${2:line}|\\n\\\r\n\t\t${3}\\n\\\r\n\tend\\n\\\r\n# option_parse {}\\n\\\r\nsnippet optp\\n\\\r\n\trequire \\\"optparse\\\"\\n\\\r\n\\n\\\r\n\toptions = {${1:default => \\\"args\\\"}}\\n\\\r\n\\n\\\r\n\tARGV.options do |opts|\\n\\\r\n\t\topts.banner = \\\"Usage: #{File.basename($PROGRAM_NAME)}\\n\\\r\nsnippet opt\\n\\\r\n\topts.on( \\\"-${1:o}\\\", \\\"--${2:long-option-name}\\\", ${3:String},\\n\\\r\n\t         \\\"${4:Option description.}\\\") do |${5:opt}|\\n\\\r\n\t\t${6}\\n\\\r\n\tend\\n\\\r\nsnippet tc\\n\\\r\n\trequire \\\"test/unit\\\"\\n\\\r\n\\n\\\r\n\trequire \\\"${1:library_file_name}\\\"\\n\\\r\n\\n\\\r\n\tclass Test${2:$1} < Test::Unit::TestCase\\n\\\r\n\t\tdef test_${3:case_name}\\n\\\r\n\t\t\t${4}\\n\\\r\n\t\tend\\n\\\r\n\tend\\n\\\r\nsnippet ts\\n\\\r\n\trequire \\\"test/unit\\\"\\n\\\r\n\\n\\\r\n\trequire \\\"tc_${1:test_case_file}\\\"\\n\\\r\n\trequire \\\"tc_${2:test_case_file}\\\"${3}\\n\\\r\nsnippet as\\n\\\r\n\tassert ${1:test}, \\\"${2:Failure message.}\\\"${3}\\n\\\r\nsnippet ase\\n\\\r\n\tassert_equal ${1:expected}, ${2:actual}${3}\\n\\\r\nsnippet asne\\n\\\r\n\tassert_not_equal ${1:unexpected}, ${2:actual}${3}\\n\\\r\nsnippet asid\\n\\\r\n\tassert_in_delta ${1:expected_float}, ${2:actual_float}, ${3:2 ** -20}${4}\\n\\\r\nsnippet asio\\n\\\r\n\tassert_instance_of ${1:ExpectedClass}, ${2:actual_instance}${3}\\n\\\r\nsnippet asko\\n\\\r\n\tassert_kind_of ${1:ExpectedKind}, ${2:actual_instance}${3}\\n\\\r\nsnippet asn\\n\\\r\n\tassert_nil ${1:instance}${2}\\n\\\r\nsnippet asnn\\n\\\r\n\tassert_not_nil ${1:instance}${2}\\n\\\r\nsnippet asm\\n\\\r\n\tassert_match /${1:expected_pattern}/, ${2:actual_string}${3}\\n\\\r\nsnippet asnm\\n\\\r\n\tassert_no_match /${1:unexpected_pattern}/, ${2:actual_string}${3}\\n\\\r\nsnippet aso\\n\\\r\n\tassert_operator ${1:left}, :${2:operator}, ${3:right}${4}\\n\\\r\nsnippet asr\\n\\\r\n\tassert_raise ${1:Exception} { ${2} }\\n\\\r\nsnippet asrd\\n\\\r\n\tassert_raise ${1:Exception} do\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet asnr\\n\\\r\n\tassert_nothing_raised ${1:Exception} { ${2} }\\n\\\r\nsnippet asnrd\\n\\\r\n\tassert_nothing_raised ${1:Exception} do\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet asrt\\n\\\r\n\tassert_respond_to ${1:object}, :${2:method}${3}\\n\\\r\nsnippet ass assert_same(..)\\n\\\r\n\tassert_same ${1:expected}, ${2:actual}${3}\\n\\\r\nsnippet ass assert_send(..)\\n\\\r\n\tassert_send [${1:object}, :${2:message}, ${3:args}]${4}\\n\\\r\nsnippet asns\\n\\\r\n\tassert_not_same ${1:unexpected}, ${2:actual}${3}\\n\\\r\nsnippet ast\\n\\\r\n\tassert_throws :${1:expected} { ${2} }\\n\\\r\nsnippet astd\\n\\\r\n\tassert_throws :${1:expected} do\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet asnt\\n\\\r\n\tassert_nothing_thrown { ${1} }\\n\\\r\nsnippet asntd\\n\\\r\n\tassert_nothing_thrown do\\n\\\r\n\t\t${1}\\n\\\r\n\tend\\n\\\r\nsnippet fl\\n\\\r\n\tflunk \\\"${1:Failure message.}\\\"${2}\\n\\\r\n# Benchmark.bmbm do .. end\\n\\\r\nsnippet bm-\\n\\\r\n\tTESTS = ${1:10_000}\\n\\\r\n\tBenchmark.bmbm do |results|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet rep\\n\\\r\n\tresults.report(\\\"${1:name}:\\\") { TESTS.times { ${2} }}\\n\\\r\n# Marshal.dump(.., file)\\n\\\r\nsnippet Md\\n\\\r\n\tFile.open(${1:\\\"path/to/file.dump\\\"}, \\\"wb\\\") { |${2:file}| Marshal.dump(${3:obj}, $2) }${4}\\n\\\r\n# Mashal.load(obj)\\n\\\r\nsnippet Ml\\n\\\r\n\tFile.open(${1:\\\"path/to/file.dump\\\"}, \\\"rb\\\") { |${2:file}| Marshal.load($2) }${3}\\n\\\r\n# deep_copy(..)\\n\\\r\nsnippet deec\\n\\\r\n\tMarshal.load(Marshal.dump(${1:obj_to_copy}))${2}\\n\\\r\nsnippet Pn-\\n\\\r\n\tPStore.new(${1:\\\"file_name.pstore\\\"})${2}\\n\\\r\nsnippet tra\\n\\\r\n\ttransaction(${1:true}) { ${2} }\\n\\\r\n# xmlread(..)\\n\\\r\nsnippet xml-\\n\\\r\n\tREXML::Document.new(File.read(${1:\\\"path/to/file\\\"}))${2}\\n\\\r\n# xpath(..) { .. }\\n\\\r\nsnippet xpa\\n\\\r\n\telements.each(${1:\\\"//Xpath\\\"}) do |${2:node}|\\n\\\r\n\t\t${3}\\n\\\r\n\tend\\n\\\r\n# class_from_name()\\n\\\r\nsnippet clafn\\n\\\r\n\tsplit(\\\"::\\\").inject(Object) { |par, const| par.const_get(const) }\\n\\\r\n# singleton_class()\\n\\\r\nsnippet sinc\\n\\\r\n\tclass << self; self end\\n\\\r\nsnippet nam\\n\\\r\n\tnamespace :${1:`Filename()`} do\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet tas\\n\\\r\n\tdesc \\\"${1:Task description}\\\"\\n\\\r\n\ttask :${2:task_name => [:dependent, :tasks]} do\\n\\\r\n\t\t${3}\\n\\\r\n\tend\\n\\\r\n# block\\n\\\r\nsnippet b\\n\\\r\n\t{ |${1:var}| ${2} }\\n\\\r\nsnippet begin\\n\\\r\n\tbegin\\n\\\r\n\t\traise 'A test exception.'\\n\\\r\n\trescue Exception => e\\n\\\r\n\t\tputs e.message\\n\\\r\n\t\tputs e.backtrace.inspect\\n\\\r\n\telse\\n\\\r\n\t\t# other exception\\n\\\r\n\tensure\\n\\\r\n\t\t# always executed\\n\\\r\n\tend\\n\\\r\n\\n\\\r\n#debugging\\n\\\r\nsnippet debug\\n\\\r\n\trequire 'ruby-debug'; debugger; true;\\n\\\r\nsnippet pry\\n\\\r\n\trequire 'pry'; binding.pry\\n\\\r\n\\n\\\r\n#############################################\\n\\\r\n# Rails snippets - for pure Ruby, see above #\\n\\\r\n#############################################\\n\\\r\nsnippet art\\n\\\r\n\tassert_redirected_to ${1::action => \\\"${2:index}\\\"}\\n\\\r\nsnippet artnp\\n\\\r\n\tassert_redirected_to ${1:parent}_${2:child}_path(${3:@$1}, ${4:@$2})\\n\\\r\nsnippet artnpp\\n\\\r\n\tassert_redirected_to ${1:parent}_${2:child}_path(${3:@$1})\\n\\\r\nsnippet artp\\n\\\r\n\tassert_redirected_to ${1:model}_path(${2:@$1})\\n\\\r\nsnippet artpp\\n\\\r\n\tassert_redirected_to ${1:model}s_path\\n\\\r\nsnippet asd\\n\\\r\n\tassert_difference \\\"${1:Model}.${2:count}\\\", $1 do\\n\\\r\n\t\t${3}\\n\\\r\n\tend\\n\\\r\nsnippet asnd\\n\\\r\n\tassert_no_difference \\\"${1:Model}.${2:count}\\\" do\\n\\\r\n\t\t${3}\\n\\\r\n\tend\\n\\\r\nsnippet asre\\n\\\r\n\tassert_response :${1:success}, @response.body${2}\\n\\\r\nsnippet asrj\\n\\\r\n\tassert_rjs :${1:replace}, \\\"${2:dom id}\\\"\\n\\\r\nsnippet ass assert_select(..)\\n\\\r\n\tassert_select '${1:path}', :${2:text} => '${3:inner_html' ${4:do}\\n\\\r\nsnippet bf\\n\\\r\n\tbefore_filter :${1:method}\\n\\\r\nsnippet bt\\n\\\r\n\tbelongs_to :${1:association}\\n\\\r\nsnippet crw\\n\\\r\n\tcattr_accessor :${1:attr_names}\\n\\\r\nsnippet defcreate\\n\\\r\n\tdef create\\n\\\r\n\t\t@${1:model_class_name} = ${2:ModelClassName}.new(params[:$1])\\n\\\r\n\\n\\\r\n\t\trespond_to do |wants|\\n\\\r\n\t\t\tif @$1.save\\n\\\r\n\t\t\t\tflash[:notice] = '$2 was successfully created.'\\n\\\r\n\t\t\t\twants.html { redirect_to(@$1) }\\n\\\r\n\t\t\t\twants.xml  { render :xml => @$1, :status => :created, :location => @$1 }\\n\\\r\n\t\t\telse\\n\\\r\n\t\t\t\twants.html { render :action => \\\"new\\\" }\\n\\\r\n\t\t\t\twants.xml  { render :xml => @$1.errors, :status => :unprocessable_entity }\\n\\\r\n\t\t\tend\\n\\\r\n\t\tend\\n\\\r\n\tend${3}\\n\\\r\nsnippet defdestroy\\n\\\r\n\tdef destroy\\n\\\r\n\t\t@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])\\n\\\r\n\t\t@$1.destroy\\n\\\r\n\\n\\\r\n\t\trespond_to do |wants|\\n\\\r\n\t\t\twants.html { redirect_to($1s_url) }\\n\\\r\n\t\t\twants.xml  { head :ok }\\n\\\r\n\t\tend\\n\\\r\n\tend${3}\\n\\\r\nsnippet defedit\\n\\\r\n\tdef edit\\n\\\r\n\t\t@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])\\n\\\r\n\tend\\n\\\r\nsnippet defindex\\n\\\r\n\tdef index\\n\\\r\n\t\t@${1:model_class_name} = ${2:ModelClassName}.all\\n\\\r\n\\n\\\r\n\t\trespond_to do |wants|\\n\\\r\n\t\t\twants.html # index.html.erb\\n\\\r\n\t\t\twants.xml  { render :xml => @$1s }\\n\\\r\n\t\tend\\n\\\r\n\tend${3}\\n\\\r\nsnippet defnew\\n\\\r\n\tdef new\\n\\\r\n\t\t@${1:model_class_name} = ${2:ModelClassName}.new\\n\\\r\n\\n\\\r\n\t\trespond_to do |wants|\\n\\\r\n\t\t\twants.html # new.html.erb\\n\\\r\n\t\t\twants.xml  { render :xml => @$1 }\\n\\\r\n\t\tend\\n\\\r\n\tend${3}\\n\\\r\nsnippet defshow\\n\\\r\n\tdef show\\n\\\r\n\t\t@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])\\n\\\r\n\\n\\\r\n\t\trespond_to do |wants|\\n\\\r\n\t\t\twants.html # show.html.erb\\n\\\r\n\t\t\twants.xml  { render :xml => @$1 }\\n\\\r\n\t\tend\\n\\\r\n\tend${3}\\n\\\r\nsnippet defupdate\\n\\\r\n\tdef update\\n\\\r\n\t\t@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])\\n\\\r\n\\n\\\r\n\t\trespond_to do |wants|\\n\\\r\n\t\t\tif @$1.update_attributes(params[:$1])\\n\\\r\n\t\t\t\tflash[:notice] = '$2 was successfully updated.'\\n\\\r\n\t\t\t\twants.html { redirect_to(@$1) }\\n\\\r\n\t\t\t\twants.xml  { head :ok }\\n\\\r\n\t\t\telse\\n\\\r\n\t\t\t\twants.html { render :action => \\\"edit\\\" }\\n\\\r\n\t\t\t\twants.xml  { render :xml => @$1.errors, :status => :unprocessable_entity }\\n\\\r\n\t\t\tend\\n\\\r\n\t\tend\\n\\\r\n\tend${3}\\n\\\r\nsnippet flash\\n\\\r\n\tflash[:${1:notice}] = \\\"${2}\\\"\\n\\\r\nsnippet habtm\\n\\\r\n\thas_and_belongs_to_many :${1:object}, :join_table => \\\"${2:table_name}\\\", :foreign_key => \\\"${3}_id\\\"${4}\\n\\\r\nsnippet hm\\n\\\r\n\thas_many :${1:object}\\n\\\r\nsnippet hmd\\n\\\r\n\thas_many :${1:other}s, :class_name => \\\"${2:$1}\\\", :foreign_key => \\\"${3:$1}_id\\\", :dependent => :destroy${4}\\n\\\r\nsnippet hmt\\n\\\r\n\thas_many :${1:object}, :through => :${2:object}\\n\\\r\nsnippet ho\\n\\\r\n\thas_one :${1:object}\\n\\\r\nsnippet i18\\n\\\r\n\tI18n.t('${1:type.key}')${2}\\n\\\r\nsnippet ist\\n\\\r\n\t<%= image_submit_tag(\\\"${1:agree.png}\\\", :id => \\\"${2:id}\\\"${3} %>\\n\\\r\nsnippet log\\n\\\r\n\tRails.logger.${1:debug} ${2}\\n\\\r\nsnippet log2\\n\\\r\n\tRAILS_DEFAULT_LOGGER.${1:debug} ${2}\\n\\\r\nsnippet logd\\n\\\r\n\tlogger.debug { \\\"${1:message}\\\" }${2}\\n\\\r\nsnippet loge\\n\\\r\n\tlogger.error { \\\"${1:message}\\\" }${2}\\n\\\r\nsnippet logf\\n\\\r\n\tlogger.fatal { \\\"${1:message}\\\" }${2}\\n\\\r\nsnippet logi\\n\\\r\n\tlogger.info { \\\"${1:message}\\\" }${2}\\n\\\r\nsnippet logw\\n\\\r\n\tlogger.warn { \\\"${1:message}\\\" }${2}\\n\\\r\nsnippet mapc\\n\\\r\n\t${1:map}.${2:connect} '${3:controller/:action/:id}'\\n\\\r\nsnippet mapca\\n\\\r\n\t${1:map}.catch_all \\\"*${2:anything}\\\", :controller => \\\"${3:default}\\\", :action => \\\"${4:error}\\\"${5}\\n\\\r\nsnippet mapr\\n\\\r\n\t${1:map}.resource :${2:resource}\\n\\\r\nsnippet maprs\\n\\\r\n\t${1:map}.resources :${2:resource}\\n\\\r\nsnippet mapwo\\n\\\r\n\t${1:map}.with_options :${2:controller} => '${3:thing}' do |$3|\\n\\\r\n\t\t${4}\\n\\\r\n\tend\\n\\\r\nsnippet mbs\\n\\\r\n\tbefore_save :${1:method}\\n\\\r\nsnippet mcht\\n\\\r\n\tchange_table :${1:table_name} do |t|\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet mp\\n\\\r\n\tmap(&:${1:id})\\n\\\r\nsnippet mrw\\n\\\r\n\tmattr_accessor :${1:attr_names}\\n\\\r\nsnippet oa\\n\\\r\n\torder(\\\"${1:field}\\\")\\n\\\r\nsnippet od\\n\\\r\n\torder(\\\"${1:field} DESC\\\")\\n\\\r\nsnippet pa\\n\\\r\n\tparams[:${1:id}]${2}\\n\\\r\nsnippet ra\\n\\\r\n\trender :action => \\\"${1:action}\\\"\\n\\\r\nsnippet ral\\n\\\r\n\trender :action => \\\"${1:action}\\\", :layout => \\\"${2:layoutname}\\\"\\n\\\r\nsnippet rest\\n\\\r\n\trespond_to do |wants|\\n\\\r\n\t\twants.${1:html} { ${2} }\\n\\\r\n\tend\\n\\\r\nsnippet rf\\n\\\r\n\trender :file => \\\"${1:filepath}\\\"\\n\\\r\nsnippet rfu\\n\\\r\n\trender :file => \\\"${1:filepath}\\\", :use_full_path => ${2:false}\\n\\\r\nsnippet ri\\n\\\r\n\trender :inline => \\\"${1:<%= 'hello' %>}\\\"\\n\\\r\nsnippet ril\\n\\\r\n\trender :inline => \\\"${1:<%= 'hello' %>}\\\", :locals => { ${2::name} => \\\"${3:value}\\\"${4} }\\n\\\r\nsnippet rit\\n\\\r\n\trender :inline => \\\"${1:<%= 'hello' %>}\\\", :type => ${2::rxml}\\n\\\r\nsnippet rjson\\n\\\r\n\trender :json => ${1:text to render}\\n\\\r\nsnippet rl\\n\\\r\n\trender :layout => \\\"${1:layoutname}\\\"\\n\\\r\nsnippet rn\\n\\\r\n\trender :nothing => ${1:true}\\n\\\r\nsnippet rns\\n\\\r\n\trender :nothing => ${1:true}, :status => ${2:401}\\n\\\r\nsnippet rp\\n\\\r\n\trender :partial => \\\"${1:item}\\\"\\n\\\r\nsnippet rpc\\n\\\r\n\trender :partial => \\\"${1:item}\\\", :collection => ${2:@$1s}\\n\\\r\nsnippet rpl\\n\\\r\n\trender :partial => \\\"${1:item}\\\", :locals => { :${2:$1} => ${3:@$1}\\n\\\r\nsnippet rpo\\n\\\r\n\trender :partial => \\\"${1:item}\\\", :object => ${2:@$1}\\n\\\r\nsnippet rps\\n\\\r\n\trender :partial => \\\"${1:item}\\\", :status => ${2:500}\\n\\\r\nsnippet rt\\n\\\r\n\trender :text => \\\"${1:text to render}\\\"\\n\\\r\nsnippet rtl\\n\\\r\n\trender :text => \\\"${1:text to render}\\\", :layout => \\\"${2:layoutname}\\\"\\n\\\r\nsnippet rtlt\\n\\\r\n\trender :text => \\\"${1:text to render}\\\", :layout => ${2:true}\\n\\\r\nsnippet rts\\n\\\r\n\trender :text => \\\"${1:text to render}\\\", :status => ${2:401}\\n\\\r\nsnippet ru\\n\\\r\n\trender :update do |${1:page}|\\n\\\r\n\t\t$1.${2}\\n\\\r\n\tend\\n\\\r\nsnippet rxml\\n\\\r\n\trender :xml => ${1:text to render}\\n\\\r\nsnippet sc\\n\\\r\n\tscope :${1:name}, :where(:@${2:field} => ${3:value})\\n\\\r\nsnippet sl\\n\\\r\n\tscope :${1:name}, lambda do |${2:value}|\\n\\\r\n\t\twhere(\\\"${3:field = ?}\\\", ${4:bind var})\\n\\\r\n\tend\\n\\\r\nsnippet sha1\\n\\\r\n\tDigest::SHA1.hexdigest(${1:string})\\n\\\r\nsnippet sweeper\\n\\\r\n\tclass ${1:ModelClassName}Sweeper < ActionController::Caching::Sweeper\\n\\\r\n\t\tobserve $1\\n\\\r\n\\n\\\r\n\t\tdef after_save(${2:model_class_name})\\n\\\r\n\t\t\texpire_cache($2)\\n\\\r\n\t\tend\\n\\\r\n\\n\\\r\n\t\tdef after_destroy($2)\\n\\\r\n\t\t\texpire_cache($2)\\n\\\r\n\t\tend\\n\\\r\n\\n\\\r\n\t\tdef expire_cache($2)\\n\\\r\n\t\t\texpire_page\\n\\\r\n\t\tend\\n\\\r\n\tend\\n\\\r\nsnippet tcb\\n\\\r\n\tt.boolean :${1:title}\\n\\\r\n\t${2}\\n\\\r\nsnippet tcbi\\n\\\r\n\tt.binary :${1:title}, :limit => ${2:2}.megabytes\\n\\\r\n\t${3}\\n\\\r\nsnippet tcd\\n\\\r\n\tt.decimal :${1:title}, :precision => ${2:10}, :scale => ${3:2}\\n\\\r\n\t${4}\\n\\\r\nsnippet tcda\\n\\\r\n\tt.date :${1:title}\\n\\\r\n\t${2}\\n\\\r\nsnippet tcdt\\n\\\r\n\tt.datetime :${1:title}\\n\\\r\n\t${2}\\n\\\r\nsnippet tcf\\n\\\r\n\tt.float :${1:title}\\n\\\r\n\t${2}\\n\\\r\nsnippet tch\\n\\\r\n\tt.change :${1:name}, :${2:string}, :${3:limit} => ${4:80}\\n\\\r\n\t${5}\\n\\\r\nsnippet tci\\n\\\r\n\tt.integer :${1:title}\\n\\\r\n\t${2}\\n\\\r\nsnippet tcl\\n\\\r\n\tt.integer :lock_version, :null => false, :default => 0\\n\\\r\n\t${1}\\n\\\r\nsnippet tcr\\n\\\r\n\tt.references :${1:taggable}, :polymorphic => { :default => '${2:Photo}' }\\n\\\r\n\t${3}\\n\\\r\nsnippet tcs\\n\\\r\n\tt.string :${1:title}\\n\\\r\n\t${2}\\n\\\r\nsnippet tct\\n\\\r\n\tt.text :${1:title}\\n\\\r\n\t${2}\\n\\\r\nsnippet tcti\\n\\\r\n\tt.time :${1:title}\\n\\\r\n\t${2}\\n\\\r\nsnippet tcts\\n\\\r\n\tt.timestamp :${1:title}\\n\\\r\n\t${2}\\n\\\r\nsnippet tctss\\n\\\r\n\tt.timestamps\\n\\\r\n\t${1}\\n\\\r\nsnippet va\\n\\\r\n\tvalidates_associated :${1:attribute}\\n\\\r\nsnippet vao\\n\\\r\n\tvalidates_acceptance_of :${1:terms}\\n\\\r\nsnippet vc\\n\\\r\n\tvalidates_confirmation_of :${1:attribute}\\n\\\r\nsnippet ve\\n\\\r\n\tvalidates_exclusion_of :${1:attribute}, :in => ${2:%w( mov avi )}\\n\\\r\nsnippet vf\\n\\\r\n\tvalidates_format_of :${1:attribute}, :with => /${2:regex}/\\n\\\r\nsnippet vi\\n\\\r\n\tvalidates_inclusion_of :${1:attribute}, :in => %w(${2: mov avi })\\n\\\r\nsnippet vl\\n\\\r\n\tvalidates_length_of :${1:attribute}, :within => ${2:3}..${3:20}\\n\\\r\nsnippet vn\\n\\\r\n\tvalidates_numericality_of :${1:attribute}\\n\\\r\nsnippet vpo\\n\\\r\n\tvalidates_presence_of :${1:attribute}\\n\\\r\nsnippet vu\\n\\\r\n\tvalidates_uniqueness_of :${1:attribute}\\n\\\r\nsnippet wants\\n\\\r\n\twants.${1:js|xml|html} { ${2} }\\n\\\r\nsnippet wc\\n\\\r\n\twhere(${1:\\\"conditions\\\"}${2:, bind_var})\\n\\\r\nsnippet wh\\n\\\r\n\twhere(${1:field} => ${2:value})\\n\\\r\nsnippet xdelete\\n\\\r\n\txhr :delete, :${1:destroy}, :id => ${2:1}${3}\\n\\\r\nsnippet xget\\n\\\r\n\txhr :get, :${1:show}, :id => ${2:1}${3}\\n\\\r\nsnippet xpost\\n\\\r\n\txhr :post, :${1:create}, :${2:object} => { ${3} }\\n\\\r\nsnippet xput\\n\\\r\n\txhr :put, :${1:update}, :id => ${2:1}, :${3:object} => { ${4} }${5}\\n\\\r\nsnippet test\\n\\\r\n\ttest \\\"should ${1:do something}\\\" do\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\n#migrations\\n\\\r\nsnippet mac\\n\\\r\n\tadd_column :${1:table_name}, :${2:column_name}, :${3:data_type}\\n\\\r\nsnippet mrc\\n\\\r\n\tremove_column :${1:table_name}, :${2:column_name}\\n\\\r\nsnippet mrnc\\n\\\r\n\trename_column :${1:table_name}, :${2:old_column_name}, :${3:new_column_name}\\n\\\r\nsnippet mcc\\n\\\r\n\tchange_column :${1:table}, :${2:column}, :${3:type}\\n\\\r\nsnippet mccc\\n\\\r\n\tt.column :${1:title}, :${2:string}\\n\\\r\nsnippet mct\\n\\\r\n\tcreate_table :${1:table_name} do |t|\\n\\\r\n\t\tt.column :${2:name}, :${3:type}\\n\\\r\n\tend\\n\\\r\nsnippet migration\\n\\\r\n\tclass ${1:class_name} < ActiveRecord::Migration\\n\\\r\n\t\tdef self.up\\n\\\r\n\t\t\t${2}\\n\\\r\n\t\tend\\n\\\r\n\\n\\\r\n\t\tdef self.down\\n\\\r\n\t\tend\\n\\\r\n\tend\\n\\\r\n\\n\\\r\nsnippet trc\\n\\\r\n\tt.remove :${1:column}\\n\\\r\nsnippet tre\\n\\\r\n\tt.rename :${1:old_column_name}, :${2:new_column_name}\\n\\\r\n\t${3}\\n\\\r\nsnippet tref\\n\\\r\n\tt.references :${1:model}\\n\\\r\n\\n\\\r\n#rspec\\n\\\r\nsnippet it\\n\\\r\n\tit \\\"${1:spec_name}\\\" do\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet itp\\n\\\r\n\tit \\\"${1:spec_name}\\\"\\n\\\r\n\t${2}\\n\\\r\nsnippet desc\\n\\\r\n\tdescribe ${1:class_name} do\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet cont\\n\\\r\n\tcontext \\\"${1:message}\\\" do\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet bef\\n\\\r\n\tbefore :${1:each} do\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\nsnippet aft\\n\\\r\n\tafter :${1:each} do\\n\\\r\n\t\t${2}\\n\\\r\n\tend\\n\\\r\n\";\r\nexports.scope = \"ruby\";\r\n\r\n});                (function() {\r\n                    ace.require([\"ace/snippets/ruby\"], function(m) {\r\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\r\n                            module.exports = m;\r\n                        }\r\n                    });\r\n                })();\r\n            "]},"metadata":{},"sourceType":"script"}