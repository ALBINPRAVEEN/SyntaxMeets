{"ast":null,"code":"ace.define(\"ace/mode/alda_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var AldaHighlightRules = function () {\n    this.$rules = {\n      pitch: [{\n        token: \"variable.parameter.operator.pitch.alda\",\n        regex: /(?:[+\\-]+|\\=)/\n      }, {\n        token: \"\",\n        regex: \"\",\n        next: \"timing\"\n      }],\n      timing: [{\n        token: \"string.quoted.operator.timing.alda\",\n        regex: /\\d+(?:s|ms)?/\n      }, {\n        token: \"\",\n        regex: \"\",\n        next: \"start\"\n      }],\n      start: [{\n        token: [\"constant.language.instrument.alda\", \"constant.language.instrument.alda\", \"meta.part.call.alda\", \"storage.type.nickname.alda\", \"meta.part.call.alda\"],\n        regex: /^([a-zA-Z]{2}[\\w\\-+\\'()]*)((?:\\s*\\/\\s*[a-zA-Z]{2}[\\w\\-+\\'()]*)*)(?:(\\s*)(\\\"[a-zA-Z]{2}[\\w\\-+\\'()]*\\\"))?(\\s*:)/\n      }, {\n        token: [\"text\", \"entity.other.inherited-class.voice.alda\", \"text\"],\n        regex: /^(\\s*)(V\\d+)(:)/\n      }, {\n        token: \"comment.line.number-sign.alda\",\n        regex: /#.*$/\n      }, {\n        token: \"entity.name.function.pipe.measure.alda\",\n        regex: /\\|/\n      }, {\n        token: \"comment.block.inline.alda\",\n        regex: /\\(comment\\b/,\n        push: [{\n          token: \"comment.block.inline.alda\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"comment.block.inline.alda\"\n        }]\n      }, {\n        token: \"entity.name.function.marker.alda\",\n        regex: /%[a-zA-Z]{2}[\\w\\-+\\'()]*/\n      }, {\n        token: \"entity.name.function.at-marker.alda\",\n        regex: /@[a-zA-Z]{2}[\\w\\-+\\'()]*/\n      }, {\n        token: \"keyword.operator.octave-change.alda\",\n        regex: /\\bo\\d+\\b/\n      }, {\n        token: \"keyword.operator.octave-shift.alda\",\n        regex: /[><]/\n      }, {\n        token: \"keyword.operator.repeat.alda\",\n        regex: /\\*\\s*\\d+/\n      }, {\n        token: \"string.quoted.operator.timing.alda\",\n        regex: /[.]|r\\d*(?:s|ms)?/\n      }, {\n        token: \"text\",\n        regex: /([cdefgab])/,\n        next: \"pitch\"\n      }, {\n        token: \"string.quoted.operator.timing.alda\",\n        regex: /~/,\n        next: \"timing\"\n      }, {\n        token: \"punctuation.section.embedded.cram.alda\",\n        regex: /\\}/,\n        next: \"timing\"\n      }, {\n        token: \"constant.numeric.subchord.alda\",\n        regex: /\\//\n      }, {\n        todo: {\n          token: \"punctuation.section.embedded.cram.alda\",\n          regex: /\\{/,\n          push: [{\n            token: \"punctuation.section.embedded.cram.alda\",\n            regex: /\\}/,\n            next: \"pop\"\n          }, {\n            include: \"$self\"\n          }]\n        }\n      }, {\n        todo: {\n          token: \"keyword.control.sequence.alda\",\n          regex: /\\[/,\n          push: [{\n            token: \"keyword.control.sequence.alda\",\n            regex: /\\]/,\n            next: \"pop\"\n          }, {\n            include: \"$self\"\n          }]\n        }\n      }, {\n        token: \"meta.inline.clojure.alda\",\n        regex: /\\(/,\n        push: [{\n          token: \"meta.inline.clojure.alda\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          include: \"source.clojure\"\n        }, {\n          defaultToken: \"meta.inline.clojure.alda\"\n        }]\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  AldaHighlightRules.metaData = {\n    scopeName: \"source.alda\",\n    fileTypes: [\"alda\"],\n    name: \"Alda\"\n  };\n  oop.inherits(AldaHighlightRules, TextHighlightRules);\n  exports.AldaHighlightRules = AldaHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/alda\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/alda_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var AldaHighlightRules = require(\"./alda_highlight_rules\").AldaHighlightRules;\n\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function () {\n    this.HighlightRules = AldaHighlightRules;\n    this.foldingRules = new FoldMode();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.$id = \"ace/mode/alda\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/alda\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["C:/Users/akash/Desktop/Project/React/SyntaxMeets/frontend/syntaxmeets/node_modules/ace-builds/src-noconflict/mode-alda.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","AldaHighlightRules","$rules","pitch","token","regex","next","timing","start","push","defaultToken","todo","include","normalizeRules","metaData","scopeName","fileTypes","name","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$id"],"mappings":"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","sourcesContent":["ace.define(\"ace/mode/alda_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\r\n    \"use strict\";\r\n    \r\n    var oop = require(\"../lib/oop\");\r\n    var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n    \r\n    var AldaHighlightRules = function() {\r\n    \r\n        this.$rules = {\r\n            pitch: [{\r\n                token: \"variable.parameter.operator.pitch.alda\",\r\n                regex: /(?:[+\\-]+|\\=)/\r\n            }, {\r\n                token: \"\",\r\n                regex: \"\",\r\n                next: \"timing\"\r\n            }],\r\n            timing: [{\r\n                token: \"string.quoted.operator.timing.alda\",\r\n                regex: /\\d+(?:s|ms)?/\r\n            }, {\r\n                token: \"\",\r\n                regex: \"\",\r\n                next: \"start\"\r\n            }],\r\n            start: [{\r\n                token: [\r\n                    \"constant.language.instrument.alda\",\r\n                    \"constant.language.instrument.alda\",\r\n                    \"meta.part.call.alda\",\r\n                    \"storage.type.nickname.alda\",\r\n                    \"meta.part.call.alda\"\r\n                ],\r\n                regex: /^([a-zA-Z]{2}[\\w\\-+\\'()]*)((?:\\s*\\/\\s*[a-zA-Z]{2}[\\w\\-+\\'()]*)*)(?:(\\s*)(\\\"[a-zA-Z]{2}[\\w\\-+\\'()]*\\\"))?(\\s*:)/\r\n            }, {\r\n                token: [\r\n                    \"text\",\r\n                    \"entity.other.inherited-class.voice.alda\",\r\n                    \"text\"\r\n                ],\r\n                regex: /^(\\s*)(V\\d+)(:)/\r\n            }, {\r\n                token: \"comment.line.number-sign.alda\",\r\n                regex: /#.*$/\r\n            }, {\r\n                token: \"entity.name.function.pipe.measure.alda\",\r\n                regex: /\\|/\r\n            }, {\r\n                token: \"comment.block.inline.alda\",\r\n                regex: /\\(comment\\b/,\r\n                push: [{\r\n                    token: \"comment.block.inline.alda\",\r\n                    regex: /\\)/,\r\n                    next: \"pop\"\r\n                }, {\r\n                    defaultToken: \"comment.block.inline.alda\"\r\n                }]\r\n            }, {\r\n                token: \"entity.name.function.marker.alda\",\r\n                regex: /%[a-zA-Z]{2}[\\w\\-+\\'()]*/\r\n            }, {\r\n                token: \"entity.name.function.at-marker.alda\",\r\n                regex: /@[a-zA-Z]{2}[\\w\\-+\\'()]*/\r\n            }, {\r\n                token: \"keyword.operator.octave-change.alda\",\r\n                regex: /\\bo\\d+\\b/\r\n            }, {\r\n                token: \"keyword.operator.octave-shift.alda\",\r\n                regex: /[><]/\r\n            }, {\r\n                token: \"keyword.operator.repeat.alda\",\r\n                regex: /\\*\\s*\\d+/\r\n            }, {\r\n                token: \"string.quoted.operator.timing.alda\",\r\n                regex: /[.]|r\\d*(?:s|ms)?/\r\n            },{\r\n                token: \"text\",\r\n                regex: /([cdefgab])/,\r\n                next: \"pitch\"\r\n            }, {\r\n                token: \"string.quoted.operator.timing.alda\",\r\n                regex: /~/,\r\n                next: \"timing\"\r\n            }, {\r\n                token: \"punctuation.section.embedded.cram.alda\",\r\n                regex: /\\}/,\r\n                next: \"timing\"\r\n            }, {\r\n                token: \"constant.numeric.subchord.alda\",\r\n                regex: /\\//\r\n            }, {\r\n                todo: {\r\n                    token: \"punctuation.section.embedded.cram.alda\",\r\n                    regex: /\\{/,\r\n                    push: [{\r\n                        token: \"punctuation.section.embedded.cram.alda\",\r\n                        regex: /\\}/,\r\n                        next: \"pop\"\r\n                    }, {\r\n                        include: \"$self\"\r\n                    }]\r\n                }\r\n            }, {\r\n                todo: {\r\n                    token: \"keyword.control.sequence.alda\",\r\n                    regex: /\\[/,\r\n                    push: [{\r\n                        token: \"keyword.control.sequence.alda\",\r\n                        regex: /\\]/,\r\n                        next: \"pop\"\r\n                    }, {\r\n                        include: \"$self\"\r\n                    }]\r\n                }\r\n            }, {\r\n                token: \"meta.inline.clojure.alda\",\r\n                regex: /\\(/,\r\n                push: [{\r\n                    token: \"meta.inline.clojure.alda\",\r\n                    regex: /\\)/,\r\n                    next: \"pop\"\r\n                }, {\r\n                    include: \"source.clojure\"\r\n                }, {\r\n                    defaultToken: \"meta.inline.clojure.alda\"\r\n                }]\r\n            }]\r\n        };\r\n        \r\n        this.normalizeRules();\r\n    };\r\n    \r\n    AldaHighlightRules.metaData = {\r\n        scopeName: \"source.alda\",\r\n        fileTypes: [\"alda\"],\r\n        name: \"Alda\"\r\n    };\r\n    \r\n    \r\n    oop.inherits(AldaHighlightRules, TextHighlightRules);\r\n    \r\n    exports.AldaHighlightRules = AldaHighlightRules;\r\n    });\r\n\r\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../../lib/oop\");\r\nvar Range = require(\"../../range\").Range;\r\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\r\n\r\nvar FoldMode = exports.FoldMode = function(commentRegex) {\r\n    if (commentRegex) {\r\n        this.foldingStartMarker = new RegExp(\r\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\r\n        );\r\n        this.foldingStopMarker = new RegExp(\r\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\r\n        );\r\n    }\r\n};\r\noop.inherits(FoldMode, BaseFoldMode);\r\n\r\n(function() {\r\n    \r\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\r\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\r\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\r\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\r\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\r\n    this._getFoldWidgetBase = this.getFoldWidget;\r\n    this.getFoldWidget = function(session, foldStyle, row) {\r\n        var line = session.getLine(row);\r\n    \r\n        if (this.singleLineBlockCommentRe.test(line)) {\r\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\r\n                return \"\";\r\n        }\r\n    \r\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\r\n    \r\n        if (!fw && this.startRegionRe.test(line))\r\n            return \"start\"; // lineCommentRegionStart\r\n    \r\n        return fw;\r\n    };\r\n\r\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\r\n        var line = session.getLine(row);\r\n        \r\n        if (this.startRegionRe.test(line))\r\n            return this.getCommentRegionBlock(session, line, row);\r\n        \r\n        var match = line.match(this.foldingStartMarker);\r\n        if (match) {\r\n            var i = match.index;\r\n\r\n            if (match[1])\r\n                return this.openingBracketBlock(session, match[1], row, i);\r\n                \r\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\r\n            \r\n            if (range && !range.isMultiLine()) {\r\n                if (forceMultiline) {\r\n                    range = this.getSectionRange(session, row);\r\n                } else if (foldStyle != \"all\")\r\n                    range = null;\r\n            }\r\n            \r\n            return range;\r\n        }\r\n\r\n        if (foldStyle === \"markbegin\")\r\n            return;\r\n\r\n        var match = line.match(this.foldingStopMarker);\r\n        if (match) {\r\n            var i = match.index + match[0].length;\r\n\r\n            if (match[1])\r\n                return this.closingBracketBlock(session, match[1], row, i);\r\n\r\n            return session.getCommentFoldRange(row, i, -1);\r\n        }\r\n    };\r\n    \r\n    this.getSectionRange = function(session, row) {\r\n        var line = session.getLine(row);\r\n        var startIndent = line.search(/\\S/);\r\n        var startRow = row;\r\n        var startColumn = line.length;\r\n        row = row + 1;\r\n        var endRow = row;\r\n        var maxRow = session.getLength();\r\n        while (++row < maxRow) {\r\n            line = session.getLine(row);\r\n            var indent = line.search(/\\S/);\r\n            if (indent === -1)\r\n                continue;\r\n            if  (startIndent > indent)\r\n                break;\r\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\r\n            \r\n            if (subRange) {\r\n                if (subRange.start.row <= startRow) {\r\n                    break;\r\n                } else if (subRange.isMultiLine()) {\r\n                    row = subRange.end.row;\r\n                } else if (startIndent == indent) {\r\n                    break;\r\n                }\r\n            }\r\n            endRow = row;\r\n        }\r\n        \r\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\r\n    };\r\n    this.getCommentRegionBlock = function(session, line, row) {\r\n        var startColumn = line.search(/\\s*$/);\r\n        var maxRow = session.getLength();\r\n        var startRow = row;\r\n        \r\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\r\n        var depth = 1;\r\n        while (++row < maxRow) {\r\n            line = session.getLine(row);\r\n            var m = re.exec(line);\r\n            if (!m) continue;\r\n            if (m[1]) depth--;\r\n            else depth++;\r\n\r\n            if (!depth) break;\r\n        }\r\n\r\n        var endRow = row;\r\n        if (endRow > startRow) {\r\n            return new Range(startRow, startColumn, endRow, line.length);\r\n        }\r\n    };\r\n\r\n}).call(FoldMode.prototype);\r\n\r\n});\r\n\r\nace.define(\"ace/mode/alda\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/alda_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextMode = require(\"./text\").Mode;\r\nvar AldaHighlightRules = require(\"./alda_highlight_rules\").AldaHighlightRules;\r\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\r\n\r\nvar Mode = function() {\r\n    this.HighlightRules = AldaHighlightRules;\r\n    this.foldingRules = new FoldMode();\r\n};\r\noop.inherits(Mode, TextMode);\r\n\r\n(function() {\r\n    this.$id = \"ace/mode/alda\";\r\n}).call(Mode.prototype);\r\n\r\nexports.Mode = Mode;\r\n});                (function() {\r\n                    ace.require([\"ace/mode/alda\"], function(m) {\r\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\r\n                            module.exports = m;\r\n                        }\r\n                    });\r\n                })();\r\n            "]},"metadata":{},"sourceType":"script"}