{"ast":null,"code":"ace.define(\"ace/mode/erlang_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var ErlangHighlightRules = function () {\n    this.$rules = {\n      start: [{\n        include: '#module-directive'\n      }, {\n        include: '#import-export-directive'\n      }, {\n        include: '#behaviour-directive'\n      }, {\n        include: '#record-directive'\n      }, {\n        include: '#define-directive'\n      }, {\n        include: '#macro-directive'\n      }, {\n        include: '#directive'\n      }, {\n        include: '#function'\n      }, {\n        include: '#everything-else'\n      }],\n      '#atom': [{\n        token: 'punctuation.definition.symbol.begin.erlang',\n        regex: '\\'',\n        push: [{\n          token: 'punctuation.definition.symbol.end.erlang',\n          regex: '\\'',\n          next: 'pop'\n        }, {\n          token: ['punctuation.definition.escape.erlang', 'constant.other.symbol.escape.erlang', 'punctuation.definition.escape.erlang', 'constant.other.symbol.escape.erlang', 'constant.other.symbol.escape.erlang'],\n          regex: '(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))'\n        }, {\n          token: 'invalid.illegal.atom.erlang',\n          regex: '\\\\\\\\\\\\^?.?'\n        }, {\n          defaultToken: 'constant.other.symbol.quoted.single.erlang'\n        }]\n      }, {\n        token: 'constant.other.symbol.unquoted.erlang',\n        regex: '[a-z][a-zA-Z\\\\d@_]*'\n      }],\n      '#behaviour-directive': [{\n        token: ['meta.directive.behaviour.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.behaviour.erlang', 'keyword.control.directive.behaviour.erlang', 'meta.directive.behaviour.erlang', 'punctuation.definition.parameters.begin.erlang', 'meta.directive.behaviour.erlang', 'entity.name.type.class.behaviour.definition.erlang', 'meta.directive.behaviour.erlang', 'punctuation.definition.parameters.end.erlang', 'meta.directive.behaviour.erlang', 'punctuation.section.directive.end.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(behaviour)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)'\n      }],\n      '#binary': [{\n        token: 'punctuation.definition.binary.begin.erlang',\n        regex: '<<',\n        push: [{\n          token: 'punctuation.definition.binary.end.erlang',\n          regex: '>>',\n          next: 'pop'\n        }, {\n          token: ['punctuation.separator.binary.erlang', 'punctuation.separator.value-size.erlang'],\n          regex: '(,)|(:)'\n        }, {\n          include: '#internal-type-specifiers'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.structure.binary.erlang'\n        }]\n      }],\n      '#character': [{\n        token: ['punctuation.definition.character.erlang', 'punctuation.definition.escape.erlang', 'constant.character.escape.erlang', 'punctuation.definition.escape.erlang', 'constant.character.escape.erlang', 'constant.character.escape.erlang'],\n        regex: '(\\\\$)(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))'\n      }, {\n        token: 'invalid.illegal.character.erlang',\n        regex: '\\\\$\\\\\\\\\\\\^?.?'\n      }, {\n        token: ['punctuation.definition.character.erlang', 'constant.character.erlang'],\n        regex: '(\\\\$)(\\\\S)'\n      }, {\n        token: 'invalid.illegal.character.erlang',\n        regex: '\\\\$.?'\n      }],\n      '#comment': [{\n        token: 'punctuation.definition.comment.erlang',\n        regex: '%.*$',\n        push_: [{\n          token: 'comment.line.percentage.erlang',\n          regex: '$',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.line.percentage.erlang'\n        }]\n      }],\n      '#define-directive': [{\n        token: ['meta.directive.define.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.define.erlang', 'keyword.control.directive.define.erlang', 'meta.directive.define.erlang', 'punctuation.definition.parameters.begin.erlang', 'meta.directive.define.erlang', 'entity.name.function.macro.definition.erlang', 'meta.directive.define.erlang', 'punctuation.separator.parameters.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(define)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(,)',\n        push: [{\n          token: ['punctuation.definition.parameters.end.erlang', 'meta.directive.define.erlang', 'punctuation.section.directive.end.erlang'],\n          regex: '(\\\\))(\\\\s*)(\\\\.)',\n          next: 'pop'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.directive.define.erlang'\n        }]\n      }, {\n        token: 'meta.directive.define.erlang',\n        regex: '(?=^\\\\s*-\\\\s*define\\\\s*\\\\(\\\\s*[a-zA-Z\\\\d@_]+\\\\s*\\\\()',\n        push: [{\n          token: ['punctuation.definition.parameters.end.erlang', 'meta.directive.define.erlang', 'punctuation.section.directive.end.erlang'],\n          regex: '(\\\\))(\\\\s*)(\\\\.)',\n          next: 'pop'\n        }, {\n          token: ['text', 'punctuation.section.directive.begin.erlang', 'text', 'keyword.control.directive.define.erlang', 'text', 'punctuation.definition.parameters.begin.erlang', 'text', 'entity.name.function.macro.definition.erlang', 'text', 'punctuation.definition.parameters.begin.erlang'],\n          regex: '^(\\\\s*)(-)(\\\\s*)(define)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\()',\n          push: [{\n            token: ['punctuation.definition.parameters.end.erlang', 'text', 'punctuation.separator.parameters.erlang'],\n            regex: '(\\\\))(\\\\s*)(,)',\n            next: 'pop'\n          }, {\n            token: 'punctuation.separator.parameters.erlang',\n            regex: ','\n          }, {\n            include: '#everything-else'\n          }]\n        }, {\n          token: 'punctuation.separator.define.erlang',\n          regex: '\\\\|\\\\||\\\\||:|;|,|\\\\.|->'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.directive.define.erlang'\n        }]\n      }],\n      '#directive': [{\n        token: ['meta.directive.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.erlang', 'keyword.control.directive.erlang', 'meta.directive.erlang', 'punctuation.definition.parameters.begin.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\(?)',\n        push: [{\n          token: ['punctuation.definition.parameters.end.erlang', 'meta.directive.erlang', 'punctuation.section.directive.end.erlang'],\n          regex: '(\\\\)?)(\\\\s*)(\\\\.)',\n          next: 'pop'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.directive.erlang'\n        }]\n      }, {\n        token: ['meta.directive.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.erlang', 'keyword.control.directive.erlang', 'meta.directive.erlang', 'punctuation.section.directive.end.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\.)'\n      }],\n      '#everything-else': [{\n        include: '#comment'\n      }, {\n        include: '#record-usage'\n      }, {\n        include: '#macro-usage'\n      }, {\n        include: '#expression'\n      }, {\n        include: '#keyword'\n      }, {\n        include: '#textual-operator'\n      }, {\n        include: '#function-call'\n      }, {\n        include: '#tuple'\n      }, {\n        include: '#list'\n      }, {\n        include: '#binary'\n      }, {\n        include: '#parenthesized-expression'\n      }, {\n        include: '#character'\n      }, {\n        include: '#number'\n      }, {\n        include: '#atom'\n      }, {\n        include: '#string'\n      }, {\n        include: '#symbolic-operator'\n      }, {\n        include: '#variable'\n      }],\n      '#expression': [{\n        token: 'keyword.control.if.erlang',\n        regex: '\\\\bif\\\\b',\n        push: [{\n          token: 'keyword.control.end.erlang',\n          regex: '\\\\bend\\\\b',\n          next: 'pop'\n        }, {\n          include: '#internal-expression-punctuation'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.expression.if.erlang'\n        }]\n      }, {\n        token: 'keyword.control.case.erlang',\n        regex: '\\\\bcase\\\\b',\n        push: [{\n          token: 'keyword.control.end.erlang',\n          regex: '\\\\bend\\\\b',\n          next: 'pop'\n        }, {\n          include: '#internal-expression-punctuation'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.expression.case.erlang'\n        }]\n      }, {\n        token: 'keyword.control.receive.erlang',\n        regex: '\\\\breceive\\\\b',\n        push: [{\n          token: 'keyword.control.end.erlang',\n          regex: '\\\\bend\\\\b',\n          next: 'pop'\n        }, {\n          include: '#internal-expression-punctuation'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.expression.receive.erlang'\n        }]\n      }, {\n        token: ['keyword.control.fun.erlang', 'text', 'entity.name.type.class.module.erlang', 'text', 'punctuation.separator.module-function.erlang', 'text', 'entity.name.function.erlang', 'text', 'punctuation.separator.function-arity.erlang'],\n        regex: '\\\\b(fun)(\\\\s*)(?:([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(:)(\\\\s*))?([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(/)'\n      }, {\n        token: 'keyword.control.fun.erlang',\n        regex: '\\\\bfun\\\\b',\n        push: [{\n          token: 'keyword.control.end.erlang',\n          regex: '\\\\bend\\\\b',\n          next: 'pop'\n        }, {\n          token: 'text',\n          regex: '(?=\\\\()',\n          push: [{\n            token: 'punctuation.separator.clauses.erlang',\n            regex: ';|(?=\\\\bend\\\\b)',\n            next: 'pop'\n          }, {\n            include: '#internal-function-parts'\n          }]\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.expression.fun.erlang'\n        }]\n      }, {\n        token: 'keyword.control.try.erlang',\n        regex: '\\\\btry\\\\b',\n        push: [{\n          token: 'keyword.control.end.erlang',\n          regex: '\\\\bend\\\\b',\n          next: 'pop'\n        }, {\n          include: '#internal-expression-punctuation'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.expression.try.erlang'\n        }]\n      }, {\n        token: 'keyword.control.begin.erlang',\n        regex: '\\\\bbegin\\\\b',\n        push: [{\n          token: 'keyword.control.end.erlang',\n          regex: '\\\\bend\\\\b',\n          next: 'pop'\n        }, {\n          include: '#internal-expression-punctuation'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.expression.begin.erlang'\n        }]\n      }, {\n        token: 'keyword.control.query.erlang',\n        regex: '\\\\bquery\\\\b',\n        push: [{\n          token: 'keyword.control.end.erlang',\n          regex: '\\\\bend\\\\b',\n          next: 'pop'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.expression.query.erlang'\n        }]\n      }],\n      '#function': [{\n        token: ['meta.function.erlang', 'entity.name.function.definition.erlang', 'meta.function.erlang'],\n        regex: '^(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(?=\\\\()',\n        push: [{\n          token: 'punctuation.terminator.function.erlang',\n          regex: '\\\\.',\n          next: 'pop'\n        }, {\n          token: ['text', 'entity.name.function.erlang', 'text'],\n          regex: '^(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(?=\\\\()'\n        }, {\n          token: 'text',\n          regex: '(?=\\\\()',\n          push: [{\n            token: 'punctuation.separator.clauses.erlang',\n            regex: ';|(?=\\\\.)',\n            next: 'pop'\n          }, {\n            include: '#parenthesized-expression'\n          }, {\n            include: '#internal-function-parts'\n          }]\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.function.erlang'\n        }]\n      }],\n      '#function-call': [{\n        token: 'meta.function-call.erlang',\n        regex: '(?=(?:[a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')\\\\s*(?:\\\\(|:\\\\s*(?:[a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')\\\\s*\\\\())',\n        push: [{\n          token: 'punctuation.definition.parameters.end.erlang',\n          regex: '\\\\)',\n          next: 'pop'\n        }, {\n          token: ['entity.name.type.class.module.erlang', 'text', 'punctuation.separator.module-function.erlang', 'text', 'entity.name.function.guard.erlang', 'text', 'punctuation.definition.parameters.begin.erlang'],\n          regex: '(?:(erlang)(\\\\s*)(:)(\\\\s*))?(is_atom|is_binary|is_constant|is_float|is_function|is_integer|is_list|is_number|is_pid|is_port|is_reference|is_tuple|is_record|abs|element|hd|length|node|round|self|size|tl|trunc)(\\\\s*)(\\\\()',\n          push: [{\n            token: 'text',\n            regex: '(?=\\\\))',\n            next: 'pop'\n          }, {\n            token: 'punctuation.separator.parameters.erlang',\n            regex: ','\n          }, {\n            include: '#everything-else'\n          }]\n        }, {\n          token: ['entity.name.type.class.module.erlang', 'text', 'punctuation.separator.module-function.erlang', 'text', 'entity.name.function.erlang', 'text', 'punctuation.definition.parameters.begin.erlang'],\n          regex: '(?:([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(:)(\\\\s*))?([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(\\\\()',\n          push: [{\n            token: 'text',\n            regex: '(?=\\\\))',\n            next: 'pop'\n          }, {\n            token: 'punctuation.separator.parameters.erlang',\n            regex: ','\n          }, {\n            include: '#everything-else'\n          }]\n        }, {\n          defaultToken: 'meta.function-call.erlang'\n        }]\n      }],\n      '#import-export-directive': [{\n        token: ['meta.directive.import.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.import.erlang', 'keyword.control.directive.import.erlang', 'meta.directive.import.erlang', 'punctuation.definition.parameters.begin.erlang', 'meta.directive.import.erlang', 'entity.name.type.class.module.erlang', 'meta.directive.import.erlang', 'punctuation.separator.parameters.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(import)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(,)',\n        push: [{\n          token: ['punctuation.definition.parameters.end.erlang', 'meta.directive.import.erlang', 'punctuation.section.directive.end.erlang'],\n          regex: '(\\\\))(\\\\s*)(\\\\.)',\n          next: 'pop'\n        }, {\n          include: '#internal-function-list'\n        }, {\n          defaultToken: 'meta.directive.import.erlang'\n        }]\n      }, {\n        token: ['meta.directive.export.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.export.erlang', 'keyword.control.directive.export.erlang', 'meta.directive.export.erlang', 'punctuation.definition.parameters.begin.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(export)(\\\\s*)(\\\\()',\n        push: [{\n          token: ['punctuation.definition.parameters.end.erlang', 'meta.directive.export.erlang', 'punctuation.section.directive.end.erlang'],\n          regex: '(\\\\))(\\\\s*)(\\\\.)',\n          next: 'pop'\n        }, {\n          include: '#internal-function-list'\n        }, {\n          defaultToken: 'meta.directive.export.erlang'\n        }]\n      }],\n      '#internal-expression-punctuation': [{\n        token: ['punctuation.separator.clause-head-body.erlang', 'punctuation.separator.clauses.erlang', 'punctuation.separator.expressions.erlang'],\n        regex: '(->)|(;)|(,)'\n      }],\n      '#internal-function-list': [{\n        token: 'punctuation.definition.list.begin.erlang',\n        regex: '\\\\[',\n        push: [{\n          token: 'punctuation.definition.list.end.erlang',\n          regex: '\\\\]',\n          next: 'pop'\n        }, {\n          token: ['entity.name.function.erlang', 'text', 'punctuation.separator.function-arity.erlang'],\n          regex: '([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(/)',\n          push: [{\n            token: 'punctuation.separator.list.erlang',\n            regex: ',|(?=\\\\])',\n            next: 'pop'\n          }, {\n            include: '#everything-else'\n          }]\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.structure.list.function.erlang'\n        }]\n      }],\n      '#internal-function-parts': [{\n        token: 'text',\n        regex: '(?=\\\\()',\n        push: [{\n          token: 'punctuation.separator.clause-head-body.erlang',\n          regex: '->',\n          next: 'pop'\n        }, {\n          token: 'punctuation.definition.parameters.begin.erlang',\n          regex: '\\\\(',\n          push: [{\n            token: 'punctuation.definition.parameters.end.erlang',\n            regex: '\\\\)',\n            next: 'pop'\n          }, {\n            token: 'punctuation.separator.parameters.erlang',\n            regex: ','\n          }, {\n            include: '#everything-else'\n          }]\n        }, {\n          token: 'punctuation.separator.guards.erlang',\n          regex: ',|;'\n        }, {\n          include: '#everything-else'\n        }]\n      }, {\n        token: 'punctuation.separator.expressions.erlang',\n        regex: ','\n      }, {\n        include: '#everything-else'\n      }],\n      '#internal-record-body': [{\n        token: 'punctuation.definition.class.record.begin.erlang',\n        regex: '\\\\{',\n        push: [{\n          token: 'meta.structure.record.erlang',\n          regex: '(?=\\\\})',\n          next: 'pop'\n        }, {\n          token: ['variable.other.field.erlang', 'variable.language.omitted.field.erlang', 'text', 'keyword.operator.assignment.erlang'],\n          regex: '(?:([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')|(_))(\\\\s*)(=|::)',\n          push: [{\n            token: 'punctuation.separator.class.record.erlang',\n            regex: ',|(?=\\\\})',\n            next: 'pop'\n          }, {\n            include: '#everything-else'\n          }]\n        }, {\n          token: ['variable.other.field.erlang', 'text', 'punctuation.separator.class.record.erlang'],\n          regex: '([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)((?:,)?)'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.structure.record.erlang'\n        }]\n      }],\n      '#internal-type-specifiers': [{\n        token: 'punctuation.separator.value-type.erlang',\n        regex: '/',\n        push: [{\n          token: 'text',\n          regex: '(?=,|:|>>)',\n          next: 'pop'\n        }, {\n          token: ['storage.type.erlang', 'storage.modifier.signedness.erlang', 'storage.modifier.endianness.erlang', 'storage.modifier.unit.erlang', 'punctuation.separator.type-specifiers.erlang'],\n          regex: '(integer|float|binary|bytes|bitstring|bits)|(signed|unsigned)|(big|little|native)|(unit)|(-)'\n        }]\n      }],\n      '#keyword': [{\n        token: 'keyword.control.erlang',\n        regex: '\\\\b(?:after|begin|case|catch|cond|end|fun|if|let|of|query|try|receive|when)\\\\b'\n      }],\n      '#list': [{\n        token: 'punctuation.definition.list.begin.erlang',\n        regex: '\\\\[',\n        push: [{\n          token: 'punctuation.definition.list.end.erlang',\n          regex: '\\\\]',\n          next: 'pop'\n        }, {\n          token: 'punctuation.separator.list.erlang',\n          regex: '\\\\||\\\\|\\\\||,'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.structure.list.erlang'\n        }]\n      }],\n      '#macro-directive': [{\n        token: ['meta.directive.ifdef.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.ifdef.erlang', 'keyword.control.directive.ifdef.erlang', 'meta.directive.ifdef.erlang', 'punctuation.definition.parameters.begin.erlang', 'meta.directive.ifdef.erlang', 'entity.name.function.macro.erlang', 'meta.directive.ifdef.erlang', 'punctuation.definition.parameters.end.erlang', 'meta.directive.ifdef.erlang', 'punctuation.section.directive.end.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(ifdef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)'\n      }, {\n        token: ['meta.directive.ifndef.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.ifndef.erlang', 'keyword.control.directive.ifndef.erlang', 'meta.directive.ifndef.erlang', 'punctuation.definition.parameters.begin.erlang', 'meta.directive.ifndef.erlang', 'entity.name.function.macro.erlang', 'meta.directive.ifndef.erlang', 'punctuation.definition.parameters.end.erlang', 'meta.directive.ifndef.erlang', 'punctuation.section.directive.end.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(ifndef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)'\n      }, {\n        token: ['meta.directive.undef.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.undef.erlang', 'keyword.control.directive.undef.erlang', 'meta.directive.undef.erlang', 'punctuation.definition.parameters.begin.erlang', 'meta.directive.undef.erlang', 'entity.name.function.macro.erlang', 'meta.directive.undef.erlang', 'punctuation.definition.parameters.end.erlang', 'meta.directive.undef.erlang', 'punctuation.section.directive.end.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(undef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)'\n      }],\n      '#macro-usage': [{\n        token: ['keyword.operator.macro.erlang', 'meta.macro-usage.erlang', 'entity.name.function.macro.erlang'],\n        regex: '(\\\\?\\\\??)(\\\\s*)([a-zA-Z\\\\d@_]+)'\n      }],\n      '#module-directive': [{\n        token: ['meta.directive.module.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.module.erlang', 'keyword.control.directive.module.erlang', 'meta.directive.module.erlang', 'punctuation.definition.parameters.begin.erlang', 'meta.directive.module.erlang', 'entity.name.type.class.module.definition.erlang', 'meta.directive.module.erlang', 'punctuation.definition.parameters.end.erlang', 'meta.directive.module.erlang', 'punctuation.section.directive.end.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(module)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)'\n      }],\n      '#number': [{\n        token: 'text',\n        regex: '(?=\\\\d)',\n        push: [{\n          token: 'text',\n          regex: '(?!\\\\d)',\n          next: 'pop'\n        }, {\n          token: ['constant.numeric.float.erlang', 'punctuation.separator.integer-float.erlang', 'constant.numeric.float.erlang', 'punctuation.separator.float-exponent.erlang'],\n          regex: '(\\\\d+)(\\\\.)(\\\\d+)((?:[eE][\\\\+\\\\-]?\\\\d+)?)'\n        }, {\n          token: ['constant.numeric.integer.binary.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.binary.erlang'],\n          regex: '(2)(#)([0-1]+)'\n        }, {\n          token: ['constant.numeric.integer.base-3.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-3.erlang'],\n          regex: '(3)(#)([0-2]+)'\n        }, {\n          token: ['constant.numeric.integer.base-4.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-4.erlang'],\n          regex: '(4)(#)([0-3]+)'\n        }, {\n          token: ['constant.numeric.integer.base-5.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-5.erlang'],\n          regex: '(5)(#)([0-4]+)'\n        }, {\n          token: ['constant.numeric.integer.base-6.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-6.erlang'],\n          regex: '(6)(#)([0-5]+)'\n        }, {\n          token: ['constant.numeric.integer.base-7.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-7.erlang'],\n          regex: '(7)(#)([0-6]+)'\n        }, {\n          token: ['constant.numeric.integer.octal.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.octal.erlang'],\n          regex: '(8)(#)([0-7]+)'\n        }, {\n          token: ['constant.numeric.integer.base-9.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-9.erlang'],\n          regex: '(9)(#)([0-8]+)'\n        }, {\n          token: ['constant.numeric.integer.decimal.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.decimal.erlang'],\n          regex: '(10)(#)(\\\\d+)'\n        }, {\n          token: ['constant.numeric.integer.base-11.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-11.erlang'],\n          regex: '(11)(#)([\\\\daA]+)'\n        }, {\n          token: ['constant.numeric.integer.base-12.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-12.erlang'],\n          regex: '(12)(#)([\\\\da-bA-B]+)'\n        }, {\n          token: ['constant.numeric.integer.base-13.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-13.erlang'],\n          regex: '(13)(#)([\\\\da-cA-C]+)'\n        }, {\n          token: ['constant.numeric.integer.base-14.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-14.erlang'],\n          regex: '(14)(#)([\\\\da-dA-D]+)'\n        }, {\n          token: ['constant.numeric.integer.base-15.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-15.erlang'],\n          regex: '(15)(#)([\\\\da-eA-E]+)'\n        }, {\n          token: ['constant.numeric.integer.hexadecimal.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.hexadecimal.erlang'],\n          regex: '(16)(#)([\\\\da-fA-F]+)'\n        }, {\n          token: ['constant.numeric.integer.base-17.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-17.erlang'],\n          regex: '(17)(#)([\\\\da-gA-G]+)'\n        }, {\n          token: ['constant.numeric.integer.base-18.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-18.erlang'],\n          regex: '(18)(#)([\\\\da-hA-H]+)'\n        }, {\n          token: ['constant.numeric.integer.base-19.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-19.erlang'],\n          regex: '(19)(#)([\\\\da-iA-I]+)'\n        }, {\n          token: ['constant.numeric.integer.base-20.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-20.erlang'],\n          regex: '(20)(#)([\\\\da-jA-J]+)'\n        }, {\n          token: ['constant.numeric.integer.base-21.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-21.erlang'],\n          regex: '(21)(#)([\\\\da-kA-K]+)'\n        }, {\n          token: ['constant.numeric.integer.base-22.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-22.erlang'],\n          regex: '(22)(#)([\\\\da-lA-L]+)'\n        }, {\n          token: ['constant.numeric.integer.base-23.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-23.erlang'],\n          regex: '(23)(#)([\\\\da-mA-M]+)'\n        }, {\n          token: ['constant.numeric.integer.base-24.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-24.erlang'],\n          regex: '(24)(#)([\\\\da-nA-N]+)'\n        }, {\n          token: ['constant.numeric.integer.base-25.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-25.erlang'],\n          regex: '(25)(#)([\\\\da-oA-O]+)'\n        }, {\n          token: ['constant.numeric.integer.base-26.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-26.erlang'],\n          regex: '(26)(#)([\\\\da-pA-P]+)'\n        }, {\n          token: ['constant.numeric.integer.base-27.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-27.erlang'],\n          regex: '(27)(#)([\\\\da-qA-Q]+)'\n        }, {\n          token: ['constant.numeric.integer.base-28.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-28.erlang'],\n          regex: '(28)(#)([\\\\da-rA-R]+)'\n        }, {\n          token: ['constant.numeric.integer.base-29.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-29.erlang'],\n          regex: '(29)(#)([\\\\da-sA-S]+)'\n        }, {\n          token: ['constant.numeric.integer.base-30.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-30.erlang'],\n          regex: '(30)(#)([\\\\da-tA-T]+)'\n        }, {\n          token: ['constant.numeric.integer.base-31.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-31.erlang'],\n          regex: '(31)(#)([\\\\da-uA-U]+)'\n        }, {\n          token: ['constant.numeric.integer.base-32.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-32.erlang'],\n          regex: '(32)(#)([\\\\da-vA-V]+)'\n        }, {\n          token: ['constant.numeric.integer.base-33.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-33.erlang'],\n          regex: '(33)(#)([\\\\da-wA-W]+)'\n        }, {\n          token: ['constant.numeric.integer.base-34.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-34.erlang'],\n          regex: '(34)(#)([\\\\da-xA-X]+)'\n        }, {\n          token: ['constant.numeric.integer.base-35.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-35.erlang'],\n          regex: '(35)(#)([\\\\da-yA-Y]+)'\n        }, {\n          token: ['constant.numeric.integer.base-36.erlang', 'punctuation.separator.base-integer.erlang', 'constant.numeric.integer.base-36.erlang'],\n          regex: '(36)(#)([\\\\da-zA-Z]+)'\n        }, {\n          token: 'invalid.illegal.integer.erlang',\n          regex: '\\\\d+#[\\\\da-zA-Z]+'\n        }, {\n          token: 'constant.numeric.integer.decimal.erlang',\n          regex: '\\\\d+'\n        }]\n      }],\n      '#parenthesized-expression': [{\n        token: 'punctuation.section.expression.begin.erlang',\n        regex: '\\\\(',\n        push: [{\n          token: 'punctuation.section.expression.end.erlang',\n          regex: '\\\\)',\n          next: 'pop'\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.expression.parenthesized'\n        }]\n      }],\n      '#record-directive': [{\n        token: ['meta.directive.record.erlang', 'punctuation.section.directive.begin.erlang', 'meta.directive.record.erlang', 'keyword.control.directive.import.erlang', 'meta.directive.record.erlang', 'punctuation.definition.parameters.begin.erlang', 'meta.directive.record.erlang', 'entity.name.type.class.record.definition.erlang', 'meta.directive.record.erlang', 'punctuation.separator.parameters.erlang'],\n        regex: '^(\\\\s*)(-)(\\\\s*)(record)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(,)',\n        push: [{\n          token: ['punctuation.definition.class.record.end.erlang', 'meta.directive.record.erlang', 'punctuation.definition.parameters.end.erlang', 'meta.directive.record.erlang', 'punctuation.section.directive.end.erlang'],\n          regex: '(\\\\})(\\\\s*)(\\\\))(\\\\s*)(\\\\.)',\n          next: 'pop'\n        }, {\n          include: '#internal-record-body'\n        }, {\n          defaultToken: 'meta.directive.record.erlang'\n        }]\n      }],\n      '#record-usage': [{\n        token: ['keyword.operator.record.erlang', 'meta.record-usage.erlang', 'entity.name.type.class.record.erlang', 'meta.record-usage.erlang', 'punctuation.separator.record-field.erlang', 'meta.record-usage.erlang', 'variable.other.field.erlang'],\n        regex: '(#)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(\\\\.)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')'\n      }, {\n        token: ['keyword.operator.record.erlang', 'meta.record-usage.erlang', 'entity.name.type.class.record.erlang'],\n        regex: '(#)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')',\n        push: [{\n          token: 'punctuation.definition.class.record.end.erlang',\n          regex: '\\\\}',\n          next: 'pop'\n        }, {\n          include: '#internal-record-body'\n        }, {\n          defaultToken: 'meta.record-usage.erlang'\n        }]\n      }],\n      '#string': [{\n        token: 'punctuation.definition.string.begin.erlang',\n        regex: '\"',\n        push: [{\n          token: 'punctuation.definition.string.end.erlang',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          token: ['punctuation.definition.escape.erlang', 'constant.character.escape.erlang', 'punctuation.definition.escape.erlang', 'constant.character.escape.erlang', 'constant.character.escape.erlang'],\n          regex: '(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))'\n        }, {\n          token: 'invalid.illegal.string.erlang',\n          regex: '\\\\\\\\\\\\^?.?'\n        }, {\n          token: ['punctuation.definition.placeholder.erlang', 'punctuation.separator.placeholder-parts.erlang', 'constant.other.placeholder.erlang', 'punctuation.separator.placeholder-parts.erlang', 'punctuation.separator.placeholder-parts.erlang', 'constant.other.placeholder.erlang', 'punctuation.separator.placeholder-parts.erlang', 'punctuation.separator.placeholder-parts.erlang', 'punctuation.separator.placeholder-parts.erlang', 'constant.other.placeholder.erlang', 'constant.other.placeholder.erlang'],\n          regex: '(~)(?:((?:\\\\-)?)(\\\\d+)|(\\\\*))?(?:(\\\\.)(?:(\\\\d+)|(\\\\*)))?(?:(\\\\.)(?:(\\\\*)|(.)))?([~cfegswpWPBX#bx\\\\+ni])'\n        }, {\n          token: ['punctuation.definition.placeholder.erlang', 'punctuation.separator.placeholder-parts.erlang', 'constant.other.placeholder.erlang', 'constant.other.placeholder.erlang'],\n          regex: '(~)((?:\\\\*)?)((?:\\\\d+)?)([~du\\\\-#fsacl])'\n        }, {\n          token: 'invalid.illegal.string.erlang',\n          regex: '~.?'\n        }, {\n          defaultToken: 'string.quoted.double.erlang'\n        }]\n      }],\n      '#symbolic-operator': [{\n        token: 'keyword.operator.symbolic.erlang',\n        regex: '\\\\+\\\\+|\\\\+|--|-|\\\\*|/=|/|=/=|=:=|==|=<|=|<-|<|>=|>|!|::'\n      }],\n      '#textual-operator': [{\n        token: 'keyword.operator.textual.erlang',\n        regex: '\\\\b(?:andalso|band|and|bxor|xor|bor|orelse|or|bnot|not|bsl|bsr|div|rem)\\\\b'\n      }],\n      '#tuple': [{\n        token: 'punctuation.definition.tuple.begin.erlang',\n        regex: '\\\\{',\n        push: [{\n          token: 'punctuation.definition.tuple.end.erlang',\n          regex: '\\\\}',\n          next: 'pop'\n        }, {\n          token: 'punctuation.separator.tuple.erlang',\n          regex: ','\n        }, {\n          include: '#everything-else'\n        }, {\n          defaultToken: 'meta.structure.tuple.erlang'\n        }]\n      }],\n      '#variable': [{\n        token: ['variable.other.erlang', 'variable.language.omitted.erlang'],\n        regex: '(_[a-zA-Z\\\\d@_]+|[A-Z][a-zA-Z\\\\d@_]*)|(_)'\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  ErlangHighlightRules.metaData = {\n    comment: 'The recognition of function definitions and compiler directives (such as module, record and macro definitions) requires that each of the aforementioned constructs must be the first string inside a line (except for whitespace).  Also, the function/module/record/macro names must be given unquoted.  -- desp',\n    fileTypes: ['erl', 'hrl'],\n    keyEquivalent: '^~E',\n    name: 'Erlang',\n    scopeName: 'source.erlang'\n  };\n  oop.inherits(ErlangHighlightRules, TextHighlightRules);\n  exports.ErlangHighlightRules = ErlangHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/erlang\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/erlang_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var ErlangHighlightRules = require(\"./erlang_highlight_rules\").ErlangHighlightRules;\n\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function () {\n    this.HighlightRules = ErlangHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"%\";\n    this.blockComment = null;\n    this.$id = \"ace/mode/erlang\";\n    this.snippetFileId = \"ace/snippets/erlang\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/erlang\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["C:/Users/akash/Desktop/Project/React/SyntaxMeets/frontend/syntaxmeets/node_modules/ace-builds/src-noconflict/mode-erlang.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","ErlangHighlightRules","$rules","start","include","token","regex","push","next","defaultToken","push_","normalizeRules","metaData","comment","fileTypes","keyEquivalent","name","scopeName","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","$id","snippetFileId"],"mappings":"AAAAA,GAAG,CAACC,MAAJ,CAAW,iCAAX,EAA6C,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,EAA8B,aAA9B,EAA4C,+BAA5C,CAA7C,EAA2H,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AAC9J;;AAEA,MAAIC,GAAG,GAAGH,OAAO,CAAC,YAAD,CAAjB;;AACA,MAAII,kBAAkB,GAAGJ,OAAO,CAAC,wBAAD,CAAP,CAAkCI,kBAA3D;;AAEA,MAAIC,oBAAoB,GAAG,YAAW;AAElC,SAAKC,MAAL,GAAc;AAAEC,MAAAA,KAAK,EAClB,CAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAF,EACE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OADF,EAEE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAFF,EAGE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAHF,EAIE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAJF,EAKE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OALF,EAME;AAAEA,QAAAA,OAAO,EAAE;AAAX,OANF,EAOE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAPF,EAQE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OARF,CADW;AAUZ,eACC,CAAE;AAAEC,QAAAA,KAAK,EAAE,4CAAT;AACEC,QAAAA,KAAK,EAAE,IADT;AAEEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EAAE,0CAAT;AACEC,UAAAA,KAAK,EAAE,IADT;AAEEE,UAAAA,IAAI,EAAE;AAFR,SAAF,EAGE;AAAEH,UAAAA,KAAK,EACJ,CAAE,sCAAF,EACE,qCADF,EAEE,sCAFF,EAGE,qCAHF,EAIE,qCAJF,CADH;AAMEC,UAAAA,KAAK,EAAE;AANT,SAHF,EAUE;AAAED,UAAAA,KAAK,EAAE,6BAAT;AAAwCC,UAAAA,KAAK,EAAE;AAA/C,SAVF,EAWE;AAAEG,UAAAA,YAAY,EAAE;AAAhB,SAXF;AAHH,OAAF,EAeE;AAAEJ,QAAAA,KAAK,EAAE,uCAAT;AACEC,QAAAA,KAAK,EAAE;AADT,OAfF,CAXW;AA4BZ,8BACC,CAAE;AAAED,QAAAA,KAAK,EACJ,CAAE,iCAAF,EACE,4CADF,EAEE,iCAFF,EAGE,4CAHF,EAIE,iCAJF,EAKE,gDALF,EAME,iCANF,EAOE,oDAPF,EAQE,iCARF,EASE,8CATF,EAUE,iCAVF,EAWE,0CAXF,CADH;AAaEC,QAAAA,KAAK,EAAE;AAbT,OAAF,CA7BW;AA2CZ,iBACC,CAAE;AAAED,QAAAA,KAAK,EAAE,4CAAT;AACEC,QAAAA,KAAK,EAAE,IADT;AAEEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EAAE,0CAAT;AACEC,UAAAA,KAAK,EAAE,IADT;AAEEE,UAAAA,IAAI,EAAE;AAFR,SAAF,EAGE;AAAEH,UAAAA,KAAK,EACJ,CAAE,qCAAF,EACE,yCADF,CADH;AAGEC,UAAAA,KAAK,EAAE;AAHT,SAHF,EAOE;AAAEF,UAAAA,OAAO,EAAE;AAAX,SAPF,EAQE;AAAEA,UAAAA,OAAO,EAAE;AAAX,SARF,EASE;AAAEK,UAAAA,YAAY,EAAE;AAAhB,SATF;AAHH,OAAF,CA5CW;AAyDZ,oBACC,CAAE;AAAEJ,QAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,sCADF,EAEE,kCAFF,EAGE,sCAHF,EAIE,kCAJF,EAKE,kCALF,CADH;AAOEC,QAAAA,KAAK,EAAE;AAPT,OAAF,EAQE;AAAED,QAAAA,KAAK,EAAE,kCAAT;AACEC,QAAAA,KAAK,EAAE;AADT,OARF,EAUE;AAAED,QAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2BADF,CADH;AAGEC,QAAAA,KAAK,EAAE;AAHT,OAVF,EAcE;AAAED,QAAAA,KAAK,EAAE,kCAAT;AAA6CC,QAAAA,KAAK,EAAE;AAApD,OAdF,CA1DW;AAyEZ,kBACC,CAAE;AAAED,QAAAA,KAAK,EAAE,uCAAT;AACEC,QAAAA,KAAK,EAAE,MADT;AAEEI,QAAAA,KAAK,EACJ,CAAE;AAAEL,UAAAA,KAAK,EAAE,gCAAT;AACEC,UAAAA,KAAK,EAAE,GADT;AAEEE,UAAAA,IAAI,EAAE;AAFR,SAAF,EAGE;AAAEC,UAAAA,YAAY,EAAE;AAAhB,SAHF;AAHH,OAAF,CA1EW;AAiFZ,2BACC,CAAE;AAAEJ,QAAAA,KAAK,EACJ,CAAE,8BAAF,EACE,4CADF,EAEE,8BAFF,EAGE,yCAHF,EAIE,8BAJF,EAKE,gDALF,EAME,8BANF,EAOE,8CAPF,EAQE,8BARF,EASE,yCATF,CADH;AAWEC,QAAAA,KAAK,EAAE,oEAXT;AAYEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EACJ,CAAE,8CAAF,EACE,8BADF,EAEE,0CAFF,CADH;AAIEC,UAAAA,KAAK,EAAE,kBAJT;AAKEE,UAAAA,IAAI,EAAE;AALR,SAAF,EAME;AAAEJ,UAAAA,OAAO,EAAE;AAAX,SANF,EAOE;AAAEK,UAAAA,YAAY,EAAE;AAAhB,SAPF;AAbH,OAAF,EAqBE;AAAEJ,QAAAA,KAAK,EAAE,8BAAT;AACEC,QAAAA,KAAK,EAAE,sDADT;AAEEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EACJ,CAAE,8CAAF,EACE,8BADF,EAEE,0CAFF,CADH;AAIEC,UAAAA,KAAK,EAAE,kBAJT;AAKEE,UAAAA,IAAI,EAAE;AALR,SAAF,EAME;AAAEH,UAAAA,KAAK,EACJ,CAAE,MAAF,EACE,4CADF,EAEE,MAFF,EAGE,yCAHF,EAIE,MAJF,EAKE,gDALF,EAME,MANF,EAOE,8CAPF,EAQE,MARF,EASE,gDATF,CADH;AAWEC,UAAAA,KAAK,EAAE,sEAXT;AAYEC,UAAAA,IAAI,EACH,CAAE;AAAEF,YAAAA,KAAK,EACJ,CAAE,8CAAF,EACE,MADF,EAEE,yCAFF,CADH;AAIEC,YAAAA,KAAK,EAAE,gBAJT;AAKEE,YAAAA,IAAI,EAAE;AALR,WAAF,EAME;AAAEH,YAAAA,KAAK,EAAE,yCAAT;AAAoDC,YAAAA,KAAK,EAAE;AAA3D,WANF,EAOE;AAAEF,YAAAA,OAAO,EAAE;AAAX,WAPF;AAbH,SANF,EA2BE;AAAEC,UAAAA,KAAK,EAAE,qCAAT;AACEC,UAAAA,KAAK,EAAE;AADT,SA3BF,EA6BE;AAAEF,UAAAA,OAAO,EAAE;AAAX,SA7BF,EA8BE;AAAEK,UAAAA,YAAY,EAAE;AAAhB,SA9BF;AAHH,OArBF,CAlFW;AAyIZ,oBACC,CAAE;AAAEJ,QAAAA,KAAK,EACJ,CAAE,uBAAF,EACE,4CADF,EAEE,uBAFF,EAGE,kCAHF,EAIE,uBAJF,EAKE,gDALF,CADH;AAOEC,QAAAA,KAAK,EAAE,mDAPT;AAQEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EACJ,CAAE,8CAAF,EACE,uBADF,EAEE,0CAFF,CADH;AAIEC,UAAAA,KAAK,EAAE,mBAJT;AAKEE,UAAAA,IAAI,EAAE;AALR,SAAF,EAME;AAAEJ,UAAAA,OAAO,EAAE;AAAX,SANF,EAOE;AAAEK,UAAAA,YAAY,EAAE;AAAhB,SAPF;AATH,OAAF,EAiBE;AAAEJ,QAAAA,KAAK,EACJ,CAAE,uBAAF,EACE,4CADF,EAEE,uBAFF,EAGE,kCAHF,EAIE,uBAJF,EAKE,0CALF,CADH;AAOEC,QAAAA,KAAK,EAAE;AAPT,OAjBF,CA1IW;AAmKZ,0BACC,CAAE;AAAEF,QAAAA,OAAO,EAAE;AAAX,OAAF,EACE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OADF,EAEE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAFF,EAGE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAHF,EAIE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAJF,EAKE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OALF,EAME;AAAEA,QAAAA,OAAO,EAAE;AAAX,OANF,EAOE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAPF,EAQE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OARF,EASE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OATF,EAUE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAVF,EAWE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAXF,EAYE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAZF,EAaE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAbF,EAcE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAdF,EAeE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAfF,EAgBE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAhBF,CApKW;AAqLZ,qBACC,CAAE;AAAEC,QAAAA,KAAK,EAAE,2BAAT;AACEC,QAAAA,KAAK,EAAE,UADT;AAEEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EAAE,4BAAT;AACEC,UAAAA,KAAK,EAAE,WADT;AAEEE,UAAAA,IAAI,EAAE;AAFR,SAAF,EAGE;AAAEJ,UAAAA,OAAO,EAAE;AAAX,SAHF,EAIE;AAAEA,UAAAA,OAAO,EAAE;AAAX,SAJF,EAKE;AAAEK,UAAAA,YAAY,EAAE;AAAhB,SALF;AAHH,OAAF,EASE;AAAEJ,QAAAA,KAAK,EAAE,6BAAT;AACEC,QAAAA,KAAK,EAAE,YADT;AAEEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EAAE,4BAAT;AACEC,UAAAA,KAAK,EAAE,WADT;AAEEE,UAAAA,IAAI,EAAE;AAFR,SAAF,EAGE;AAAEJ,UAAAA,OAAO,EAAE;AAAX,SAHF,EAIE;AAAEA,UAAAA,OAAO,EAAE;AAAX,SAJF,EAKE;AAAEK,UAAAA,YAAY,EAAE;AAAhB,SALF;AAHH,OATF,EAkBE;AAAEJ,QAAAA,KAAK,EAAE,gCAAT;AACEC,QAAAA,KAAK,EAAE,eADT;AAEEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EAAE,4BAAT;AACEC,UAAAA,KAAK,EAAE,WADT;AAEEE,UAAAA,IAAI,EAAE;AAFR,SAAF,EAGE;AAAEJ,UAAAA,OAAO,EAAE;AAAX,SAHF,EAIE;AAAEA,UAAAA,OAAO,EAAE;AAAX,SAJF,EAKE;AAAEK,UAAAA,YAAY,EAAE;AAAhB,SALF;AAHH,OAlBF,EA2BE;AAAEJ,QAAAA,KAAK,EACJ,CAAE,4BAAF,EACE,MADF,EAEE,sCAFF,EAGE,MAHF,EAIE,8CAJF,EAKE,MALF,EAME,6BANF,EAOE,MAPF,EAQE,6CARF,CADH;AAUEC,QAAAA,KAAK,EAAE;AAVT,OA3BF,EAsCE;AAAED,QAAAA,KAAK,EAAE,4BAAT;AACEC,QAAAA,KAAK,EAAE,WADT;AAEEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EAAE,4BAAT;AACEC,UAAAA,KAAK,EAAE,WADT;AAEEE,UAAAA,IAAI,EAAE;AAFR,SAAF,EAGE;AAAEH,UAAAA,KAAK,EAAE,MAAT;AACEC,UAAAA,KAAK,EAAE,SADT;AAEEC,UAAAA,IAAI,EACH,CAAE;AAAEF,YAAAA,KAAK,EAAE,sCAAT;AACEC,YAAAA,KAAK,EAAE,iBADT;AAEEE,YAAAA,IAAI,EAAE;AAFR,WAAF,EAGE;AAAEJ,YAAAA,OAAO,EAAE;AAAX,WAHF;AAHH,SAHF,EAUE;AAAEA,UAAAA,OAAO,EAAE;AAAX,SAVF,EAWE;AAAEK,UAAAA,YAAY,EAAE;AAAhB,SAXF;AAHH,OAtCF,EAqDE;AAAEJ,QAAAA,KAAK,EAAE,4BAAT;AACEC,QAAAA,KAAK,EAAE,WADT;AAEEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EAAE,4BAAT;AACEC,UAAAA,KAAK,EAAE,WADT;AAEEE,UAAAA,IAAI,EAAE;AAFR,SAAF,EAGE;AAAEJ,UAAAA,OAAO,EAAE;AAAX,SAHF,EAIE;AAAEA,UAAAA,OAAO,EAAE;AAAX,SAJF,EAKE;AAAEK,UAAAA,YAAY,EAAE;AAAhB,SALF;AAHH,OArDF,EA8DE;AAAEJ,QAAAA,KAAK,EAAE,8BAAT;AACEC,QAAAA,KAAK,EAAE,aADT;AAEEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EAAE,4BAAT;AACEC,UAAAA,KAAK,EAAE,WADT;AAEEE,UAAAA,IAAI,EAAE;AAFR,SAAF,EAGE;AAAEJ,UAAAA,OAAO,EAAE;AAAX,SAHF,EAIE;AAAEA,UAAAA,OAAO,EAAE;AAAX,SAJF,EAKE;AAAEK,UAAAA,YAAY,EAAE;AAAhB,SALF;AAHH,OA9DF,EAuEE;AAAEJ,QAAAA,KAAK,EAAE,8BAAT;AACEC,QAAAA,KAAK,EAAE,aADT;AAEEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EAAE,4BAAT;AACEC,UAAAA,KAAK,EAAE,WADT;AAEEE,UAAAA,IAAI,EAAE;AAFR,SAAF,EAGE;AAAEJ,UAAAA,OAAO,EAAE;AAAX,SAHF,EAIE;AAAEK,UAAAA,YAAY,EAAE;AAAhB,SAJF;AAHH,OAvEF,CAtLW;AAqQZ,mBACC,CAAE;AAAEJ,QAAAA,KAAK,EACJ,CAAE,sBAAF,EACE,wCADF,EAEE,sBAFF,CADH;AAIEC,QAAAA,KAAK,EAAE,sDAJT;AAKEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EAAE,wCAAT;AACEC,UAAAA,KAAK,EAAE,KADT;AAEEE,UAAAA,IAAI,EAAE;AAFR,SAAF,EAGE;AAAEH,UAAAA,KAAK,EAAE,CAAE,MAAF,EAAU,6BAAV,EAAyC,MAAzC,CAAT;AACEC,UAAAA,KAAK,EAAE;AADT,SAHF,EAKE;AAAED,UAAAA,KAAK,EAAE,MAAT;AACEC,UAAAA,KAAK,EAAE,SADT;AAEEC,UAAAA,IAAI,EACH,CAAE;AAAEF,YAAAA,KAAK,EAAE,sCAAT;AACEC,YAAAA,KAAK,EAAE,WADT;AAEEE,YAAAA,IAAI,EAAE;AAFR,WAAF,EAGE;AAAEJ,YAAAA,OAAO,EAAE;AAAX,WAHF,EAIE;AAAEA,YAAAA,OAAO,EAAE;AAAX,WAJF;AAHH,SALF,EAaE;AAAEA,UAAAA,OAAO,EAAE;AAAX,SAbF,EAcE;AAAEK,UAAAA,YAAY,EAAE;AAAhB,SAdF;AANH,OAAF,CAtQW;AA2RZ,wBACC,CAAE;AAAEJ,QAAAA,KAAK,EAAE,2BAAT;AACEC,QAAAA,KAAK,EAAE,kGADT;AAEEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EAAE,8CAAT;AACEC,UAAAA,KAAK,EAAE,KADT;AAEEE,UAAAA,IAAI,EAAE;AAFR,SAAF,EAGE;AAAEH,UAAAA,KAAK,EACJ,CAAE,sCAAF,EACE,MADF,EAEE,8CAFF,EAGE,MAHF,EAIE,mCAJF,EAKE,MALF,EAME,gDANF,CADH;AAQEC,UAAAA,KAAK,EAAE,6NART;AASEC,UAAAA,IAAI,EACH,CAAE;AAAEF,YAAAA,KAAK,EAAE,MAAT;AAAiBC,YAAAA,KAAK,EAAE,SAAxB;AAAmCE,YAAAA,IAAI,EAAE;AAAzC,WAAF,EACE;AAAEH,YAAAA,KAAK,EAAE,yCAAT;AAAoDC,YAAAA,KAAK,EAAE;AAA3D,WADF,EAEE;AAAEF,YAAAA,OAAO,EAAE;AAAX,WAFF;AAVH,SAHF,EAgBE;AAAEC,UAAAA,KAAK,EACJ,CAAE,sCAAF,EACE,MADF,EAEE,8CAFF,EAGE,MAHF,EAIE,6BAJF,EAKE,MALF,EAME,gDANF,CADH;AAQEC,UAAAA,KAAK,EAAE,iGART;AASEC,UAAAA,IAAI,EACH,CAAE;AAAEF,YAAAA,KAAK,EAAE,MAAT;AAAiBC,YAAAA,KAAK,EAAE,SAAxB;AAAmCE,YAAAA,IAAI,EAAE;AAAzC,WAAF,EACE;AAAEH,YAAAA,KAAK,EAAE,yCAAT;AAAoDC,YAAAA,KAAK,EAAE;AAA3D,WADF,EAEE;AAAEF,YAAAA,OAAO,EAAE;AAAX,WAFF;AAVH,SAhBF,EA6BE;AAAEK,UAAAA,YAAY,EAAE;AAAhB,SA7BF;AAHH,OAAF,CA5RW;AA6TZ,kCACC,CAAE;AAAEJ,QAAAA,KAAK,EACJ,CAAE,8BAAF,EACE,4CADF,EAEE,8BAFF,EAGE,yCAHF,EAIE,8BAJF,EAKE,gDALF,EAME,8BANF,EAOE,sCAPF,EAQE,8BARF,EASE,yCATF,CADH;AAWEC,QAAAA,KAAK,EAAE,oFAXT;AAYEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EACJ,CAAE,8CAAF,EACE,8BADF,EAEE,0CAFF,CADH;AAIEC,UAAAA,KAAK,EAAE,kBAJT;AAKEE,UAAAA,IAAI,EAAE;AALR,SAAF,EAME;AAAEJ,UAAAA,OAAO,EAAE;AAAX,SANF,EAOE;AAAEK,UAAAA,YAAY,EAAE;AAAhB,SAPF;AAbH,OAAF,EAqBE;AAAEJ,QAAAA,KAAK,EACJ,CAAE,8BAAF,EACE,4CADF,EAEE,8BAFF,EAGE,yCAHF,EAIE,8BAJF,EAKE,gDALF,CADH;AAOEC,QAAAA,KAAK,EAAE,qCAPT;AAQEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EACJ,CAAE,8CAAF,EACE,8BADF,EAEE,0CAFF,CADH;AAIEC,UAAAA,KAAK,EAAE,kBAJT;AAKEE,UAAAA,IAAI,EAAE;AALR,SAAF,EAME;AAAEJ,UAAAA,OAAO,EAAE;AAAX,SANF,EAOE;AAAEK,UAAAA,YAAY,EAAE;AAAhB,SAPF;AATH,OArBF,CA9TW;AAoWZ,0CACC,CAAE;AAAEJ,QAAAA,KAAK,EACJ,CAAE,+CAAF,EACE,sCADF,EAEE,0CAFF,CADH;AAIEC,QAAAA,KAAK,EAAE;AAJT,OAAF,CArWW;AA0WZ,iCACC,CAAE;AAAED,QAAAA,KAAK,EAAE,0CAAT;AACEC,QAAAA,KAAK,EAAE,KADT;AAEEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EAAE,wCAAT;AACEC,UAAAA,KAAK,EAAE,KADT;AAEEE,UAAAA,IAAI,EAAE;AAFR,SAAF,EAGE;AAAEH,UAAAA,KAAK,EACJ,CAAE,6BAAF,EACE,MADF,EAEE,6CAFF,CADH;AAIEC,UAAAA,KAAK,EAAE,2CAJT;AAKEC,UAAAA,IAAI,EACH,CAAE;AAAEF,YAAAA,KAAK,EAAE,mCAAT;AACEC,YAAAA,KAAK,EAAE,WADT;AAEEE,YAAAA,IAAI,EAAE;AAFR,WAAF,EAGE;AAAEJ,YAAAA,OAAO,EAAE;AAAX,WAHF;AANH,SAHF,EAaE;AAAEA,UAAAA,OAAO,EAAE;AAAX,SAbF,EAcE;AAAEK,UAAAA,YAAY,EAAE;AAAhB,SAdF;AAHH,OAAF,CA3WW;AA6XZ,kCACC,CAAE;AAAEJ,QAAAA,KAAK,EAAE,MAAT;AACEC,QAAAA,KAAK,EAAE,SADT;AAEEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EAAE,+CAAT;AACEC,UAAAA,KAAK,EAAE,IADT;AAEEE,UAAAA,IAAI,EAAE;AAFR,SAAF,EAGE;AAAEH,UAAAA,KAAK,EAAE,gDAAT;AACEC,UAAAA,KAAK,EAAE,KADT;AAEEC,UAAAA,IAAI,EACH,CAAE;AAAEF,YAAAA,KAAK,EAAE,8CAAT;AACEC,YAAAA,KAAK,EAAE,KADT;AAEEE,YAAAA,IAAI,EAAE;AAFR,WAAF,EAGE;AAAEH,YAAAA,KAAK,EAAE,yCAAT;AAAoDC,YAAAA,KAAK,EAAE;AAA3D,WAHF,EAIE;AAAEF,YAAAA,OAAO,EAAE;AAAX,WAJF;AAHH,SAHF,EAWE;AAAEC,UAAAA,KAAK,EAAE,qCAAT;AAAgDC,UAAAA,KAAK,EAAE;AAAvD,SAXF,EAYE;AAAEF,UAAAA,OAAO,EAAE;AAAX,SAZF;AAHH,OAAF,EAgBE;AAAEC,QAAAA,KAAK,EAAE,0CAAT;AACEC,QAAAA,KAAK,EAAE;AADT,OAhBF,EAkBE;AAAEF,QAAAA,OAAO,EAAE;AAAX,OAlBF,CA9XW;AAiZZ,+BACC,CAAE;AAAEC,QAAAA,KAAK,EAAE,kDAAT;AACEC,QAAAA,KAAK,EAAE,KADT;AAEEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EAAE,8BAAT;AACEC,UAAAA,KAAK,EAAE,SADT;AAEEE,UAAAA,IAAI,EAAE;AAFR,SAAF,EAGE;AAAEH,UAAAA,KAAK,EACJ,CAAE,6BAAF,EACE,wCADF,EAEE,MAFF,EAGE,oCAHF,CADH;AAKEC,UAAAA,KAAK,EAAE,sDALT;AAMEC,UAAAA,IAAI,EACH,CAAE;AAAEF,YAAAA,KAAK,EAAE,2CAAT;AACEC,YAAAA,KAAK,EAAE,WADT;AAEEE,YAAAA,IAAI,EAAE;AAFR,WAAF,EAGE;AAAEJ,YAAAA,OAAO,EAAE;AAAX,WAHF;AAPH,SAHF,EAcE;AAAEC,UAAAA,KAAK,EACJ,CAAE,6BAAF,EACE,MADF,EAEE,2CAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SAdF,EAmBE;AAAEF,UAAAA,OAAO,EAAE;AAAX,SAnBF,EAoBE;AAAEK,UAAAA,YAAY,EAAE;AAAhB,SApBF;AAHH,OAAF,CAlZW;AA0aZ,mCACC,CAAE;AAAEJ,QAAAA,KAAK,EAAE,yCAAT;AACEC,QAAAA,KAAK,EAAE,GADT;AAEEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EAAE,MAAT;AAAiBC,UAAAA,KAAK,EAAE,YAAxB;AAAsCE,UAAAA,IAAI,EAAE;AAA5C,SAAF,EACE;AAAEH,UAAAA,KAAK,EACJ,CAAE,qBAAF,EACE,oCADF,EAEE,oCAFF,EAGE,8BAHF,EAIE,8CAJF,CADH;AAMEC,UAAAA,KAAK,EAAE;AANT,SADF;AAHH,OAAF,CA3aW;AAsbZ,kBACC,CAAE;AAAED,QAAAA,KAAK,EAAE,wBAAT;AACEC,QAAAA,KAAK,EAAE;AADT,OAAF,CAvbW;AAybZ,eACC,CAAE;AAAED,QAAAA,KAAK,EAAE,0CAAT;AACEC,QAAAA,KAAK,EAAE,KADT;AAEEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EAAE,wCAAT;AACEC,UAAAA,KAAK,EAAE,KADT;AAEEE,UAAAA,IAAI,EAAE;AAFR,SAAF,EAGE;AAAEH,UAAAA,KAAK,EAAE,mCAAT;AACEC,UAAAA,KAAK,EAAE;AADT,SAHF,EAKE;AAAEF,UAAAA,OAAO,EAAE;AAAX,SALF,EAME;AAAEK,UAAAA,YAAY,EAAE;AAAhB,SANF;AAHH,OAAF,CA1bW;AAocZ,0BACC,CAAE;AAAEJ,QAAAA,KAAK,EACJ,CAAE,6BAAF,EACE,4CADF,EAEE,6BAFF,EAGE,wCAHF,EAIE,6BAJF,EAKE,gDALF,EAME,6BANF,EAOE,mCAPF,EAQE,6BARF,EASE,8CATF,EAUE,6BAVF,EAWE,0CAXF,CADH;AAaEC,QAAAA,KAAK,EAAE;AAbT,OAAF,EAcE;AAAED,QAAAA,KAAK,EACJ,CAAE,8BAAF,EACE,4CADF,EAEE,8BAFF,EAGE,yCAHF,EAIE,8BAJF,EAKE,gDALF,EAME,8BANF,EAOE,mCAPF,EAQE,8BARF,EASE,8CATF,EAUE,8BAVF,EAWE,0CAXF,CADH;AAaEC,QAAAA,KAAK,EAAE;AAbT,OAdF,EA4BE;AAAED,QAAAA,KAAK,EACJ,CAAE,6BAAF,EACE,4CADF,EAEE,6BAFF,EAGE,wCAHF,EAIE,6BAJF,EAKE,gDALF,EAME,6BANF,EAOE,mCAPF,EAQE,6BARF,EASE,8CATF,EAUE,6BAVF,EAWE,0CAXF,CADH;AAaEC,QAAAA,KAAK,EAAE;AAbT,OA5BF,CArcW;AA+eZ,sBACC,CAAE;AAAED,QAAAA,KAAK,EACJ,CAAE,+BAAF,EACE,yBADF,EAEE,mCAFF,CADH;AAIEC,QAAAA,KAAK,EAAE;AAJT,OAAF,CAhfW;AAqfZ,2BACC,CAAE;AAAED,QAAAA,KAAK,EACJ,CAAE,8BAAF,EACE,4CADF,EAEE,8BAFF,EAGE,yCAHF,EAIE,8BAJF,EAKE,gDALF,EAME,8BANF,EAOE,iDAPF,EAQE,8BARF,EASE,8CATF,EAUE,8BAVF,EAWE,0CAXF,CADH;AAaEC,QAAAA,KAAK,EAAE;AAbT,OAAF,CAtfW;AAogBZ,iBACC,CAAE;AAAED,QAAAA,KAAK,EAAE,MAAT;AACEC,QAAAA,KAAK,EAAE,SADT;AAEEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EAAE,MAAT;AAAiBC,UAAAA,KAAK,EAAE,SAAxB;AAAmCE,UAAAA,IAAI,EAAE;AAAzC,SAAF,EACE;AAAEH,UAAAA,KAAK,EACJ,CAAE,+BAAF,EACE,4CADF,EAEE,+BAFF,EAGE,6CAHF,CADH;AAKEC,UAAAA,KAAK,EAAE;AALT,SADF,EAOE;AAAED,UAAAA,KAAK,EACJ,CAAE,wCAAF,EACE,2CADF,EAEE,wCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SAPF,EAYE;AAAED,UAAAA,KAAK,EACJ,CAAE,wCAAF,EACE,2CADF,EAEE,wCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SAZF,EAiBE;AAAED,UAAAA,KAAK,EACJ,CAAE,wCAAF,EACE,2CADF,EAEE,wCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SAjBF,EAsBE;AAAED,UAAAA,KAAK,EACJ,CAAE,wCAAF,EACE,2CADF,EAEE,wCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SAtBF,EA2BE;AAAED,UAAAA,KAAK,EACJ,CAAE,wCAAF,EACE,2CADF,EAEE,wCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SA3BF,EAgCE;AAAED,UAAAA,KAAK,EACJ,CAAE,wCAAF,EACE,2CADF,EAEE,wCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SAhCF,EAqCE;AAAED,UAAAA,KAAK,EACJ,CAAE,uCAAF,EACE,2CADF,EAEE,uCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SArCF,EA0CE;AAAED,UAAAA,KAAK,EACJ,CAAE,wCAAF,EACE,2CADF,EAEE,wCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SA1CF,EA+CE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SA/CF,EAoDE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SApDF,EAyDE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SAzDF,EA8DE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SA9DF,EAmEE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SAnEF,EAwEE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SAxEF,EA6EE;AAAED,UAAAA,KAAK,EACJ,CAAE,6CAAF,EACE,2CADF,EAEE,6CAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SA7EF,EAkFE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SAlFF,EAuFE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SAvFF,EA4FE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SA5FF,EAiGE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SAjGF,EAsGE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SAtGF,EA2GE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SA3GF,EAgHE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SAhHF,EAqHE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SArHF,EA0HE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SA1HF,EA+HE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SA/HF,EAoIE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SApIF,EAyIE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SAzIF,EA8IE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SA9IF,EAmJE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SAnJF,EAwJE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SAxJF,EA6JE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SA7JF,EAkKE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SAlKF,EAuKE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SAvKF,EA4KE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SA5KF,EAiLE;AAAED,UAAAA,KAAK,EACJ,CAAE,yCAAF,EACE,2CADF,EAEE,yCAFF,CADH;AAIEC,UAAAA,KAAK,EAAE;AAJT,SAjLF,EAsLE;AAAED,UAAAA,KAAK,EAAE,gCAAT;AACEC,UAAAA,KAAK,EAAE;AADT,SAtLF,EAwLE;AAAED,UAAAA,KAAK,EAAE,yCAAT;AACEC,UAAAA,KAAK,EAAE;AADT,SAxLF;AAHH,OAAF,CArgBW;AAksBZ,mCACC,CAAE;AAAED,QAAAA,KAAK,EAAE,6CAAT;AACEC,QAAAA,KAAK,EAAE,KADT;AAEEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EAAE,2CAAT;AACEC,UAAAA,KAAK,EAAE,KADT;AAEEE,UAAAA,IAAI,EAAE;AAFR,SAAF,EAGE;AAAEJ,UAAAA,OAAO,EAAE;AAAX,SAHF,EAIE;AAAEK,UAAAA,YAAY,EAAE;AAAhB,SAJF;AAHH,OAAF,CAnsBW;AA2sBZ,2BACC,CAAE;AAAEJ,QAAAA,KAAK,EACJ,CAAE,8BAAF,EACE,4CADF,EAEE,8BAFF,EAGE,yCAHF,EAIE,8BAJF,EAKE,gDALF,EAME,8BANF,EAOE,iDAPF,EAQE,8BARF,EASE,yCATF,CADH;AAWEC,QAAAA,KAAK,EAAE,oFAXT;AAYEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EACJ,CAAE,gDAAF,EACE,8BADF,EAEE,8CAFF,EAGE,8BAHF,EAIE,0CAJF,CADH;AAMEC,UAAAA,KAAK,EAAE,6BANT;AAOEE,UAAAA,IAAI,EAAE;AAPR,SAAF,EAQE;AAAEJ,UAAAA,OAAO,EAAE;AAAX,SARF,EASE;AAAEK,UAAAA,YAAY,EAAE;AAAhB,SATF;AAbH,OAAF,CA5sBW;AAmuBZ,uBACC,CAAE;AAAEJ,QAAAA,KAAK,EACJ,CAAE,gCAAF,EACE,0BADF,EAEE,sCAFF,EAGE,0BAHF,EAIE,2CAJF,EAKE,0BALF,EAME,6BANF,CADH;AAQEC,QAAAA,KAAK,EAAE;AART,OAAF,EASE;AAAED,QAAAA,KAAK,EACJ,CAAE,gCAAF,EACE,0BADF,EAEE,sCAFF,CADH;AAIEC,QAAAA,KAAK,EAAE,2CAJT;AAKEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EAAE,gDAAT;AACEC,UAAAA,KAAK,EAAE,KADT;AAEEE,UAAAA,IAAI,EAAE;AAFR,SAAF,EAGE;AAAEJ,UAAAA,OAAO,EAAE;AAAX,SAHF,EAIE;AAAEK,UAAAA,YAAY,EAAE;AAAhB,SAJF;AANH,OATF,CApuBW;AAwvBZ,iBACC,CAAE;AAAEJ,QAAAA,KAAK,EAAE,4CAAT;AACEC,QAAAA,KAAK,EAAE,GADT;AAEEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EAAE,0CAAT;AACEC,UAAAA,KAAK,EAAE,GADT;AAEEE,UAAAA,IAAI,EAAE;AAFR,SAAF,EAGE;AAAEH,UAAAA,KAAK,EACJ,CAAE,sCAAF,EACE,kCADF,EAEE,sCAFF,EAGE,kCAHF,EAIE,kCAJF,CADH;AAMEC,UAAAA,KAAK,EAAE;AANT,SAHF,EAUE;AAAED,UAAAA,KAAK,EAAE,+BAAT;AAA0CC,UAAAA,KAAK,EAAE;AAAjD,SAVF,EAWE;AAAED,UAAAA,KAAK,EACJ,CAAE,2CAAF,EACE,gDADF,EAEE,mCAFF,EAGE,gDAHF,EAIE,gDAJF,EAKE,mCALF,EAME,gDANF,EAOE,gDAPF,EAQE,gDARF,EASE,mCATF,EAUE,mCAVF,CADH;AAYEC,UAAAA,KAAK,EAAE;AAZT,SAXF,EAwBE;AAAED,UAAAA,KAAK,EACJ,CAAE,2CAAF,EACE,gDADF,EAEE,mCAFF,EAGE,mCAHF,CADH;AAKEC,UAAAA,KAAK,EAAE;AALT,SAxBF,EA8BE;AAAED,UAAAA,KAAK,EAAE,+BAAT;AAA0CC,UAAAA,KAAK,EAAE;AAAjD,SA9BF,EA+BE;AAAEG,UAAAA,YAAY,EAAE;AAAhB,SA/BF;AAHH,OAAF,CAzvBW;AA4xBZ,4BACC,CAAE;AAAEJ,QAAAA,KAAK,EAAE,kCAAT;AACEC,QAAAA,KAAK,EAAE;AADT,OAAF,CA7xBW;AA+xBZ,2BACC,CAAE;AAAED,QAAAA,KAAK,EAAE,iCAAT;AACEC,QAAAA,KAAK,EAAE;AADT,OAAF,CAhyBW;AAkyBZ,gBACC,CAAE;AAAED,QAAAA,KAAK,EAAE,2CAAT;AACEC,QAAAA,KAAK,EAAE,KADT;AAEEC,QAAAA,IAAI,EACH,CAAE;AAAEF,UAAAA,KAAK,EAAE,yCAAT;AACEC,UAAAA,KAAK,EAAE,KADT;AAEEE,UAAAA,IAAI,EAAE;AAFR,SAAF,EAGE;AAAEH,UAAAA,KAAK,EAAE,oCAAT;AAA+CC,UAAAA,KAAK,EAAE;AAAtD,SAHF,EAIE;AAAEF,UAAAA,OAAO,EAAE;AAAX,SAJF,EAKE;AAAEK,UAAAA,YAAY,EAAE;AAAhB,SALF;AAHH,OAAF,CAnyBW;AA4yBZ,mBACC,CAAE;AAAEJ,QAAAA,KAAK,EAAE,CAAE,uBAAF,EAA2B,kCAA3B,CAAT;AACEC,QAAAA,KAAK,EAAE;AADT,OAAF;AA7yBW,KAAd;AAgzBA,SAAKK,cAAL;AACH,GAnzBD;;AAqzBAV,EAAAA,oBAAoB,CAACW,QAArB,GAAgC;AAAEC,IAAAA,OAAO,EAAE,mTAAX;AAC1BC,IAAAA,SAAS,EAAE,CAAE,KAAF,EAAS,KAAT,CADe;AAE1BC,IAAAA,aAAa,EAAE,KAFW;AAG1BC,IAAAA,IAAI,EAAE,QAHoB;AAI1BC,IAAAA,SAAS,EAAE;AAJe,GAAhC;AAOAlB,EAAAA,GAAG,CAACmB,QAAJ,CAAajB,oBAAb,EAAmCD,kBAAnC;AAEAH,EAAAA,OAAO,CAACI,oBAAR,GAA+BA,oBAA/B;AACC,CAr0BD;AAu0BAP,GAAG,CAACC,MAAJ,CAAW,yBAAX,EAAqC,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,EAA8B,aAA9B,EAA4C,WAA5C,EAAwD,4BAAxD,CAArC,EAA4H,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AAC/J;;AAEA,MAAIC,GAAG,GAAGH,OAAO,CAAC,eAAD,CAAjB;;AACA,MAAIuB,KAAK,GAAGvB,OAAO,CAAC,aAAD,CAAP,CAAuBuB,KAAnC;;AACA,MAAIC,YAAY,GAAGxB,OAAO,CAAC,aAAD,CAAP,CAAuByB,QAA1C;;AAEA,MAAIA,QAAQ,GAAGxB,OAAO,CAACwB,QAAR,GAAmB,UAASC,YAAT,EAAuB;AACrD,QAAIA,YAAJ,EAAkB;AACd,WAAKC,kBAAL,GAA0B,IAAIC,MAAJ,CACtB,KAAKD,kBAAL,CAAwBE,MAAxB,CAA+BC,OAA/B,CAAuC,WAAvC,EAAoD,MAAMJ,YAAY,CAACnB,KAAvE,CADsB,CAA1B;AAGA,WAAKwB,iBAAL,GAAyB,IAAIH,MAAJ,CACrB,KAAKG,iBAAL,CAAuBF,MAAvB,CAA8BC,OAA9B,CAAsC,WAAtC,EAAmD,MAAMJ,YAAY,CAACM,GAAtE,CADqB,CAAzB;AAGH;AACJ,GATD;;AAUA7B,EAAAA,GAAG,CAACmB,QAAJ,CAAaG,QAAb,EAAuBD,YAAvB;AAEA,GAAC,YAAW;AAER,SAAKG,kBAAL,GAA0B,kCAA1B;AACA,SAAKI,iBAAL,GAAyB,sCAAzB;AACA,SAAKE,wBAAL,GAA+B,sBAA/B;AACA,SAAKC,wBAAL,GAAgC,0BAAhC;AACA,SAAKC,aAAL,GAAqB,2BAArB;AACA,SAAKC,kBAAL,GAA0B,KAAKC,aAA/B;;AACA,SAAKA,aAAL,GAAqB,UAASC,OAAT,EAAkBC,SAAlB,EAA6BC,GAA7B,EAAkC;AACnD,UAAIC,IAAI,GAAGH,OAAO,CAACI,OAAR,CAAgBF,GAAhB,CAAX;;AAEA,UAAI,KAAKP,wBAAL,CAA8BU,IAA9B,CAAmCF,IAAnC,CAAJ,EAA8C;AAC1C,YAAI,CAAC,KAAKN,aAAL,CAAmBQ,IAAnB,CAAwBF,IAAxB,CAAD,IAAkC,CAAC,KAAKP,wBAAL,CAA8BS,IAA9B,CAAmCF,IAAnC,CAAvC,EACI,OAAO,EAAP;AACP;;AAED,UAAIG,EAAE,GAAG,KAAKR,kBAAL,CAAwBE,OAAxB,EAAiCC,SAAjC,EAA4CC,GAA5C,CAAT;;AAEA,UAAI,CAACI,EAAD,IAAO,KAAKT,aAAL,CAAmBQ,IAAnB,CAAwBF,IAAxB,CAAX,EACI,OAAO,OAAP,CAX+C,CAW/B;;AAEpB,aAAOG,EAAP;AACH,KAdD;;AAgBA,SAAKC,kBAAL,GAA0B,UAASP,OAAT,EAAkBC,SAAlB,EAA6BC,GAA7B,EAAkCM,cAAlC,EAAkD;AACxE,UAAIL,IAAI,GAAGH,OAAO,CAACI,OAAR,CAAgBF,GAAhB,CAAX;AAEA,UAAI,KAAKL,aAAL,CAAmBQ,IAAnB,CAAwBF,IAAxB,CAAJ,EACI,OAAO,KAAKM,qBAAL,CAA2BT,OAA3B,EAAoCG,IAApC,EAA0CD,GAA1C,CAAP;AAEJ,UAAIQ,KAAK,GAAGP,IAAI,CAACO,KAAL,CAAW,KAAKrB,kBAAhB,CAAZ;;AACA,UAAIqB,KAAJ,EAAW;AACP,YAAIC,CAAC,GAAGD,KAAK,CAACE,KAAd;AAEA,YAAIF,KAAK,CAAC,CAAD,CAAT,EACI,OAAO,KAAKG,mBAAL,CAAyBb,OAAzB,EAAkCU,KAAK,CAAC,CAAD,CAAvC,EAA4CR,GAA5C,EAAiDS,CAAjD,CAAP;AAEJ,YAAIG,KAAK,GAAGd,OAAO,CAACe,mBAAR,CAA4Bb,GAA5B,EAAiCS,CAAC,GAAGD,KAAK,CAAC,CAAD,CAAL,CAASM,MAA9C,EAAsD,CAAtD,CAAZ;;AAEA,YAAIF,KAAK,IAAI,CAACA,KAAK,CAACG,WAAN,EAAd,EAAmC;AAC/B,cAAIT,cAAJ,EAAoB;AAChBM,YAAAA,KAAK,GAAG,KAAKI,eAAL,CAAqBlB,OAArB,EAA8BE,GAA9B,CAAR;AACH,WAFD,MAEO,IAAID,SAAS,IAAI,KAAjB,EACHa,KAAK,GAAG,IAAR;AACP;;AAED,eAAOA,KAAP;AACH;;AAED,UAAIb,SAAS,KAAK,WAAlB,EACI;AAEJ,UAAIS,KAAK,GAAGP,IAAI,CAACO,KAAL,CAAW,KAAKjB,iBAAhB,CAAZ;;AACA,UAAIiB,KAAJ,EAAW;AACP,YAAIC,CAAC,GAAGD,KAAK,CAACE,KAAN,GAAcF,KAAK,CAAC,CAAD,CAAL,CAASM,MAA/B;AAEA,YAAIN,KAAK,CAAC,CAAD,CAAT,EACI,OAAO,KAAKS,mBAAL,CAAyBnB,OAAzB,EAAkCU,KAAK,CAAC,CAAD,CAAvC,EAA4CR,GAA5C,EAAiDS,CAAjD,CAAP;AAEJ,eAAOX,OAAO,CAACe,mBAAR,CAA4Bb,GAA5B,EAAiCS,CAAjC,EAAoC,CAAC,CAArC,CAAP;AACH;AACJ,KArCD;;AAuCA,SAAKO,eAAL,GAAuB,UAASlB,OAAT,EAAkBE,GAAlB,EAAuB;AAC1C,UAAIC,IAAI,GAAGH,OAAO,CAACI,OAAR,CAAgBF,GAAhB,CAAX;AACA,UAAIkB,WAAW,GAAGjB,IAAI,CAACkB,MAAL,CAAY,IAAZ,CAAlB;AACA,UAAIC,QAAQ,GAAGpB,GAAf;AACA,UAAIqB,WAAW,GAAGpB,IAAI,CAACa,MAAvB;AACAd,MAAAA,GAAG,GAAGA,GAAG,GAAG,CAAZ;AACA,UAAIsB,MAAM,GAAGtB,GAAb;AACA,UAAIuB,MAAM,GAAGzB,OAAO,CAAC0B,SAAR,EAAb;;AACA,aAAO,EAAExB,GAAF,GAAQuB,MAAf,EAAuB;AACnBtB,QAAAA,IAAI,GAAGH,OAAO,CAACI,OAAR,CAAgBF,GAAhB,CAAP;AACA,YAAIyB,MAAM,GAAGxB,IAAI,CAACkB,MAAL,CAAY,IAAZ,CAAb;AACA,YAAIM,MAAM,KAAK,CAAC,CAAhB,EACI;AACJ,YAAKP,WAAW,GAAGO,MAAnB,EACI;AACJ,YAAIC,QAAQ,GAAG,KAAKrB,kBAAL,CAAwBP,OAAxB,EAAiC,KAAjC,EAAwCE,GAAxC,CAAf;;AAEA,YAAI0B,QAAJ,EAAc;AACV,cAAIA,QAAQ,CAAC3D,KAAT,CAAeiC,GAAf,IAAsBoB,QAA1B,EAAoC;AAChC;AACH,WAFD,MAEO,IAAIM,QAAQ,CAACX,WAAT,EAAJ,EAA4B;AAC/Bf,YAAAA,GAAG,GAAG0B,QAAQ,CAAClC,GAAT,CAAaQ,GAAnB;AACH,WAFM,MAEA,IAAIkB,WAAW,IAAIO,MAAnB,EAA2B;AAC9B;AACH;AACJ;;AACDH,QAAAA,MAAM,GAAGtB,GAAT;AACH;;AAED,aAAO,IAAIjB,KAAJ,CAAUqC,QAAV,EAAoBC,WAApB,EAAiCC,MAAjC,EAAyCxB,OAAO,CAACI,OAAR,CAAgBoB,MAAhB,EAAwBR,MAAjE,CAAP;AACH,KA9BD;;AA+BA,SAAKP,qBAAL,GAA6B,UAAST,OAAT,EAAkBG,IAAlB,EAAwBD,GAAxB,EAA6B;AACtD,UAAIqB,WAAW,GAAGpB,IAAI,CAACkB,MAAL,CAAY,MAAZ,CAAlB;AACA,UAAII,MAAM,GAAGzB,OAAO,CAAC0B,SAAR,EAAb;AACA,UAAIJ,QAAQ,GAAGpB,GAAf;AAEA,UAAI2B,EAAE,GAAG,sCAAT;AACA,UAAIC,KAAK,GAAG,CAAZ;;AACA,aAAO,EAAE5B,GAAF,GAAQuB,MAAf,EAAuB;AACnBtB,QAAAA,IAAI,GAAGH,OAAO,CAACI,OAAR,CAAgBF,GAAhB,CAAP;AACA,YAAI6B,CAAC,GAAGF,EAAE,CAACG,IAAH,CAAQ7B,IAAR,CAAR;AACA,YAAI,CAAC4B,CAAL,EAAQ;AACR,YAAIA,CAAC,CAAC,CAAD,CAAL,EAAUD,KAAK,GAAf,KACKA,KAAK;AAEV,YAAI,CAACA,KAAL,EAAY;AACf;;AAED,UAAIN,MAAM,GAAGtB,GAAb;;AACA,UAAIsB,MAAM,GAAGF,QAAb,EAAuB;AACnB,eAAO,IAAIrC,KAAJ,CAAUqC,QAAV,EAAoBC,WAApB,EAAiCC,MAAjC,EAAyCrB,IAAI,CAACa,MAA9C,CAAP;AACH;AACJ,KArBD;AAuBH,GArHD,EAqHGiB,IArHH,CAqHQ9C,QAAQ,CAAC+C,SArHjB;AAuHC,CA1ID;AA4IA1E,GAAG,CAACC,MAAJ,CAAW,iBAAX,EAA6B,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,EAA8B,aAA9B,EAA4C,eAA5C,EAA4D,iCAA5D,EAA8F,yBAA9F,CAA7B,EAAuJ,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AAC1L;;AAEA,MAAIC,GAAG,GAAGH,OAAO,CAAC,YAAD,CAAjB;;AACA,MAAIyE,QAAQ,GAAGzE,OAAO,CAAC,QAAD,CAAP,CAAkB0E,IAAjC;;AACA,MAAIrE,oBAAoB,GAAGL,OAAO,CAAC,0BAAD,CAAP,CAAoCK,oBAA/D;;AACA,MAAIoB,QAAQ,GAAGzB,OAAO,CAAC,kBAAD,CAAP,CAA4ByB,QAA3C;;AAEA,MAAIiD,IAAI,GAAG,YAAW;AAClB,SAAKC,cAAL,GAAsBtE,oBAAtB;AACA,SAAKuE,YAAL,GAAoB,IAAInD,QAAJ,EAApB;AACA,SAAKoD,UAAL,GAAkB,KAAKC,iBAAvB;AACH,GAJD;;AAKA3E,EAAAA,GAAG,CAACmB,QAAJ,CAAaoD,IAAb,EAAmBD,QAAnB;AAEA,GAAC,YAAW;AACR,SAAKM,gBAAL,GAAwB,GAAxB;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKC,GAAL,GAAW,iBAAX;AACA,SAAKC,aAAL,GAAqB,qBAArB;AACH,GALD,EAKGX,IALH,CAKQG,IAAI,CAACF,SALb;AAOAvE,EAAAA,OAAO,CAACyE,IAAR,GAAeA,IAAf;AACC,CAvBD;;AAuBmB,CAAC,YAAW;AACX5E,EAAAA,GAAG,CAACE,OAAJ,CAAY,CAAC,iBAAD,CAAZ,EAAiC,UAASqE,CAAT,EAAY;AACzC,QAAI,OAAOnE,MAAP,IAAiB,QAAjB,IAA6B,OAAOD,OAAP,IAAkB,QAA/C,IAA2DC,MAA/D,EAAuE;AACnEA,MAAAA,MAAM,CAACD,OAAP,GAAiBoE,CAAjB;AACH;AACJ,GAJD;AAKH,CANE","sourcesContent":["ace.define(\"ace/mode/erlang_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\nvar ErlangHighlightRules = function() {\r\n\r\n    this.$rules = { start: \r\n       [ { include: '#module-directive' },\r\n         { include: '#import-export-directive' },\r\n         { include: '#behaviour-directive' },\r\n         { include: '#record-directive' },\r\n         { include: '#define-directive' },\r\n         { include: '#macro-directive' },\r\n         { include: '#directive' },\r\n         { include: '#function' },\r\n         { include: '#everything-else' } ],\r\n      '#atom': \r\n       [ { token: 'punctuation.definition.symbol.begin.erlang',\r\n           regex: '\\'',\r\n           push: \r\n            [ { token: 'punctuation.definition.symbol.end.erlang',\r\n                regex: '\\'',\r\n                next: 'pop' },\r\n              { token: \r\n                 [ 'punctuation.definition.escape.erlang',\r\n                   'constant.other.symbol.escape.erlang',\r\n                   'punctuation.definition.escape.erlang',\r\n                   'constant.other.symbol.escape.erlang',\r\n                   'constant.other.symbol.escape.erlang' ],\r\n                regex: '(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))' },\r\n              { token: 'invalid.illegal.atom.erlang', regex: '\\\\\\\\\\\\^?.?' },\r\n              { defaultToken: 'constant.other.symbol.quoted.single.erlang' } ] },\r\n         { token: 'constant.other.symbol.unquoted.erlang',\r\n           regex: '[a-z][a-zA-Z\\\\d@_]*' } ],\r\n      '#behaviour-directive': \r\n       [ { token: \r\n            [ 'meta.directive.behaviour.erlang',\r\n              'punctuation.section.directive.begin.erlang',\r\n              'meta.directive.behaviour.erlang',\r\n              'keyword.control.directive.behaviour.erlang',\r\n              'meta.directive.behaviour.erlang',\r\n              'punctuation.definition.parameters.begin.erlang',\r\n              'meta.directive.behaviour.erlang',\r\n              'entity.name.type.class.behaviour.definition.erlang',\r\n              'meta.directive.behaviour.erlang',\r\n              'punctuation.definition.parameters.end.erlang',\r\n              'meta.directive.behaviour.erlang',\r\n              'punctuation.section.directive.end.erlang' ],\r\n           regex: '^(\\\\s*)(-)(\\\\s*)(behaviour)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' } ],\r\n      '#binary': \r\n       [ { token: 'punctuation.definition.binary.begin.erlang',\r\n           regex: '<<',\r\n           push: \r\n            [ { token: 'punctuation.definition.binary.end.erlang',\r\n                regex: '>>',\r\n                next: 'pop' },\r\n              { token: \r\n                 [ 'punctuation.separator.binary.erlang',\r\n                   'punctuation.separator.value-size.erlang' ],\r\n                regex: '(,)|(:)' },\r\n              { include: '#internal-type-specifiers' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.structure.binary.erlang' } ] } ],\r\n      '#character': \r\n       [ { token: \r\n            [ 'punctuation.definition.character.erlang',\r\n              'punctuation.definition.escape.erlang',\r\n              'constant.character.escape.erlang',\r\n              'punctuation.definition.escape.erlang',\r\n              'constant.character.escape.erlang',\r\n              'constant.character.escape.erlang' ],\r\n           regex: '(\\\\$)(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))' },\r\n         { token: 'invalid.illegal.character.erlang',\r\n           regex: '\\\\$\\\\\\\\\\\\^?.?' },\r\n         { token: \r\n            [ 'punctuation.definition.character.erlang',\r\n              'constant.character.erlang' ],\r\n           regex: '(\\\\$)(\\\\S)' },\r\n         { token: 'invalid.illegal.character.erlang', regex: '\\\\$.?' } ],\r\n      '#comment': \r\n       [ { token: 'punctuation.definition.comment.erlang',\r\n           regex: '%.*$',\r\n           push_: \r\n            [ { token: 'comment.line.percentage.erlang',\r\n                regex: '$',\r\n                next: 'pop' },\r\n              { defaultToken: 'comment.line.percentage.erlang' } ] } ],\r\n      '#define-directive': \r\n       [ { token: \r\n            [ 'meta.directive.define.erlang',\r\n              'punctuation.section.directive.begin.erlang',\r\n              'meta.directive.define.erlang',\r\n              'keyword.control.directive.define.erlang',\r\n              'meta.directive.define.erlang',\r\n              'punctuation.definition.parameters.begin.erlang',\r\n              'meta.directive.define.erlang',\r\n              'entity.name.function.macro.definition.erlang',\r\n              'meta.directive.define.erlang',\r\n              'punctuation.separator.parameters.erlang' ],\r\n           regex: '^(\\\\s*)(-)(\\\\s*)(define)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(,)',\r\n           push: \r\n            [ { token: \r\n                 [ 'punctuation.definition.parameters.end.erlang',\r\n                   'meta.directive.define.erlang',\r\n                   'punctuation.section.directive.end.erlang' ],\r\n                regex: '(\\\\))(\\\\s*)(\\\\.)',\r\n                next: 'pop' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.directive.define.erlang' } ] },\r\n         { token: 'meta.directive.define.erlang',\r\n           regex: '(?=^\\\\s*-\\\\s*define\\\\s*\\\\(\\\\s*[a-zA-Z\\\\d@_]+\\\\s*\\\\()',\r\n           push: \r\n            [ { token: \r\n                 [ 'punctuation.definition.parameters.end.erlang',\r\n                   'meta.directive.define.erlang',\r\n                   'punctuation.section.directive.end.erlang' ],\r\n                regex: '(\\\\))(\\\\s*)(\\\\.)',\r\n                next: 'pop' },\r\n              { token: \r\n                 [ 'text',\r\n                   'punctuation.section.directive.begin.erlang',\r\n                   'text',\r\n                   'keyword.control.directive.define.erlang',\r\n                   'text',\r\n                   'punctuation.definition.parameters.begin.erlang',\r\n                   'text',\r\n                   'entity.name.function.macro.definition.erlang',\r\n                   'text',\r\n                   'punctuation.definition.parameters.begin.erlang' ],\r\n                regex: '^(\\\\s*)(-)(\\\\s*)(define)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\()',\r\n                push: \r\n                 [ { token: \r\n                      [ 'punctuation.definition.parameters.end.erlang',\r\n                        'text',\r\n                        'punctuation.separator.parameters.erlang' ],\r\n                     regex: '(\\\\))(\\\\s*)(,)',\r\n                     next: 'pop' },\r\n                   { token: 'punctuation.separator.parameters.erlang', regex: ',' },\r\n                   { include: '#everything-else' } ] },\r\n              { token: 'punctuation.separator.define.erlang',\r\n                regex: '\\\\|\\\\||\\\\||:|;|,|\\\\.|->' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.directive.define.erlang' } ] } ],\r\n      '#directive': \r\n       [ { token: \r\n            [ 'meta.directive.erlang',\r\n              'punctuation.section.directive.begin.erlang',\r\n              'meta.directive.erlang',\r\n              'keyword.control.directive.erlang',\r\n              'meta.directive.erlang',\r\n              'punctuation.definition.parameters.begin.erlang' ],\r\n           regex: '^(\\\\s*)(-)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\(?)',\r\n           push: \r\n            [ { token: \r\n                 [ 'punctuation.definition.parameters.end.erlang',\r\n                   'meta.directive.erlang',\r\n                   'punctuation.section.directive.end.erlang' ],\r\n                regex: '(\\\\)?)(\\\\s*)(\\\\.)',\r\n                next: 'pop' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.directive.erlang' } ] },\r\n         { token: \r\n            [ 'meta.directive.erlang',\r\n              'punctuation.section.directive.begin.erlang',\r\n              'meta.directive.erlang',\r\n              'keyword.control.directive.erlang',\r\n              'meta.directive.erlang',\r\n              'punctuation.section.directive.end.erlang' ],\r\n           regex: '^(\\\\s*)(-)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\.)' } ],\r\n      '#everything-else': \r\n       [ { include: '#comment' },\r\n         { include: '#record-usage' },\r\n         { include: '#macro-usage' },\r\n         { include: '#expression' },\r\n         { include: '#keyword' },\r\n         { include: '#textual-operator' },\r\n         { include: '#function-call' },\r\n         { include: '#tuple' },\r\n         { include: '#list' },\r\n         { include: '#binary' },\r\n         { include: '#parenthesized-expression' },\r\n         { include: '#character' },\r\n         { include: '#number' },\r\n         { include: '#atom' },\r\n         { include: '#string' },\r\n         { include: '#symbolic-operator' },\r\n         { include: '#variable' } ],\r\n      '#expression': \r\n       [ { token: 'keyword.control.if.erlang',\r\n           regex: '\\\\bif\\\\b',\r\n           push: \r\n            [ { token: 'keyword.control.end.erlang',\r\n                regex: '\\\\bend\\\\b',\r\n                next: 'pop' },\r\n              { include: '#internal-expression-punctuation' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.expression.if.erlang' } ] },\r\n         { token: 'keyword.control.case.erlang',\r\n           regex: '\\\\bcase\\\\b',\r\n           push: \r\n            [ { token: 'keyword.control.end.erlang',\r\n                regex: '\\\\bend\\\\b',\r\n                next: 'pop' },\r\n              { include: '#internal-expression-punctuation' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.expression.case.erlang' } ] },\r\n         { token: 'keyword.control.receive.erlang',\r\n           regex: '\\\\breceive\\\\b',\r\n           push: \r\n            [ { token: 'keyword.control.end.erlang',\r\n                regex: '\\\\bend\\\\b',\r\n                next: 'pop' },\r\n              { include: '#internal-expression-punctuation' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.expression.receive.erlang' } ] },\r\n         { token: \r\n            [ 'keyword.control.fun.erlang',\r\n              'text',\r\n              'entity.name.type.class.module.erlang',\r\n              'text',\r\n              'punctuation.separator.module-function.erlang',\r\n              'text',\r\n              'entity.name.function.erlang',\r\n              'text',\r\n              'punctuation.separator.function-arity.erlang' ],\r\n           regex: '\\\\b(fun)(\\\\s*)(?:([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(:)(\\\\s*))?([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(/)' },\r\n         { token: 'keyword.control.fun.erlang',\r\n           regex: '\\\\bfun\\\\b',\r\n           push: \r\n            [ { token: 'keyword.control.end.erlang',\r\n                regex: '\\\\bend\\\\b',\r\n                next: 'pop' },\r\n              { token: 'text',\r\n                regex: '(?=\\\\()',\r\n                push: \r\n                 [ { token: 'punctuation.separator.clauses.erlang',\r\n                     regex: ';|(?=\\\\bend\\\\b)',\r\n                     next: 'pop' },\r\n                   { include: '#internal-function-parts' } ] },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.expression.fun.erlang' } ] },\r\n         { token: 'keyword.control.try.erlang',\r\n           regex: '\\\\btry\\\\b',\r\n           push: \r\n            [ { token: 'keyword.control.end.erlang',\r\n                regex: '\\\\bend\\\\b',\r\n                next: 'pop' },\r\n              { include: '#internal-expression-punctuation' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.expression.try.erlang' } ] },\r\n         { token: 'keyword.control.begin.erlang',\r\n           regex: '\\\\bbegin\\\\b',\r\n           push: \r\n            [ { token: 'keyword.control.end.erlang',\r\n                regex: '\\\\bend\\\\b',\r\n                next: 'pop' },\r\n              { include: '#internal-expression-punctuation' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.expression.begin.erlang' } ] },\r\n         { token: 'keyword.control.query.erlang',\r\n           regex: '\\\\bquery\\\\b',\r\n           push: \r\n            [ { token: 'keyword.control.end.erlang',\r\n                regex: '\\\\bend\\\\b',\r\n                next: 'pop' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.expression.query.erlang' } ] } ],\r\n      '#function': \r\n       [ { token: \r\n            [ 'meta.function.erlang',\r\n              'entity.name.function.definition.erlang',\r\n              'meta.function.erlang' ],\r\n           regex: '^(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(?=\\\\()',\r\n           push: \r\n            [ { token: 'punctuation.terminator.function.erlang',\r\n                regex: '\\\\.',\r\n                next: 'pop' },\r\n              { token: [ 'text', 'entity.name.function.erlang', 'text' ],\r\n                regex: '^(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(?=\\\\()' },\r\n              { token: 'text',\r\n                regex: '(?=\\\\()',\r\n                push: \r\n                 [ { token: 'punctuation.separator.clauses.erlang',\r\n                     regex: ';|(?=\\\\.)',\r\n                     next: 'pop' },\r\n                   { include: '#parenthesized-expression' },\r\n                   { include: '#internal-function-parts' } ] },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.function.erlang' } ] } ],\r\n      '#function-call': \r\n       [ { token: 'meta.function-call.erlang',\r\n           regex: '(?=(?:[a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')\\\\s*(?:\\\\(|:\\\\s*(?:[a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')\\\\s*\\\\())',\r\n           push: \r\n            [ { token: 'punctuation.definition.parameters.end.erlang',\r\n                regex: '\\\\)',\r\n                next: 'pop' },\r\n              { token: \r\n                 [ 'entity.name.type.class.module.erlang',\r\n                   'text',\r\n                   'punctuation.separator.module-function.erlang',\r\n                   'text',\r\n                   'entity.name.function.guard.erlang',\r\n                   'text',\r\n                   'punctuation.definition.parameters.begin.erlang' ],\r\n                regex: '(?:(erlang)(\\\\s*)(:)(\\\\s*))?(is_atom|is_binary|is_constant|is_float|is_function|is_integer|is_list|is_number|is_pid|is_port|is_reference|is_tuple|is_record|abs|element|hd|length|node|round|self|size|tl|trunc)(\\\\s*)(\\\\()',\r\n                push: \r\n                 [ { token: 'text', regex: '(?=\\\\))', next: 'pop' },\r\n                   { token: 'punctuation.separator.parameters.erlang', regex: ',' },\r\n                   { include: '#everything-else' } ] },\r\n              { token: \r\n                 [ 'entity.name.type.class.module.erlang',\r\n                   'text',\r\n                   'punctuation.separator.module-function.erlang',\r\n                   'text',\r\n                   'entity.name.function.erlang',\r\n                   'text',\r\n                   'punctuation.definition.parameters.begin.erlang' ],\r\n                regex: '(?:([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(:)(\\\\s*))?([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(\\\\()',\r\n                push: \r\n                 [ { token: 'text', regex: '(?=\\\\))', next: 'pop' },\r\n                   { token: 'punctuation.separator.parameters.erlang', regex: ',' },\r\n                   { include: '#everything-else' } ] },\r\n              { defaultToken: 'meta.function-call.erlang' } ] } ],\r\n      '#import-export-directive': \r\n       [ { token: \r\n            [ 'meta.directive.import.erlang',\r\n              'punctuation.section.directive.begin.erlang',\r\n              'meta.directive.import.erlang',\r\n              'keyword.control.directive.import.erlang',\r\n              'meta.directive.import.erlang',\r\n              'punctuation.definition.parameters.begin.erlang',\r\n              'meta.directive.import.erlang',\r\n              'entity.name.type.class.module.erlang',\r\n              'meta.directive.import.erlang',\r\n              'punctuation.separator.parameters.erlang' ],\r\n           regex: '^(\\\\s*)(-)(\\\\s*)(import)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(,)',\r\n           push: \r\n            [ { token: \r\n                 [ 'punctuation.definition.parameters.end.erlang',\r\n                   'meta.directive.import.erlang',\r\n                   'punctuation.section.directive.end.erlang' ],\r\n                regex: '(\\\\))(\\\\s*)(\\\\.)',\r\n                next: 'pop' },\r\n              { include: '#internal-function-list' },\r\n              { defaultToken: 'meta.directive.import.erlang' } ] },\r\n         { token: \r\n            [ 'meta.directive.export.erlang',\r\n              'punctuation.section.directive.begin.erlang',\r\n              'meta.directive.export.erlang',\r\n              'keyword.control.directive.export.erlang',\r\n              'meta.directive.export.erlang',\r\n              'punctuation.definition.parameters.begin.erlang' ],\r\n           regex: '^(\\\\s*)(-)(\\\\s*)(export)(\\\\s*)(\\\\()',\r\n           push: \r\n            [ { token: \r\n                 [ 'punctuation.definition.parameters.end.erlang',\r\n                   'meta.directive.export.erlang',\r\n                   'punctuation.section.directive.end.erlang' ],\r\n                regex: '(\\\\))(\\\\s*)(\\\\.)',\r\n                next: 'pop' },\r\n              { include: '#internal-function-list' },\r\n              { defaultToken: 'meta.directive.export.erlang' } ] } ],\r\n      '#internal-expression-punctuation': \r\n       [ { token: \r\n            [ 'punctuation.separator.clause-head-body.erlang',\r\n              'punctuation.separator.clauses.erlang',\r\n              'punctuation.separator.expressions.erlang' ],\r\n           regex: '(->)|(;)|(,)' } ],\r\n      '#internal-function-list': \r\n       [ { token: 'punctuation.definition.list.begin.erlang',\r\n           regex: '\\\\[',\r\n           push: \r\n            [ { token: 'punctuation.definition.list.end.erlang',\r\n                regex: '\\\\]',\r\n                next: 'pop' },\r\n              { token: \r\n                 [ 'entity.name.function.erlang',\r\n                   'text',\r\n                   'punctuation.separator.function-arity.erlang' ],\r\n                regex: '([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(/)',\r\n                push: \r\n                 [ { token: 'punctuation.separator.list.erlang',\r\n                     regex: ',|(?=\\\\])',\r\n                     next: 'pop' },\r\n                   { include: '#everything-else' } ] },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.structure.list.function.erlang' } ] } ],\r\n      '#internal-function-parts': \r\n       [ { token: 'text',\r\n           regex: '(?=\\\\()',\r\n           push: \r\n            [ { token: 'punctuation.separator.clause-head-body.erlang',\r\n                regex: '->',\r\n                next: 'pop' },\r\n              { token: 'punctuation.definition.parameters.begin.erlang',\r\n                regex: '\\\\(',\r\n                push: \r\n                 [ { token: 'punctuation.definition.parameters.end.erlang',\r\n                     regex: '\\\\)',\r\n                     next: 'pop' },\r\n                   { token: 'punctuation.separator.parameters.erlang', regex: ',' },\r\n                   { include: '#everything-else' } ] },\r\n              { token: 'punctuation.separator.guards.erlang', regex: ',|;' },\r\n              { include: '#everything-else' } ] },\r\n         { token: 'punctuation.separator.expressions.erlang',\r\n           regex: ',' },\r\n         { include: '#everything-else' } ],\r\n      '#internal-record-body': \r\n       [ { token: 'punctuation.definition.class.record.begin.erlang',\r\n           regex: '\\\\{',\r\n           push: \r\n            [ { token: 'meta.structure.record.erlang',\r\n                regex: '(?=\\\\})',\r\n                next: 'pop' },\r\n              { token: \r\n                 [ 'variable.other.field.erlang',\r\n                   'variable.language.omitted.field.erlang',\r\n                   'text',\r\n                   'keyword.operator.assignment.erlang' ],\r\n                regex: '(?:([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')|(_))(\\\\s*)(=|::)',\r\n                push: \r\n                 [ { token: 'punctuation.separator.class.record.erlang',\r\n                     regex: ',|(?=\\\\})',\r\n                     next: 'pop' },\r\n                   { include: '#everything-else' } ] },\r\n              { token: \r\n                 [ 'variable.other.field.erlang',\r\n                   'text',\r\n                   'punctuation.separator.class.record.erlang' ],\r\n                regex: '([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)((?:,)?)' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.structure.record.erlang' } ] } ],\r\n      '#internal-type-specifiers': \r\n       [ { token: 'punctuation.separator.value-type.erlang',\r\n           regex: '/',\r\n           push: \r\n            [ { token: 'text', regex: '(?=,|:|>>)', next: 'pop' },\r\n              { token: \r\n                 [ 'storage.type.erlang',\r\n                   'storage.modifier.signedness.erlang',\r\n                   'storage.modifier.endianness.erlang',\r\n                   'storage.modifier.unit.erlang',\r\n                   'punctuation.separator.type-specifiers.erlang' ],\r\n                regex: '(integer|float|binary|bytes|bitstring|bits)|(signed|unsigned)|(big|little|native)|(unit)|(-)' } ] } ],\r\n      '#keyword': \r\n       [ { token: 'keyword.control.erlang',\r\n           regex: '\\\\b(?:after|begin|case|catch|cond|end|fun|if|let|of|query|try|receive|when)\\\\b' } ],\r\n      '#list': \r\n       [ { token: 'punctuation.definition.list.begin.erlang',\r\n           regex: '\\\\[',\r\n           push: \r\n            [ { token: 'punctuation.definition.list.end.erlang',\r\n                regex: '\\\\]',\r\n                next: 'pop' },\r\n              { token: 'punctuation.separator.list.erlang',\r\n                regex: '\\\\||\\\\|\\\\||,' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.structure.list.erlang' } ] } ],\r\n      '#macro-directive': \r\n       [ { token: \r\n            [ 'meta.directive.ifdef.erlang',\r\n              'punctuation.section.directive.begin.erlang',\r\n              'meta.directive.ifdef.erlang',\r\n              'keyword.control.directive.ifdef.erlang',\r\n              'meta.directive.ifdef.erlang',\r\n              'punctuation.definition.parameters.begin.erlang',\r\n              'meta.directive.ifdef.erlang',\r\n              'entity.name.function.macro.erlang',\r\n              'meta.directive.ifdef.erlang',\r\n              'punctuation.definition.parameters.end.erlang',\r\n              'meta.directive.ifdef.erlang',\r\n              'punctuation.section.directive.end.erlang' ],\r\n           regex: '^(\\\\s*)(-)(\\\\s*)(ifdef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' },\r\n         { token: \r\n            [ 'meta.directive.ifndef.erlang',\r\n              'punctuation.section.directive.begin.erlang',\r\n              'meta.directive.ifndef.erlang',\r\n              'keyword.control.directive.ifndef.erlang',\r\n              'meta.directive.ifndef.erlang',\r\n              'punctuation.definition.parameters.begin.erlang',\r\n              'meta.directive.ifndef.erlang',\r\n              'entity.name.function.macro.erlang',\r\n              'meta.directive.ifndef.erlang',\r\n              'punctuation.definition.parameters.end.erlang',\r\n              'meta.directive.ifndef.erlang',\r\n              'punctuation.section.directive.end.erlang' ],\r\n           regex: '^(\\\\s*)(-)(\\\\s*)(ifndef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' },\r\n         { token: \r\n            [ 'meta.directive.undef.erlang',\r\n              'punctuation.section.directive.begin.erlang',\r\n              'meta.directive.undef.erlang',\r\n              'keyword.control.directive.undef.erlang',\r\n              'meta.directive.undef.erlang',\r\n              'punctuation.definition.parameters.begin.erlang',\r\n              'meta.directive.undef.erlang',\r\n              'entity.name.function.macro.erlang',\r\n              'meta.directive.undef.erlang',\r\n              'punctuation.definition.parameters.end.erlang',\r\n              'meta.directive.undef.erlang',\r\n              'punctuation.section.directive.end.erlang' ],\r\n           regex: '^(\\\\s*)(-)(\\\\s*)(undef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' } ],\r\n      '#macro-usage': \r\n       [ { token: \r\n            [ 'keyword.operator.macro.erlang',\r\n              'meta.macro-usage.erlang',\r\n              'entity.name.function.macro.erlang' ],\r\n           regex: '(\\\\?\\\\??)(\\\\s*)([a-zA-Z\\\\d@_]+)' } ],\r\n      '#module-directive': \r\n       [ { token: \r\n            [ 'meta.directive.module.erlang',\r\n              'punctuation.section.directive.begin.erlang',\r\n              'meta.directive.module.erlang',\r\n              'keyword.control.directive.module.erlang',\r\n              'meta.directive.module.erlang',\r\n              'punctuation.definition.parameters.begin.erlang',\r\n              'meta.directive.module.erlang',\r\n              'entity.name.type.class.module.definition.erlang',\r\n              'meta.directive.module.erlang',\r\n              'punctuation.definition.parameters.end.erlang',\r\n              'meta.directive.module.erlang',\r\n              'punctuation.section.directive.end.erlang' ],\r\n           regex: '^(\\\\s*)(-)(\\\\s*)(module)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' } ],\r\n      '#number': \r\n       [ { token: 'text',\r\n           regex: '(?=\\\\d)',\r\n           push: \r\n            [ { token: 'text', regex: '(?!\\\\d)', next: 'pop' },\r\n              { token: \r\n                 [ 'constant.numeric.float.erlang',\r\n                   'punctuation.separator.integer-float.erlang',\r\n                   'constant.numeric.float.erlang',\r\n                   'punctuation.separator.float-exponent.erlang' ],\r\n                regex: '(\\\\d+)(\\\\.)(\\\\d+)((?:[eE][\\\\+\\\\-]?\\\\d+)?)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.binary.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.binary.erlang' ],\r\n                regex: '(2)(#)([0-1]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-3.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-3.erlang' ],\r\n                regex: '(3)(#)([0-2]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-4.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-4.erlang' ],\r\n                regex: '(4)(#)([0-3]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-5.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-5.erlang' ],\r\n                regex: '(5)(#)([0-4]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-6.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-6.erlang' ],\r\n                regex: '(6)(#)([0-5]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-7.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-7.erlang' ],\r\n                regex: '(7)(#)([0-6]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.octal.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.octal.erlang' ],\r\n                regex: '(8)(#)([0-7]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-9.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-9.erlang' ],\r\n                regex: '(9)(#)([0-8]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.decimal.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.decimal.erlang' ],\r\n                regex: '(10)(#)(\\\\d+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-11.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-11.erlang' ],\r\n                regex: '(11)(#)([\\\\daA]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-12.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-12.erlang' ],\r\n                regex: '(12)(#)([\\\\da-bA-B]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-13.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-13.erlang' ],\r\n                regex: '(13)(#)([\\\\da-cA-C]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-14.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-14.erlang' ],\r\n                regex: '(14)(#)([\\\\da-dA-D]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-15.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-15.erlang' ],\r\n                regex: '(15)(#)([\\\\da-eA-E]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.hexadecimal.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.hexadecimal.erlang' ],\r\n                regex: '(16)(#)([\\\\da-fA-F]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-17.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-17.erlang' ],\r\n                regex: '(17)(#)([\\\\da-gA-G]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-18.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-18.erlang' ],\r\n                regex: '(18)(#)([\\\\da-hA-H]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-19.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-19.erlang' ],\r\n                regex: '(19)(#)([\\\\da-iA-I]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-20.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-20.erlang' ],\r\n                regex: '(20)(#)([\\\\da-jA-J]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-21.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-21.erlang' ],\r\n                regex: '(21)(#)([\\\\da-kA-K]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-22.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-22.erlang' ],\r\n                regex: '(22)(#)([\\\\da-lA-L]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-23.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-23.erlang' ],\r\n                regex: '(23)(#)([\\\\da-mA-M]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-24.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-24.erlang' ],\r\n                regex: '(24)(#)([\\\\da-nA-N]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-25.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-25.erlang' ],\r\n                regex: '(25)(#)([\\\\da-oA-O]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-26.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-26.erlang' ],\r\n                regex: '(26)(#)([\\\\da-pA-P]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-27.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-27.erlang' ],\r\n                regex: '(27)(#)([\\\\da-qA-Q]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-28.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-28.erlang' ],\r\n                regex: '(28)(#)([\\\\da-rA-R]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-29.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-29.erlang' ],\r\n                regex: '(29)(#)([\\\\da-sA-S]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-30.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-30.erlang' ],\r\n                regex: '(30)(#)([\\\\da-tA-T]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-31.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-31.erlang' ],\r\n                regex: '(31)(#)([\\\\da-uA-U]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-32.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-32.erlang' ],\r\n                regex: '(32)(#)([\\\\da-vA-V]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-33.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-33.erlang' ],\r\n                regex: '(33)(#)([\\\\da-wA-W]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-34.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-34.erlang' ],\r\n                regex: '(34)(#)([\\\\da-xA-X]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-35.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-35.erlang' ],\r\n                regex: '(35)(#)([\\\\da-yA-Y]+)' },\r\n              { token: \r\n                 [ 'constant.numeric.integer.base-36.erlang',\r\n                   'punctuation.separator.base-integer.erlang',\r\n                   'constant.numeric.integer.base-36.erlang' ],\r\n                regex: '(36)(#)([\\\\da-zA-Z]+)' },\r\n              { token: 'invalid.illegal.integer.erlang',\r\n                regex: '\\\\d+#[\\\\da-zA-Z]+' },\r\n              { token: 'constant.numeric.integer.decimal.erlang',\r\n                regex: '\\\\d+' } ] } ],\r\n      '#parenthesized-expression': \r\n       [ { token: 'punctuation.section.expression.begin.erlang',\r\n           regex: '\\\\(',\r\n           push: \r\n            [ { token: 'punctuation.section.expression.end.erlang',\r\n                regex: '\\\\)',\r\n                next: 'pop' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.expression.parenthesized' } ] } ],\r\n      '#record-directive': \r\n       [ { token: \r\n            [ 'meta.directive.record.erlang',\r\n              'punctuation.section.directive.begin.erlang',\r\n              'meta.directive.record.erlang',\r\n              'keyword.control.directive.import.erlang',\r\n              'meta.directive.record.erlang',\r\n              'punctuation.definition.parameters.begin.erlang',\r\n              'meta.directive.record.erlang',\r\n              'entity.name.type.class.record.definition.erlang',\r\n              'meta.directive.record.erlang',\r\n              'punctuation.separator.parameters.erlang' ],\r\n           regex: '^(\\\\s*)(-)(\\\\s*)(record)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(,)',\r\n           push: \r\n            [ { token: \r\n                 [ 'punctuation.definition.class.record.end.erlang',\r\n                   'meta.directive.record.erlang',\r\n                   'punctuation.definition.parameters.end.erlang',\r\n                   'meta.directive.record.erlang',\r\n                   'punctuation.section.directive.end.erlang' ],\r\n                regex: '(\\\\})(\\\\s*)(\\\\))(\\\\s*)(\\\\.)',\r\n                next: 'pop' },\r\n              { include: '#internal-record-body' },\r\n              { defaultToken: 'meta.directive.record.erlang' } ] } ],\r\n      '#record-usage': \r\n       [ { token: \r\n            [ 'keyword.operator.record.erlang',\r\n              'meta.record-usage.erlang',\r\n              'entity.name.type.class.record.erlang',\r\n              'meta.record-usage.erlang',\r\n              'punctuation.separator.record-field.erlang',\r\n              'meta.record-usage.erlang',\r\n              'variable.other.field.erlang' ],\r\n           regex: '(#)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(\\\\.)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')' },\r\n         { token: \r\n            [ 'keyword.operator.record.erlang',\r\n              'meta.record-usage.erlang',\r\n              'entity.name.type.class.record.erlang' ],\r\n           regex: '(#)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')',\r\n           push: \r\n            [ { token: 'punctuation.definition.class.record.end.erlang',\r\n                regex: '\\\\}',\r\n                next: 'pop' },\r\n              { include: '#internal-record-body' },\r\n              { defaultToken: 'meta.record-usage.erlang' } ] } ],\r\n      '#string': \r\n       [ { token: 'punctuation.definition.string.begin.erlang',\r\n           regex: '\"',\r\n           push: \r\n            [ { token: 'punctuation.definition.string.end.erlang',\r\n                regex: '\"',\r\n                next: 'pop' },\r\n              { token: \r\n                 [ 'punctuation.definition.escape.erlang',\r\n                   'constant.character.escape.erlang',\r\n                   'punctuation.definition.escape.erlang',\r\n                   'constant.character.escape.erlang',\r\n                   'constant.character.escape.erlang' ],\r\n                regex: '(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))' },\r\n              { token: 'invalid.illegal.string.erlang', regex: '\\\\\\\\\\\\^?.?' },\r\n              { token: \r\n                 [ 'punctuation.definition.placeholder.erlang',\r\n                   'punctuation.separator.placeholder-parts.erlang',\r\n                   'constant.other.placeholder.erlang',\r\n                   'punctuation.separator.placeholder-parts.erlang',\r\n                   'punctuation.separator.placeholder-parts.erlang',\r\n                   'constant.other.placeholder.erlang',\r\n                   'punctuation.separator.placeholder-parts.erlang',\r\n                   'punctuation.separator.placeholder-parts.erlang',\r\n                   'punctuation.separator.placeholder-parts.erlang',\r\n                   'constant.other.placeholder.erlang',\r\n                   'constant.other.placeholder.erlang' ],\r\n                regex: '(~)(?:((?:\\\\-)?)(\\\\d+)|(\\\\*))?(?:(\\\\.)(?:(\\\\d+)|(\\\\*)))?(?:(\\\\.)(?:(\\\\*)|(.)))?([~cfegswpWPBX#bx\\\\+ni])' },\r\n              { token: \r\n                 [ 'punctuation.definition.placeholder.erlang',\r\n                   'punctuation.separator.placeholder-parts.erlang',\r\n                   'constant.other.placeholder.erlang',\r\n                   'constant.other.placeholder.erlang' ],\r\n                regex: '(~)((?:\\\\*)?)((?:\\\\d+)?)([~du\\\\-#fsacl])' },\r\n              { token: 'invalid.illegal.string.erlang', regex: '~.?' },\r\n              { defaultToken: 'string.quoted.double.erlang' } ] } ],\r\n      '#symbolic-operator': \r\n       [ { token: 'keyword.operator.symbolic.erlang',\r\n           regex: '\\\\+\\\\+|\\\\+|--|-|\\\\*|/=|/|=/=|=:=|==|=<|=|<-|<|>=|>|!|::' } ],\r\n      '#textual-operator': \r\n       [ { token: 'keyword.operator.textual.erlang',\r\n           regex: '\\\\b(?:andalso|band|and|bxor|xor|bor|orelse|or|bnot|not|bsl|bsr|div|rem)\\\\b' } ],\r\n      '#tuple': \r\n       [ { token: 'punctuation.definition.tuple.begin.erlang',\r\n           regex: '\\\\{',\r\n           push: \r\n            [ { token: 'punctuation.definition.tuple.end.erlang',\r\n                regex: '\\\\}',\r\n                next: 'pop' },\r\n              { token: 'punctuation.separator.tuple.erlang', regex: ',' },\r\n              { include: '#everything-else' },\r\n              { defaultToken: 'meta.structure.tuple.erlang' } ] } ],\r\n      '#variable': \r\n       [ { token: [ 'variable.other.erlang', 'variable.language.omitted.erlang' ],\r\n           regex: '(_[a-zA-Z\\\\d@_]+|[A-Z][a-zA-Z\\\\d@_]*)|(_)' } ] };\r\n    \r\n    this.normalizeRules();\r\n};\r\n\r\nErlangHighlightRules.metaData = { comment: 'The recognition of function definitions and compiler directives (such as module, record and macro definitions) requires that each of the aforementioned constructs must be the first string inside a line (except for whitespace).  Also, the function/module/record/macro names must be given unquoted.  -- desp',\r\n      fileTypes: [ 'erl', 'hrl' ],\r\n      keyEquivalent: '^~E',\r\n      name: 'Erlang',\r\n      scopeName: 'source.erlang' };\r\n\r\n\r\noop.inherits(ErlangHighlightRules, TextHighlightRules);\r\n\r\nexports.ErlangHighlightRules = ErlangHighlightRules;\r\n});\r\n\r\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../../lib/oop\");\r\nvar Range = require(\"../../range\").Range;\r\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\r\n\r\nvar FoldMode = exports.FoldMode = function(commentRegex) {\r\n    if (commentRegex) {\r\n        this.foldingStartMarker = new RegExp(\r\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\r\n        );\r\n        this.foldingStopMarker = new RegExp(\r\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\r\n        );\r\n    }\r\n};\r\noop.inherits(FoldMode, BaseFoldMode);\r\n\r\n(function() {\r\n    \r\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\r\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\r\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\r\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\r\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\r\n    this._getFoldWidgetBase = this.getFoldWidget;\r\n    this.getFoldWidget = function(session, foldStyle, row) {\r\n        var line = session.getLine(row);\r\n    \r\n        if (this.singleLineBlockCommentRe.test(line)) {\r\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\r\n                return \"\";\r\n        }\r\n    \r\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\r\n    \r\n        if (!fw && this.startRegionRe.test(line))\r\n            return \"start\"; // lineCommentRegionStart\r\n    \r\n        return fw;\r\n    };\r\n\r\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\r\n        var line = session.getLine(row);\r\n        \r\n        if (this.startRegionRe.test(line))\r\n            return this.getCommentRegionBlock(session, line, row);\r\n        \r\n        var match = line.match(this.foldingStartMarker);\r\n        if (match) {\r\n            var i = match.index;\r\n\r\n            if (match[1])\r\n                return this.openingBracketBlock(session, match[1], row, i);\r\n                \r\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\r\n            \r\n            if (range && !range.isMultiLine()) {\r\n                if (forceMultiline) {\r\n                    range = this.getSectionRange(session, row);\r\n                } else if (foldStyle != \"all\")\r\n                    range = null;\r\n            }\r\n            \r\n            return range;\r\n        }\r\n\r\n        if (foldStyle === \"markbegin\")\r\n            return;\r\n\r\n        var match = line.match(this.foldingStopMarker);\r\n        if (match) {\r\n            var i = match.index + match[0].length;\r\n\r\n            if (match[1])\r\n                return this.closingBracketBlock(session, match[1], row, i);\r\n\r\n            return session.getCommentFoldRange(row, i, -1);\r\n        }\r\n    };\r\n    \r\n    this.getSectionRange = function(session, row) {\r\n        var line = session.getLine(row);\r\n        var startIndent = line.search(/\\S/);\r\n        var startRow = row;\r\n        var startColumn = line.length;\r\n        row = row + 1;\r\n        var endRow = row;\r\n        var maxRow = session.getLength();\r\n        while (++row < maxRow) {\r\n            line = session.getLine(row);\r\n            var indent = line.search(/\\S/);\r\n            if (indent === -1)\r\n                continue;\r\n            if  (startIndent > indent)\r\n                break;\r\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\r\n            \r\n            if (subRange) {\r\n                if (subRange.start.row <= startRow) {\r\n                    break;\r\n                } else if (subRange.isMultiLine()) {\r\n                    row = subRange.end.row;\r\n                } else if (startIndent == indent) {\r\n                    break;\r\n                }\r\n            }\r\n            endRow = row;\r\n        }\r\n        \r\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\r\n    };\r\n    this.getCommentRegionBlock = function(session, line, row) {\r\n        var startColumn = line.search(/\\s*$/);\r\n        var maxRow = session.getLength();\r\n        var startRow = row;\r\n        \r\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\r\n        var depth = 1;\r\n        while (++row < maxRow) {\r\n            line = session.getLine(row);\r\n            var m = re.exec(line);\r\n            if (!m) continue;\r\n            if (m[1]) depth--;\r\n            else depth++;\r\n\r\n            if (!depth) break;\r\n        }\r\n\r\n        var endRow = row;\r\n        if (endRow > startRow) {\r\n            return new Range(startRow, startColumn, endRow, line.length);\r\n        }\r\n    };\r\n\r\n}).call(FoldMode.prototype);\r\n\r\n});\r\n\r\nace.define(\"ace/mode/erlang\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/erlang_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextMode = require(\"./text\").Mode;\r\nvar ErlangHighlightRules = require(\"./erlang_highlight_rules\").ErlangHighlightRules;\r\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\r\n\r\nvar Mode = function() {\r\n    this.HighlightRules = ErlangHighlightRules;\r\n    this.foldingRules = new FoldMode();\r\n    this.$behaviour = this.$defaultBehaviour;\r\n};\r\noop.inherits(Mode, TextMode);\r\n\r\n(function() {\r\n    this.lineCommentStart = \"%\";\r\n    this.blockComment = null;\r\n    this.$id = \"ace/mode/erlang\";\r\n    this.snippetFileId = \"ace/snippets/erlang\";\r\n}).call(Mode.prototype);\r\n\r\nexports.Mode = Mode;\r\n});                (function() {\r\n                    ace.require([\"ace/mode/erlang\"], function(m) {\r\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\r\n                            module.exports = m;\r\n                        }\r\n                    });\r\n                })();\r\n            "]},"metadata":{},"sourceType":"script"}