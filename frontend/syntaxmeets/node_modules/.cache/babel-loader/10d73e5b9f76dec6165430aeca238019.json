{"ast":null,"code":"ace.define(\"ace/snippets/tcl\", [\"require\", \"exports\", \"module\"], function (require, exports, module) {\n  \"use strict\";\n\n  exports.snippetText = \"# #!/usr/bin/env tclsh\\n\\\r\nsnippet #!\\n\\\r\n\t#!/usr/bin/env tclsh\\n\\\r\n\t\\n\\\r\n# Process\\n\\\r\nsnippet pro\\n\\\r\n\tproc ${1:function_name} {${2:args}} {\\n\\\r\n\t\t${3:#body ...}\\n\\\r\n\t}\\n\\\r\n#xif\\n\\\r\nsnippet xif\\n\\\r\n\t${1:expr}? ${2:true} : ${3:false}\\n\\\r\n# Conditional\\n\\\r\nsnippet if\\n\\\r\n\tif {${1}} {\\n\\\r\n\t\t${2:# body...}\\n\\\r\n\t}\\n\\\r\n# Conditional if..else\\n\\\r\nsnippet ife\\n\\\r\n\tif {${1}} {\\n\\\r\n\t\t${2:# body...}\\n\\\r\n\t} else {\\n\\\r\n\t\t${3:# else...}\\n\\\r\n\t}\\n\\\r\n# Conditional if..elsif..else\\n\\\r\nsnippet ifee\\n\\\r\n\tif {${1}} {\\n\\\r\n\t\t${2:# body...}\\n\\\r\n\t} elseif {${3}} {\\n\\\r\n\t\t${4:# elsif...}\\n\\\r\n\t} else {\\n\\\r\n\t\t${5:# else...}\\n\\\r\n\t}\\n\\\r\n# If catch then\\n\\\r\nsnippet ifc\\n\\\r\n\tif { [catch {${1:#do something...}} ${2:err}] } {\\n\\\r\n\t\t${3:# handle failure...}\\n\\\r\n\t}\\n\\\r\n# Catch\\n\\\r\nsnippet catch\\n\\\r\n\tcatch {${1}} ${2:err} ${3:options}\\n\\\r\n# While Loop\\n\\\r\nsnippet wh\\n\\\r\n\twhile {${1}} {\\n\\\r\n\t\t${2:# body...}\\n\\\r\n\t}\\n\\\r\n# For Loop\\n\\\r\nsnippet for\\n\\\r\n\tfor {set ${2:var} 0} {$$2 < ${1:count}} {${3:incr} $2} {\\n\\\r\n\t\t${4:# body...}\\n\\\r\n\t}\\n\\\r\n# Foreach Loop\\n\\\r\nsnippet fore\\n\\\r\n\tforeach ${1:x} {${2:#list}} {\\n\\\r\n\t\t${3:# body...}\\n\\\r\n\t}\\n\\\r\n# after ms script...\\n\\\r\nsnippet af\\n\\\r\n\tafter ${1:ms} ${2:#do something}\\n\\\r\n# after cancel id\\n\\\r\nsnippet afc\\n\\\r\n\tafter cancel ${1:id or script}\\n\\\r\n# after idle\\n\\\r\nsnippet afi\\n\\\r\n\tafter idle ${1:script}\\n\\\r\n# after info id\\n\\\r\nsnippet afin\\n\\\r\n\tafter info ${1:id}\\n\\\r\n# Expr\\n\\\r\nsnippet exp\\n\\\r\n\texpr {${1:#expression here}}\\n\\\r\n# Switch\\n\\\r\nsnippet sw\\n\\\r\n\tswitch ${1:var} {\\n\\\r\n\t\t${3:pattern 1} {\\n\\\r\n\t\t\t${4:#do something}\\n\\\r\n\t\t}\\n\\\r\n\t\tdefault {\\n\\\r\n\t\t\t${2:#do something}\\n\\\r\n\t\t}\\n\\\r\n\t}\\n\\\r\n# Case\\n\\\r\nsnippet ca\\n\\\r\n\t${1:pattern} {\\n\\\r\n\t\t${2:#do something}\\n\\\r\n\t}${3}\\n\\\r\n# Namespace eval\\n\\\r\nsnippet ns\\n\\\r\n\tnamespace eval ${1:path} {${2:#script...}}\\n\\\r\n# Namespace current\\n\\\r\nsnippet nsc\\n\\\r\n\tnamespace current\\n\\\r\n\";\n  exports.scope = \"tcl\";\n});\n\n(function () {\n  ace.require([\"ace/snippets/tcl\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["C:/Users/akash/Desktop/Project/React/SyntaxMeets/frontend/syntaxmeets/node_modules/ace-builds/src-noconflict/snippets/tcl.js"],"names":["ace","define","require","exports","module","snippetText","scope","m"],"mappings":"AAAAA,GAAG,CAACC,MAAJ,CAAW,kBAAX,EAA8B,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,CAA9B,EAA8D,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AACjG;;AAEAD,EAAAA,OAAO,CAACE,WAAR,GAAsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAtB;AA6FAF,EAAAA,OAAO,CAACG,KAAR,GAAgB,KAAhB;AAEC,CAlGD;;AAkGmB,CAAC,YAAW;AACXN,EAAAA,GAAG,CAACE,OAAJ,CAAY,CAAC,kBAAD,CAAZ,EAAkC,UAASK,CAAT,EAAY;AAC1C,QAAI,OAAOH,MAAP,IAAiB,QAAjB,IAA6B,OAAOD,OAAP,IAAkB,QAA/C,IAA2DC,MAA/D,EAAuE;AACnEA,MAAAA,MAAM,CAACD,OAAP,GAAiBI,CAAjB;AACH;AACJ,GAJD;AAKH,CANE","sourcesContent":["ace.define(\"ace/snippets/tcl\",[\"require\",\"exports\",\"module\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nexports.snippetText = \"# #!/usr/bin/env tclsh\\n\\\r\nsnippet #!\\n\\\r\n\t#!/usr/bin/env tclsh\\n\\\r\n\t\\n\\\r\n# Process\\n\\\r\nsnippet pro\\n\\\r\n\tproc ${1:function_name} {${2:args}} {\\n\\\r\n\t\t${3:#body ...}\\n\\\r\n\t}\\n\\\r\n#xif\\n\\\r\nsnippet xif\\n\\\r\n\t${1:expr}? ${2:true} : ${3:false}\\n\\\r\n# Conditional\\n\\\r\nsnippet if\\n\\\r\n\tif {${1}} {\\n\\\r\n\t\t${2:# body...}\\n\\\r\n\t}\\n\\\r\n# Conditional if..else\\n\\\r\nsnippet ife\\n\\\r\n\tif {${1}} {\\n\\\r\n\t\t${2:# body...}\\n\\\r\n\t} else {\\n\\\r\n\t\t${3:# else...}\\n\\\r\n\t}\\n\\\r\n# Conditional if..elsif..else\\n\\\r\nsnippet ifee\\n\\\r\n\tif {${1}} {\\n\\\r\n\t\t${2:# body...}\\n\\\r\n\t} elseif {${3}} {\\n\\\r\n\t\t${4:# elsif...}\\n\\\r\n\t} else {\\n\\\r\n\t\t${5:# else...}\\n\\\r\n\t}\\n\\\r\n# If catch then\\n\\\r\nsnippet ifc\\n\\\r\n\tif { [catch {${1:#do something...}} ${2:err}] } {\\n\\\r\n\t\t${3:# handle failure...}\\n\\\r\n\t}\\n\\\r\n# Catch\\n\\\r\nsnippet catch\\n\\\r\n\tcatch {${1}} ${2:err} ${3:options}\\n\\\r\n# While Loop\\n\\\r\nsnippet wh\\n\\\r\n\twhile {${1}} {\\n\\\r\n\t\t${2:# body...}\\n\\\r\n\t}\\n\\\r\n# For Loop\\n\\\r\nsnippet for\\n\\\r\n\tfor {set ${2:var} 0} {$$2 < ${1:count}} {${3:incr} $2} {\\n\\\r\n\t\t${4:# body...}\\n\\\r\n\t}\\n\\\r\n# Foreach Loop\\n\\\r\nsnippet fore\\n\\\r\n\tforeach ${1:x} {${2:#list}} {\\n\\\r\n\t\t${3:# body...}\\n\\\r\n\t}\\n\\\r\n# after ms script...\\n\\\r\nsnippet af\\n\\\r\n\tafter ${1:ms} ${2:#do something}\\n\\\r\n# after cancel id\\n\\\r\nsnippet afc\\n\\\r\n\tafter cancel ${1:id or script}\\n\\\r\n# after idle\\n\\\r\nsnippet afi\\n\\\r\n\tafter idle ${1:script}\\n\\\r\n# after info id\\n\\\r\nsnippet afin\\n\\\r\n\tafter info ${1:id}\\n\\\r\n# Expr\\n\\\r\nsnippet exp\\n\\\r\n\texpr {${1:#expression here}}\\n\\\r\n# Switch\\n\\\r\nsnippet sw\\n\\\r\n\tswitch ${1:var} {\\n\\\r\n\t\t${3:pattern 1} {\\n\\\r\n\t\t\t${4:#do something}\\n\\\r\n\t\t}\\n\\\r\n\t\tdefault {\\n\\\r\n\t\t\t${2:#do something}\\n\\\r\n\t\t}\\n\\\r\n\t}\\n\\\r\n# Case\\n\\\r\nsnippet ca\\n\\\r\n\t${1:pattern} {\\n\\\r\n\t\t${2:#do something}\\n\\\r\n\t}${3}\\n\\\r\n# Namespace eval\\n\\\r\nsnippet ns\\n\\\r\n\tnamespace eval ${1:path} {${2:#script...}}\\n\\\r\n# Namespace current\\n\\\r\nsnippet nsc\\n\\\r\n\tnamespace current\\n\\\r\n\";\r\nexports.scope = \"tcl\";\r\n\r\n});                (function() {\r\n                    ace.require([\"ace/snippets/tcl\"], function(m) {\r\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\r\n                            module.exports = m;\r\n                        }\r\n                    });\r\n                })();\r\n            "]},"metadata":{},"sourceType":"script"}