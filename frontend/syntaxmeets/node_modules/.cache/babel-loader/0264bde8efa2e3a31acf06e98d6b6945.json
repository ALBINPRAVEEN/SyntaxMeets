{"ast":null,"code":"ace.define(\"ace/snippets/edifact\", [\"require\", \"exports\", \"module\"], function (require, exports, module) {\n  \"use strict\";\n\n  exports.snippetText = \"## Access Modifiers\\n\\\r\nsnippet u\\n\\\r\n\tUN\\n\\\r\nsnippet un\\n\\\r\n\tUNB\\n\\\r\nsnippet pr\\n\\\r\n\tprivate\\n\\\r\n##\\n\\\r\n## Annotations\\n\\\r\nsnippet before\\n\\\r\n\t@Before\\n\\\r\n\tstatic void ${1:intercept}(${2:args}) { ${3} }\\n\\\r\nsnippet mm\\n\\\r\n\t@ManyToMany\\n\\\r\n\t${1}\\n\\\r\nsnippet mo\\n\\\r\n\t@ManyToOne\\n\\\r\n\t${1}\\n\\\r\nsnippet om\\n\\\r\n\t@OneToMany${1:(cascade=CascadeType.ALL)}\\n\\\r\n\t${2}\\n\\\r\nsnippet oo\\n\\\r\n\t@OneToOne\\n\\\r\n\t${1}\\n\\\r\n##\\n\\\r\n## Basic Java packages and import\\n\\\r\nsnippet im\\n\\\r\n\timport\\n\\\r\nsnippet j.b\\n\\\r\n\tjava.beans.\\n\\\r\nsnippet j.i\\n\\\r\n\tjava.io.\\n\\\r\nsnippet j.m\\n\\\r\n\tjava.math.\\n\\\r\nsnippet j.n\\n\\\r\n\tjava.net.\\n\\\r\nsnippet j.u\\n\\\r\n\tjava.util.\\n\\\r\n##\\n\\\r\n## Class\\n\\\r\nsnippet cl\\n\\\r\n\tclass ${1:`Filename(\\\"\\\", \\\"untitled\\\")`} ${2}\\n\\\r\nsnippet in\\n\\\r\n\tinterface ${1:`Filename(\\\"\\\", \\\"untitled\\\")`} ${2:extends Parent}${3}\\n\\\r\nsnippet tc\\n\\\r\n\tpublic class ${1:`Filename()`} extends ${2:TestCase}\\n\\\r\n##\\n\\\r\n## Class Enhancements\\n\\\r\nsnippet ext\\n\\\r\n\textends \\n\\\r\nsnippet imp\\n\\\r\n\timplements\\n\\\r\n##\\n\\\r\n## Comments\\n\\\r\nsnippet /*\\n\\\r\n\t/*\\n\\\r\n\t * ${1}\\n\\\r\n\t */\\n\\\r\n##\\n\\\r\n## Constants\\n\\\r\nsnippet co\\n\\\r\n\tstatic public final ${1:String} ${2:var} = ${3};${4}\\n\\\r\nsnippet cos\\n\\\r\n\tstatic public final String ${1:var} = \\\"${2}\\\";${3}\\n\\\r\n##\\n\\\r\n## Control Statements\\n\\\r\nsnippet case\\n\\\r\n\tcase ${1}:\\n\\\r\n\t\t${2}\\n\\\r\nsnippet def\\n\\\r\n\tdefault:\\n\\\r\n\t\t${2}\\n\\\r\nsnippet el\\n\\\r\n\telse\\n\\\r\nsnippet elif\\n\\\r\n\telse if (${1}) ${2}\\n\\\r\nsnippet if\\n\\\r\n\tif (${1}) ${2}\\n\\\r\nsnippet sw\\n\\\r\n\tswitch (${1}) {\\n\\\r\n\t\t${2}\\n\\\r\n\t}\\n\\\r\n##\\n\\\r\n## Create a Method\\n\\\r\nsnippet m\\n\\\r\n\t${1:void} ${2:method}(${3}) ${4:throws }${5}\\n\\\r\n##\\n\\\r\n## Create a Variable\\n\\\r\nsnippet v\\n\\\r\n\t${1:String} ${2:var}${3: = null}${4};${5}\\n\\\r\n##\\n\\\r\n## Enhancements to Methods, variables, classes, etc.\\n\\\r\nsnippet ab\\n\\\r\n\tabstract\\n\\\r\nsnippet fi\\n\\\r\n\tfinal\\n\\\r\nsnippet st\\n\\\r\n\tstatic\\n\\\r\nsnippet sy\\n\\\r\n\tsynchronized\\n\\\r\n##\\n\\\r\n## Error Methods\\n\\\r\nsnippet err\\n\\\r\n\tSystem.err.print(\\\"${1:Message}\\\");\\n\\\r\nsnippet errf\\n\\\r\n\tSystem.err.printf(\\\"${1:Message}\\\", ${2:exception});\\n\\\r\nsnippet errln\\n\\\r\n\tSystem.err.println(\\\"${1:Message}\\\");\\n\\\r\n##\\n\\\r\n## Exception Handling\\n\\\r\nsnippet as\\n\\\r\n\tassert ${1:test} : \\\"${2:Failure message}\\\";${3}\\n\\\r\nsnippet ca\\n\\\r\n\tcatch(${1:Exception} ${2:e}) ${3}\\n\\\r\nsnippet thr\\n\\\r\n\tthrow\\n\\\r\nsnippet ths\\n\\\r\n\tthrows\\n\\\r\nsnippet try\\n\\\r\n\ttry {\\n\\\r\n\t\t${3}\\n\\\r\n\t} catch(${1:Exception} ${2:e}) {\\n\\\r\n\t}\\n\\\r\nsnippet tryf\\n\\\r\n\ttry {\\n\\\r\n\t\t${3}\\n\\\r\n\t} catch(${1:Exception} ${2:e}) {\\n\\\r\n\t} finally {\\n\\\r\n\t}\\n\\\r\n##\\n\\\r\n## Find Methods\\n\\\r\nsnippet findall\\n\\\r\n\tList<${1:listName}> ${2:items} = ${1}.findAll();${3}\\n\\\r\nsnippet findbyid\\n\\\r\n\t${1:var} ${2:item} = ${1}.findById(${3});${4}\\n\\\r\n##\\n\\\r\n## Javadocs\\n\\\r\nsnippet /**\\n\\\r\n\t/**\\n\\\r\n\t * ${1}\\n\\\r\n\t */\\n\\\r\nsnippet @au\\n\\\r\n\t@author `system(\\\"grep \\\\`id -un\\\\` /etc/passwd | cut -d \\\\\\\":\\\\\\\" -f5 | cut -d \\\\\\\",\\\\\\\" -f1\\\")`\\n\\\r\nsnippet @br\\n\\\r\n\t@brief ${1:Description}\\n\\\r\nsnippet @fi\\n\\\r\n\t@file ${1:`Filename()`}.java\\n\\\r\nsnippet @pa\\n\\\r\n\t@param ${1:param}\\n\\\r\nsnippet @re\\n\\\r\n\t@return ${1:param}\\n\\\r\n##\\n\\\r\n## Logger Methods\\n\\\r\nsnippet debug\\n\\\r\n\tLogger.debug(${1:param});${2}\\n\\\r\nsnippet error\\n\\\r\n\tLogger.error(${1:param});${2}\\n\\\r\nsnippet info\\n\\\r\n\tLogger.info(${1:param});${2}\\n\\\r\nsnippet warn\\n\\\r\n\tLogger.warn(${1:param});${2}\\n\\\r\n##\\n\\\r\n## Loops\\n\\\r\nsnippet enfor\\n\\\r\n\tfor (${1} : ${2}) ${3}\\n\\\r\nsnippet for\\n\\\r\n\tfor (${1}; ${2}; ${3}) ${4}\\n\\\r\nsnippet wh\\n\\\r\n\twhile (${1}) ${2}\\n\\\r\n##\\n\\\r\n## Main method\\n\\\r\nsnippet main\\n\\\r\n\tpublic static void main (String[] args) {\\n\\\r\n\t\t${1:/* code */}\\n\\\r\n\t}\\n\\\r\n##\\n\\\r\n## Print Methods\\n\\\r\nsnippet print\\n\\\r\n\tSystem.out.print(\\\"${1:Message}\\\");\\n\\\r\nsnippet printf\\n\\\r\n\tSystem.out.printf(\\\"${1:Message}\\\", ${2:args});\\n\\\r\nsnippet println\\n\\\r\n\tSystem.out.println(${1});\\n\\\r\n##\\n\\\r\n## Render Methods\\n\\\r\nsnippet ren\\n\\\r\n\trender(${1:param});${2}\\n\\\r\nsnippet rena\\n\\\r\n\trenderArgs.put(\\\"${1}\\\", ${2});${3}\\n\\\r\nsnippet renb\\n\\\r\n\trenderBinary(${1:param});${2}\\n\\\r\nsnippet renj\\n\\\r\n\trenderJSON(${1:param});${2}\\n\\\r\nsnippet renx\\n\\\r\n\trenderXml(${1:param});${2}\\n\\\r\n##\\n\\\r\n## Setter and Getter Methods\\n\\\r\nsnippet set\\n\\\r\n\t${1:public} void set${3:}(${2:String} ${4:}){\\n\\\r\n\t\tthis.$4 = $4;\\n\\\r\n\t}\\n\\\r\nsnippet get\\n\\\r\n\t${1:public} ${2:String} get${3:}(){\\n\\\r\n\t\treturn this.${4:};\\n\\\r\n\t}\\n\\\r\n##\\n\\\r\n## Terminate Methods or Loops\\n\\\r\nsnippet re\\n\\\r\n\treturn\\n\\\r\nsnippet br\\n\\\r\n\tbreak;\\n\\\r\n##\\n\\\r\n## Test Methods\\n\\\r\nsnippet t\\n\\\r\n\tpublic void test${1:Name}() throws Exception {\\n\\\r\n\t\t${2}\\n\\\r\n\t}\\n\\\r\nsnippet test\\n\\\r\n\t@Test\\n\\\r\n\tpublic void test${1:Name}() throws Exception {\\n\\\r\n\t\t${2}\\n\\\r\n\t}\\n\\\r\n##\\n\\\r\n## Utils\\n\\\r\nsnippet Sc\\n\\\r\n\tScanner\\n\\\r\n##\\n\\\r\n## Miscellaneous\\n\\\r\nsnippet action\\n\\\r\n\tpublic static void ${1:index}(${2:args}) { ${3} }\\n\\\r\nsnippet rnf\\n\\\r\n\tnotFound(${1:param});${2}\\n\\\r\nsnippet rnfin\\n\\\r\n\tnotFoundIfNull(${1:param});${2}\\n\\\r\nsnippet rr\\n\\\r\n\tredirect(${1:param});${2}\\n\\\r\nsnippet ru\\n\\\r\n\tunauthorized(${1:param});${2}\\n\\\r\nsnippet unless\\n\\\r\n\t(unless=${1:param});${2}\\n\\\r\n\";\n  exports.scope = \"edifact\";\n});\n\n(function () {\n  ace.require([\"ace/snippets/edifact\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["C:/Users/akash/Desktop/Project/React/SyntaxMeets/frontend/syntaxmeets/node_modules/ace-builds/src-noconflict/snippets/edifact.js"],"names":["ace","define","require","exports","module","snippetText","scope","m"],"mappings":"AAAAA,GAAG,CAACC,MAAJ,CAAW,sBAAX,EAAkC,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,CAAlC,EAAkE,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AACjG;;AAEAD,EAAAA,OAAO,CAACE,WAAR,GAAsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAtB;AAiPAF,EAAAA,OAAO,CAACG,KAAR,GAAgB,SAAhB;AAEH,CAtPD;;AAsPmB,CAAC,YAAW;AACXN,EAAAA,GAAG,CAACE,OAAJ,CAAY,CAAC,sBAAD,CAAZ,EAAsC,UAASK,CAAT,EAAY;AAC9C,QAAI,OAAOH,MAAP,IAAiB,QAAjB,IAA6B,OAAOD,OAAP,IAAkB,QAA/C,IAA2DC,MAA/D,EAAuE;AACnEA,MAAAA,MAAM,CAACD,OAAP,GAAiBI,CAAjB;AACH;AACJ,GAJD;AAKH,CANE","sourcesContent":["ace.define(\"ace/snippets/edifact\",[\"require\",\"exports\",\"module\"], function(require, exports, module) {\r\n    \"use strict\";\r\n    \r\n    exports.snippetText = \"## Access Modifiers\\n\\\r\nsnippet u\\n\\\r\n\tUN\\n\\\r\nsnippet un\\n\\\r\n\tUNB\\n\\\r\nsnippet pr\\n\\\r\n\tprivate\\n\\\r\n##\\n\\\r\n## Annotations\\n\\\r\nsnippet before\\n\\\r\n\t@Before\\n\\\r\n\tstatic void ${1:intercept}(${2:args}) { ${3} }\\n\\\r\nsnippet mm\\n\\\r\n\t@ManyToMany\\n\\\r\n\t${1}\\n\\\r\nsnippet mo\\n\\\r\n\t@ManyToOne\\n\\\r\n\t${1}\\n\\\r\nsnippet om\\n\\\r\n\t@OneToMany${1:(cascade=CascadeType.ALL)}\\n\\\r\n\t${2}\\n\\\r\nsnippet oo\\n\\\r\n\t@OneToOne\\n\\\r\n\t${1}\\n\\\r\n##\\n\\\r\n## Basic Java packages and import\\n\\\r\nsnippet im\\n\\\r\n\timport\\n\\\r\nsnippet j.b\\n\\\r\n\tjava.beans.\\n\\\r\nsnippet j.i\\n\\\r\n\tjava.io.\\n\\\r\nsnippet j.m\\n\\\r\n\tjava.math.\\n\\\r\nsnippet j.n\\n\\\r\n\tjava.net.\\n\\\r\nsnippet j.u\\n\\\r\n\tjava.util.\\n\\\r\n##\\n\\\r\n## Class\\n\\\r\nsnippet cl\\n\\\r\n\tclass ${1:`Filename(\\\"\\\", \\\"untitled\\\")`} ${2}\\n\\\r\nsnippet in\\n\\\r\n\tinterface ${1:`Filename(\\\"\\\", \\\"untitled\\\")`} ${2:extends Parent}${3}\\n\\\r\nsnippet tc\\n\\\r\n\tpublic class ${1:`Filename()`} extends ${2:TestCase}\\n\\\r\n##\\n\\\r\n## Class Enhancements\\n\\\r\nsnippet ext\\n\\\r\n\textends \\n\\\r\nsnippet imp\\n\\\r\n\timplements\\n\\\r\n##\\n\\\r\n## Comments\\n\\\r\nsnippet /*\\n\\\r\n\t/*\\n\\\r\n\t * ${1}\\n\\\r\n\t */\\n\\\r\n##\\n\\\r\n## Constants\\n\\\r\nsnippet co\\n\\\r\n\tstatic public final ${1:String} ${2:var} = ${3};${4}\\n\\\r\nsnippet cos\\n\\\r\n\tstatic public final String ${1:var} = \\\"${2}\\\";${3}\\n\\\r\n##\\n\\\r\n## Control Statements\\n\\\r\nsnippet case\\n\\\r\n\tcase ${1}:\\n\\\r\n\t\t${2}\\n\\\r\nsnippet def\\n\\\r\n\tdefault:\\n\\\r\n\t\t${2}\\n\\\r\nsnippet el\\n\\\r\n\telse\\n\\\r\nsnippet elif\\n\\\r\n\telse if (${1}) ${2}\\n\\\r\nsnippet if\\n\\\r\n\tif (${1}) ${2}\\n\\\r\nsnippet sw\\n\\\r\n\tswitch (${1}) {\\n\\\r\n\t\t${2}\\n\\\r\n\t}\\n\\\r\n##\\n\\\r\n## Create a Method\\n\\\r\nsnippet m\\n\\\r\n\t${1:void} ${2:method}(${3}) ${4:throws }${5}\\n\\\r\n##\\n\\\r\n## Create a Variable\\n\\\r\nsnippet v\\n\\\r\n\t${1:String} ${2:var}${3: = null}${4};${5}\\n\\\r\n##\\n\\\r\n## Enhancements to Methods, variables, classes, etc.\\n\\\r\nsnippet ab\\n\\\r\n\tabstract\\n\\\r\nsnippet fi\\n\\\r\n\tfinal\\n\\\r\nsnippet st\\n\\\r\n\tstatic\\n\\\r\nsnippet sy\\n\\\r\n\tsynchronized\\n\\\r\n##\\n\\\r\n## Error Methods\\n\\\r\nsnippet err\\n\\\r\n\tSystem.err.print(\\\"${1:Message}\\\");\\n\\\r\nsnippet errf\\n\\\r\n\tSystem.err.printf(\\\"${1:Message}\\\", ${2:exception});\\n\\\r\nsnippet errln\\n\\\r\n\tSystem.err.println(\\\"${1:Message}\\\");\\n\\\r\n##\\n\\\r\n## Exception Handling\\n\\\r\nsnippet as\\n\\\r\n\tassert ${1:test} : \\\"${2:Failure message}\\\";${3}\\n\\\r\nsnippet ca\\n\\\r\n\tcatch(${1:Exception} ${2:e}) ${3}\\n\\\r\nsnippet thr\\n\\\r\n\tthrow\\n\\\r\nsnippet ths\\n\\\r\n\tthrows\\n\\\r\nsnippet try\\n\\\r\n\ttry {\\n\\\r\n\t\t${3}\\n\\\r\n\t} catch(${1:Exception} ${2:e}) {\\n\\\r\n\t}\\n\\\r\nsnippet tryf\\n\\\r\n\ttry {\\n\\\r\n\t\t${3}\\n\\\r\n\t} catch(${1:Exception} ${2:e}) {\\n\\\r\n\t} finally {\\n\\\r\n\t}\\n\\\r\n##\\n\\\r\n## Find Methods\\n\\\r\nsnippet findall\\n\\\r\n\tList<${1:listName}> ${2:items} = ${1}.findAll();${3}\\n\\\r\nsnippet findbyid\\n\\\r\n\t${1:var} ${2:item} = ${1}.findById(${3});${4}\\n\\\r\n##\\n\\\r\n## Javadocs\\n\\\r\nsnippet /**\\n\\\r\n\t/**\\n\\\r\n\t * ${1}\\n\\\r\n\t */\\n\\\r\nsnippet @au\\n\\\r\n\t@author `system(\\\"grep \\\\`id -un\\\\` /etc/passwd | cut -d \\\\\\\":\\\\\\\" -f5 | cut -d \\\\\\\",\\\\\\\" -f1\\\")`\\n\\\r\nsnippet @br\\n\\\r\n\t@brief ${1:Description}\\n\\\r\nsnippet @fi\\n\\\r\n\t@file ${1:`Filename()`}.java\\n\\\r\nsnippet @pa\\n\\\r\n\t@param ${1:param}\\n\\\r\nsnippet @re\\n\\\r\n\t@return ${1:param}\\n\\\r\n##\\n\\\r\n## Logger Methods\\n\\\r\nsnippet debug\\n\\\r\n\tLogger.debug(${1:param});${2}\\n\\\r\nsnippet error\\n\\\r\n\tLogger.error(${1:param});${2}\\n\\\r\nsnippet info\\n\\\r\n\tLogger.info(${1:param});${2}\\n\\\r\nsnippet warn\\n\\\r\n\tLogger.warn(${1:param});${2}\\n\\\r\n##\\n\\\r\n## Loops\\n\\\r\nsnippet enfor\\n\\\r\n\tfor (${1} : ${2}) ${3}\\n\\\r\nsnippet for\\n\\\r\n\tfor (${1}; ${2}; ${3}) ${4}\\n\\\r\nsnippet wh\\n\\\r\n\twhile (${1}) ${2}\\n\\\r\n##\\n\\\r\n## Main method\\n\\\r\nsnippet main\\n\\\r\n\tpublic static void main (String[] args) {\\n\\\r\n\t\t${1:/* code */}\\n\\\r\n\t}\\n\\\r\n##\\n\\\r\n## Print Methods\\n\\\r\nsnippet print\\n\\\r\n\tSystem.out.print(\\\"${1:Message}\\\");\\n\\\r\nsnippet printf\\n\\\r\n\tSystem.out.printf(\\\"${1:Message}\\\", ${2:args});\\n\\\r\nsnippet println\\n\\\r\n\tSystem.out.println(${1});\\n\\\r\n##\\n\\\r\n## Render Methods\\n\\\r\nsnippet ren\\n\\\r\n\trender(${1:param});${2}\\n\\\r\nsnippet rena\\n\\\r\n\trenderArgs.put(\\\"${1}\\\", ${2});${3}\\n\\\r\nsnippet renb\\n\\\r\n\trenderBinary(${1:param});${2}\\n\\\r\nsnippet renj\\n\\\r\n\trenderJSON(${1:param});${2}\\n\\\r\nsnippet renx\\n\\\r\n\trenderXml(${1:param});${2}\\n\\\r\n##\\n\\\r\n## Setter and Getter Methods\\n\\\r\nsnippet set\\n\\\r\n\t${1:public} void set${3:}(${2:String} ${4:}){\\n\\\r\n\t\tthis.$4 = $4;\\n\\\r\n\t}\\n\\\r\nsnippet get\\n\\\r\n\t${1:public} ${2:String} get${3:}(){\\n\\\r\n\t\treturn this.${4:};\\n\\\r\n\t}\\n\\\r\n##\\n\\\r\n## Terminate Methods or Loops\\n\\\r\nsnippet re\\n\\\r\n\treturn\\n\\\r\nsnippet br\\n\\\r\n\tbreak;\\n\\\r\n##\\n\\\r\n## Test Methods\\n\\\r\nsnippet t\\n\\\r\n\tpublic void test${1:Name}() throws Exception {\\n\\\r\n\t\t${2}\\n\\\r\n\t}\\n\\\r\nsnippet test\\n\\\r\n\t@Test\\n\\\r\n\tpublic void test${1:Name}() throws Exception {\\n\\\r\n\t\t${2}\\n\\\r\n\t}\\n\\\r\n##\\n\\\r\n## Utils\\n\\\r\nsnippet Sc\\n\\\r\n\tScanner\\n\\\r\n##\\n\\\r\n## Miscellaneous\\n\\\r\nsnippet action\\n\\\r\n\tpublic static void ${1:index}(${2:args}) { ${3} }\\n\\\r\nsnippet rnf\\n\\\r\n\tnotFound(${1:param});${2}\\n\\\r\nsnippet rnfin\\n\\\r\n\tnotFoundIfNull(${1:param});${2}\\n\\\r\nsnippet rr\\n\\\r\n\tredirect(${1:param});${2}\\n\\\r\nsnippet ru\\n\\\r\n\tunauthorized(${1:param});${2}\\n\\\r\nsnippet unless\\n\\\r\n\t(unless=${1:param});${2}\\n\\\r\n\";\r\n    exports.scope = \"edifact\";\r\n    \r\n});                (function() {\r\n                    ace.require([\"ace/snippets/edifact\"], function(m) {\r\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\r\n                            module.exports = m;\r\n                        }\r\n                    });\r\n                })();\r\n            "]},"metadata":{},"sourceType":"script"}