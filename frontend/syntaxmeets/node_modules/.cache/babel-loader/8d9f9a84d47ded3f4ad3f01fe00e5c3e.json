{"ast":null,"code":"ace.define(\"ace/mode/doc_comment_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var DocCommentHighlightRules = function () {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.doc.tag\",\n        regex: \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n\n      }, DocCommentHighlightRules.getTagRule(), {\n        defaultToken: \"comment.doc\",\n        caseInsensitive: true\n      }]\n    };\n  };\n\n  oop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\n  DocCommentHighlightRules.getTagRule = function (start) {\n    return {\n      token: \"comment.doc.tag.storage.type\",\n      regex: \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n  };\n\n  DocCommentHighlightRules.getStartRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // doc comment\n      regex: \"\\\\/\\\\*(?=\\\\*)\",\n      next: start\n    };\n  };\n\n  DocCommentHighlightRules.getEndRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // closing comment\n      regex: \"\\\\*\\\\/\",\n      next: start\n    };\n  };\n\n  exports.DocCommentHighlightRules = DocCommentHighlightRules;\n});\nace.define(\"ace/mode/c_cpp_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/doc_comment_highlight_rules\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var cFunctions = exports.cFunctions = \"\\\\b(?:hypot(?:f|l)?|s(?:scanf|ystem|nprintf|ca(?:nf|lb(?:n(?:f|l)?|ln(?:f|l)?))|i(?:n(?:h(?:f|l)?|f|l)?|gn(?:al|bit))|tr(?:s(?:tr|pn)|nc(?:py|at|mp)|c(?:spn|hr|oll|py|at|mp)|to(?:imax|d|u(?:l(?:l)?|max)|k|f|l(?:d|l)?)|error|pbrk|ftime|len|rchr|xfrm)|printf|et(?:jmp|vbuf|locale|buf)|qrt(?:f|l)?|w(?:scanf|printf)|rand)|n(?:e(?:arbyint(?:f|l)?|xt(?:toward(?:f|l)?|after(?:f|l)?))|an(?:f|l)?)|c(?:s(?:in(?:h(?:f|l)?|f|l)?|qrt(?:f|l)?)|cos(?:h(?:f)?|f|l)?|imag(?:f|l)?|t(?:ime|an(?:h(?:f|l)?|f|l)?)|o(?:s(?:h(?:f|l)?|f|l)?|nj(?:f|l)?|pysign(?:f|l)?)|p(?:ow(?:f|l)?|roj(?:f|l)?)|e(?:il(?:f|l)?|xp(?:f|l)?)|l(?:o(?:ck|g(?:f|l)?)|earerr)|a(?:sin(?:h(?:f|l)?|f|l)?|cos(?:h(?:f|l)?|f|l)?|tan(?:h(?:f|l)?|f|l)?|lloc|rg(?:f|l)?|bs(?:f|l)?)|real(?:f|l)?|brt(?:f|l)?)|t(?:ime|o(?:upper|lower)|an(?:h(?:f|l)?|f|l)?|runc(?:f|l)?|gamma(?:f|l)?|mp(?:nam|file))|i(?:s(?:space|n(?:ormal|an)|cntrl|inf|digit|u(?:nordered|pper)|p(?:unct|rint)|finite|w(?:space|c(?:ntrl|type)|digit|upper|p(?:unct|rint)|lower|al(?:num|pha)|graph|xdigit|blank)|l(?:ower|ess(?:equal|greater)?)|al(?:num|pha)|gr(?:eater(?:equal)?|aph)|xdigit|blank)|logb(?:f|l)?|max(?:div|abs))|di(?:v|fftime)|_Exit|unget(?:c|wc)|p(?:ow(?:f|l)?|ut(?:s|c(?:har)?|wc(?:har)?)|error|rintf)|e(?:rf(?:c(?:f|l)?|f|l)?|x(?:it|p(?:2(?:f|l)?|f|l|m1(?:f|l)?)?))|v(?:s(?:scanf|nprintf|canf|printf|w(?:scanf|printf))|printf|f(?:scanf|printf|w(?:scanf|printf))|w(?:scanf|printf)|a_(?:start|copy|end|arg))|qsort|f(?:s(?:canf|e(?:tpos|ek))|close|tell|open|dim(?:f|l)?|p(?:classify|ut(?:s|c|w(?:s|c))|rintf)|e(?:holdexcept|set(?:e(?:nv|xceptflag)|round)|clearexcept|testexcept|of|updateenv|r(?:aiseexcept|ror)|get(?:e(?:nv|xceptflag)|round))|flush|w(?:scanf|ide|printf|rite)|loor(?:f|l)?|abs(?:f|l)?|get(?:s|c|pos|w(?:s|c))|re(?:open|e|ad|xp(?:f|l)?)|m(?:in(?:f|l)?|od(?:f|l)?|a(?:f|l|x(?:f|l)?)?))|l(?:d(?:iv|exp(?:f|l)?)|o(?:ngjmp|cal(?:time|econv)|g(?:1(?:p(?:f|l)?|0(?:f|l)?)|2(?:f|l)?|f|l|b(?:f|l)?)?)|abs|l(?:div|abs|r(?:int(?:f|l)?|ound(?:f|l)?))|r(?:int(?:f|l)?|ound(?:f|l)?)|gamma(?:f|l)?)|w(?:scanf|c(?:s(?:s(?:tr|pn)|nc(?:py|at|mp)|c(?:spn|hr|oll|py|at|mp)|to(?:imax|d|u(?:l(?:l)?|max)|k|f|l(?:d|l)?|mbs)|pbrk|ftime|len|r(?:chr|tombs)|xfrm)|to(?:b|mb)|rtomb)|printf|mem(?:set|c(?:hr|py|mp)|move))|a(?:s(?:sert|ctime|in(?:h(?:f|l)?|f|l)?)|cos(?:h(?:f|l)?|f|l)?|t(?:o(?:i|f|l(?:l)?)|exit|an(?:h(?:f|l)?|2(?:f|l)?|f|l)?)|b(?:s|ort))|g(?:et(?:s|c(?:har)?|env|wc(?:har)?)|mtime)|r(?:int(?:f|l)?|ound(?:f|l)?|e(?:name|alloc|wind|m(?:ove|quo(?:f|l)?|ainder(?:f|l)?))|a(?:nd|ise))|b(?:search|towc)|m(?:odf(?:f|l)?|em(?:set|c(?:hr|py|mp)|move)|ktime|alloc|b(?:s(?:init|towcs|rtowcs)|towc|len|r(?:towc|len))))\\\\b\";\n\n  var c_cppHighlightRules = function () {\n    var keywordControls = \"break|case|continue|default|do|else|for|goto|if|_Pragma|\" + \"return|switch|while|catch|operator|try|throw|using\";\n    var storageType = \"asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|\" + \"_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void|\" + \"class|wchar_t|template|char16_t|char32_t\";\n    var storageModifiers = \"const|extern|register|restrict|static|volatile|inline|private|\" + \"protected|public|friend|explicit|virtual|export|mutable|typename|\" + \"constexpr|new|delete|alignas|alignof|decltype|noexcept|thread_local\";\n    var keywordOperators = \"and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|\" + \"const_cast|dynamic_cast|reinterpret_cast|static_cast|sizeof|namespace\";\n    var builtinConstants = \"NULL|true|false|TRUE|FALSE|nullptr\";\n    var keywordMapper = this.$keywords = this.createKeywordMapper({\n      \"keyword.control\": keywordControls,\n      \"storage.type\": storageType,\n      \"storage.modifier\": storageModifiers,\n      \"keyword.operator\": keywordOperators,\n      \"variable.language\": \"this\",\n      \"constant.language\": builtinConstants\n    }, \"identifier\");\n    var identifierRe = \"[a-zA-Z\\\\$_\\u00a1-\\uffff][a-zA-Z\\\\d\\\\$_\\u00a1-\\uffff]*\\\\b\";\n    var escapeRe = /\\\\(?:['\"?\\\\abfnrtv]|[0-7]{1,3}|x[a-fA-F\\d]{2}|u[a-fA-F\\d]{4}U[a-fA-F\\d]{8}|.)/.source;\n    var formatRe = \"%\" + /(\\d+\\$)?/.source // field (argument #)\n    + /[#0\\- +']*/.source // flags\n    + /[,;:_]?/.source // separator character (AltiVec)\n    + /((-?\\d+)|\\*(-?\\d+\\$)?)?/.source // minimum field width\n    + /(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?/.source // precision\n    + /(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?/.source // length modifier\n    + /(\\[[^\"\\]]+\\]|[diouxXDOUeEfFgGaACcSspn%])/.source; // conversion type\n\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"//$\",\n        next: \"start\"\n      }, {\n        token: \"comment\",\n        regex: \"//\",\n        next: \"singleLineComment\"\n      }, DocCommentHighlightRules.getStartRule(\"doc-start\"), {\n        token: \"comment\",\n        // multi line comment\n        regex: \"\\\\/\\\\*\",\n        next: \"comment\"\n      }, {\n        token: \"string\",\n        // character\n        regex: \"'(?:\" + escapeRe + \"|.)?'\"\n      }, {\n        token: \"string.start\",\n        regex: '\"',\n        stateName: \"qqstring\",\n        next: [{\n          token: \"string\",\n          regex: /\\\\\\s*$/,\n          next: \"qqstring\"\n        }, {\n          token: \"constant.language.escape\",\n          regex: escapeRe\n        }, {\n          token: \"constant.language.escape\",\n          regex: formatRe\n        }, {\n          token: \"string.end\",\n          regex: '\"|$',\n          next: \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        token: \"string.start\",\n        regex: 'R\"\\\\(',\n        stateName: \"rawString\",\n        next: [{\n          token: \"string.end\",\n          regex: '\\\\)\"',\n          next: \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        token: \"constant.numeric\",\n        // hex\n        regex: \"0[xX][0-9a-fA-F]+(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\n      }, {\n        token: \"keyword\",\n        // pre-compiler directives\n        regex: \"#\\\\s*(?:include|import|pragma|line|define|undef)\\\\b\",\n        next: \"directive\"\n      }, {\n        token: \"keyword\",\n        // special case pre-compiler directive\n        regex: \"#\\\\s*(?:endif|if|ifdef|else|elif|ifndef)\\\\b\"\n      }, {\n        token: \"support.function.C99.c\",\n        regex: cFunctions\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\"\n      }, {\n        token: \"keyword.operator\",\n        regex: /--|\\+\\+|<<=|>>=|>>>=|<>|&&|\\|\\||\\?:|[*%\\/+\\-&\\^|~!<>=]=?/\n      }, {\n        token: \"punctuation.operator\",\n        regex: \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }],\n      \"comment\": [{\n        token: \"comment\",\n        // closing comment\n        regex: \"\\\\*\\\\/\",\n        next: \"start\"\n      }, {\n        defaultToken: \"comment\"\n      }],\n      \"singleLineComment\": [{\n        token: \"comment\",\n        regex: /\\\\$/,\n        next: \"singleLineComment\"\n      }, {\n        token: \"comment\",\n        regex: /$/,\n        next: \"start\"\n      }, {\n        defaultToken: \"comment\"\n      }],\n      \"directive\": [{\n        token: \"constant.other.multiline\",\n        regex: /\\\\/\n      }, {\n        token: \"constant.other.multiline\",\n        regex: /.*\\\\/\n      }, {\n        token: \"constant.other\",\n        regex: \"\\\\s*<.+?>\",\n        next: \"start\"\n      }, {\n        token: \"constant.other\",\n        // single line\n        regex: '\\\\s*[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]',\n        next: \"start\"\n      }, {\n        token: \"constant.other\",\n        // single line\n        regex: \"\\\\s*['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\",\n        next: \"start\"\n      }, {\n        token: \"constant.other\",\n        regex: /[^\\\\\\/]+/,\n        next: \"start\"\n      }]\n    };\n    this.embedRules(DocCommentHighlightRules, \"doc-\", [DocCommentHighlightRules.getEndRule(\"start\")]);\n    this.normalizeRules();\n  };\n\n  oop.inherits(c_cppHighlightRules, TextHighlightRules);\n  exports.c_cppHighlightRules = c_cppHighlightRules;\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n\n  var MatchingBraceOutdent = function () {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/c_cpp\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/c_cpp_highlight_rules\", \"ace/mode/matching_brace_outdent\", \"ace/range\", \"ace/mode/behaviour/cstyle\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var c_cppHighlightRules = require(\"./c_cpp_highlight_rules\").c_cppHighlightRules;\n\n  var MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n\n  var Range = require(\"../range\").Range;\n\n  var CstyleBehaviour = require(\"./behaviour/cstyle\").CstyleBehaviour;\n\n  var CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function () {\n    this.HighlightRules = c_cppHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new CstyleBehaviour();\n    this.foldingRules = new CStyleFoldMode();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n      var endState = tokenizedLine.state;\n\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n\n        if (match) {\n          indent += tab;\n        }\n      } else if (state == \"doc-start\") {\n        if (endState == \"start\") {\n          return \"\";\n        }\n\n        var match = line.match(/^\\s*(\\/?)\\*/);\n\n        if (match) {\n          if (match[1]) {\n            indent += \" \";\n          }\n\n          indent += \"* \";\n        }\n      }\n\n      return indent;\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/c_cpp\";\n    this.snippetFileId = \"ace/snippets/c_cpp\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\nace.define(\"ace/mode/protobuf_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var ProtobufHighlightRules = function () {\n    var builtinTypes = \"double|float|int32|int64|uint32|uint64|sint32|\" + \"sint64|fixed32|fixed64|sfixed32|sfixed64|bool|\" + \"string|bytes\";\n    var keywordDeclaration = \"message|required|optional|repeated|package|\" + \"import|option|enum\";\n    var keywordMapper = this.createKeywordMapper({\n      \"keyword.declaration.protobuf\": keywordDeclaration,\n      \"support.type\": builtinTypes\n    }, \"identifier\");\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: /\\/\\/.*$/\n      }, {\n        token: \"comment\",\n        regex: /\\/\\*/,\n        next: \"comment\"\n      }, {\n        token: \"constant\",\n        regex: \"<[^>]+>\"\n      }, {\n        regex: \"=\",\n        token: \"keyword.operator.assignment.protobuf\"\n      }, {\n        token: \"string\",\n        // single line\n        regex: '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n      }, {\n        token: \"string\",\n        // single line\n        regex: '[\\'](?:(?:\\\\\\\\.)|(?:[^\\'\\\\\\\\]))*?[\\']'\n      }, {\n        token: \"constant.numeric\",\n        // hex\n        regex: \"0[xX][0-9a-fA-F]+\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n      }],\n      \"comment\": [{\n        token: \"comment\",\n        // closing comment\n        regex: \"\\\\*\\\\/\",\n        next: \"start\"\n      }, {\n        defaultToken: \"comment\"\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  oop.inherits(ProtobufHighlightRules, TextHighlightRules);\n  exports.ProtobufHighlightRules = ProtobufHighlightRules;\n});\nace.define(\"ace/mode/protobuf\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/c_cpp\", \"ace/mode/protobuf_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var CMode = require(\"./c_cpp\").Mode;\n\n  var ProtobufHighlightRules = require(\"./protobuf_highlight_rules\").ProtobufHighlightRules;\n\n  var CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function () {\n    CMode.call(this);\n    this.foldingRules = new CStyleFoldMode();\n    this.HighlightRules = ProtobufHighlightRules;\n  };\n\n  oop.inherits(Mode, CMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n    this.$id = \"ace/mode/protobuf\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/protobuf\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["C:/Users/akash/Desktop/Project/React/SyntaxMeets/frontend/syntaxmeets/node_modules/ace-builds/src-noconflict/mode-protobuf.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","DocCommentHighlightRules","$rules","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","start","getStartRule","next","getEndRule","cFunctions","c_cppHighlightRules","keywordControls","storageType","storageModifiers","keywordOperators","builtinConstants","keywordMapper","$keywords","createKeywordMapper","identifierRe","escapeRe","source","formatRe","stateName","embedRules","normalizeRules","Range","MatchingBraceOutdent","checkOutdent","line","input","test","autoOutdent","doc","row","getLine","match","column","length","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","subRange","re","depth","m","exec","TextMode","Mode","CstyleBehaviour","CStyleFoldMode","HighlightRules","$outdent","$behaviour","foldingRules","lineCommentStart","blockComment","getNextLineIndent","state","tab","tokenizedLine","getTokenizer","getLineTokens","tokens","endState","type","$id","snippetFileId","ProtobufHighlightRules","builtinTypes","keywordDeclaration","CMode"],"mappings":"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","sourcesContent":["ace.define(\"ace/mode/doc_comment_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\nvar DocCommentHighlightRules = function() {\r\n    this.$rules = {\r\n        \"start\" : [ {\r\n            token : \"comment.doc.tag\",\r\n            regex : \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\r\n        }, \r\n        DocCommentHighlightRules.getTagRule(),\r\n        {\r\n            defaultToken : \"comment.doc\",\r\n            caseInsensitive: true\r\n        }]\r\n    };\r\n};\r\n\r\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\r\n\r\nDocCommentHighlightRules.getTagRule = function(start) {\r\n    return {\r\n        token : \"comment.doc.tag.storage.type\",\r\n        regex : \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\r\n    };\r\n};\r\n\r\nDocCommentHighlightRules.getStartRule = function(start) {\r\n    return {\r\n        token : \"comment.doc\", // doc comment\r\n        regex : \"\\\\/\\\\*(?=\\\\*)\",\r\n        next  : start\r\n    };\r\n};\r\n\r\nDocCommentHighlightRules.getEndRule = function (start) {\r\n    return {\r\n        token : \"comment.doc\", // closing comment\r\n        regex : \"\\\\*\\\\/\",\r\n        next  : start\r\n    };\r\n};\r\n\r\n\r\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\r\n\r\n});\r\n\r\nace.define(\"ace/mode/c_cpp_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/doc_comment_highlight_rules\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\nvar cFunctions = exports.cFunctions = \"\\\\b(?:hypot(?:f|l)?|s(?:scanf|ystem|nprintf|ca(?:nf|lb(?:n(?:f|l)?|ln(?:f|l)?))|i(?:n(?:h(?:f|l)?|f|l)?|gn(?:al|bit))|tr(?:s(?:tr|pn)|nc(?:py|at|mp)|c(?:spn|hr|oll|py|at|mp)|to(?:imax|d|u(?:l(?:l)?|max)|k|f|l(?:d|l)?)|error|pbrk|ftime|len|rchr|xfrm)|printf|et(?:jmp|vbuf|locale|buf)|qrt(?:f|l)?|w(?:scanf|printf)|rand)|n(?:e(?:arbyint(?:f|l)?|xt(?:toward(?:f|l)?|after(?:f|l)?))|an(?:f|l)?)|c(?:s(?:in(?:h(?:f|l)?|f|l)?|qrt(?:f|l)?)|cos(?:h(?:f)?|f|l)?|imag(?:f|l)?|t(?:ime|an(?:h(?:f|l)?|f|l)?)|o(?:s(?:h(?:f|l)?|f|l)?|nj(?:f|l)?|pysign(?:f|l)?)|p(?:ow(?:f|l)?|roj(?:f|l)?)|e(?:il(?:f|l)?|xp(?:f|l)?)|l(?:o(?:ck|g(?:f|l)?)|earerr)|a(?:sin(?:h(?:f|l)?|f|l)?|cos(?:h(?:f|l)?|f|l)?|tan(?:h(?:f|l)?|f|l)?|lloc|rg(?:f|l)?|bs(?:f|l)?)|real(?:f|l)?|brt(?:f|l)?)|t(?:ime|o(?:upper|lower)|an(?:h(?:f|l)?|f|l)?|runc(?:f|l)?|gamma(?:f|l)?|mp(?:nam|file))|i(?:s(?:space|n(?:ormal|an)|cntrl|inf|digit|u(?:nordered|pper)|p(?:unct|rint)|finite|w(?:space|c(?:ntrl|type)|digit|upper|p(?:unct|rint)|lower|al(?:num|pha)|graph|xdigit|blank)|l(?:ower|ess(?:equal|greater)?)|al(?:num|pha)|gr(?:eater(?:equal)?|aph)|xdigit|blank)|logb(?:f|l)?|max(?:div|abs))|di(?:v|fftime)|_Exit|unget(?:c|wc)|p(?:ow(?:f|l)?|ut(?:s|c(?:har)?|wc(?:har)?)|error|rintf)|e(?:rf(?:c(?:f|l)?|f|l)?|x(?:it|p(?:2(?:f|l)?|f|l|m1(?:f|l)?)?))|v(?:s(?:scanf|nprintf|canf|printf|w(?:scanf|printf))|printf|f(?:scanf|printf|w(?:scanf|printf))|w(?:scanf|printf)|a_(?:start|copy|end|arg))|qsort|f(?:s(?:canf|e(?:tpos|ek))|close|tell|open|dim(?:f|l)?|p(?:classify|ut(?:s|c|w(?:s|c))|rintf)|e(?:holdexcept|set(?:e(?:nv|xceptflag)|round)|clearexcept|testexcept|of|updateenv|r(?:aiseexcept|ror)|get(?:e(?:nv|xceptflag)|round))|flush|w(?:scanf|ide|printf|rite)|loor(?:f|l)?|abs(?:f|l)?|get(?:s|c|pos|w(?:s|c))|re(?:open|e|ad|xp(?:f|l)?)|m(?:in(?:f|l)?|od(?:f|l)?|a(?:f|l|x(?:f|l)?)?))|l(?:d(?:iv|exp(?:f|l)?)|o(?:ngjmp|cal(?:time|econv)|g(?:1(?:p(?:f|l)?|0(?:f|l)?)|2(?:f|l)?|f|l|b(?:f|l)?)?)|abs|l(?:div|abs|r(?:int(?:f|l)?|ound(?:f|l)?))|r(?:int(?:f|l)?|ound(?:f|l)?)|gamma(?:f|l)?)|w(?:scanf|c(?:s(?:s(?:tr|pn)|nc(?:py|at|mp)|c(?:spn|hr|oll|py|at|mp)|to(?:imax|d|u(?:l(?:l)?|max)|k|f|l(?:d|l)?|mbs)|pbrk|ftime|len|r(?:chr|tombs)|xfrm)|to(?:b|mb)|rtomb)|printf|mem(?:set|c(?:hr|py|mp)|move))|a(?:s(?:sert|ctime|in(?:h(?:f|l)?|f|l)?)|cos(?:h(?:f|l)?|f|l)?|t(?:o(?:i|f|l(?:l)?)|exit|an(?:h(?:f|l)?|2(?:f|l)?|f|l)?)|b(?:s|ort))|g(?:et(?:s|c(?:har)?|env|wc(?:har)?)|mtime)|r(?:int(?:f|l)?|ound(?:f|l)?|e(?:name|alloc|wind|m(?:ove|quo(?:f|l)?|ainder(?:f|l)?))|a(?:nd|ise))|b(?:search|towc)|m(?:odf(?:f|l)?|em(?:set|c(?:hr|py|mp)|move)|ktime|alloc|b(?:s(?:init|towcs|rtowcs)|towc|len|r(?:towc|len))))\\\\b\";\r\n\r\nvar c_cppHighlightRules = function() {\r\n\r\n    var keywordControls = (\r\n        \"break|case|continue|default|do|else|for|goto|if|_Pragma|\" +\r\n        \"return|switch|while|catch|operator|try|throw|using\"\r\n    );\r\n    \r\n    var storageType = (\r\n        \"asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|\" +\r\n        \"_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void|\" +\r\n        \"class|wchar_t|template|char16_t|char32_t\"\r\n    );\r\n\r\n    var storageModifiers = (\r\n        \"const|extern|register|restrict|static|volatile|inline|private|\" +\r\n        \"protected|public|friend|explicit|virtual|export|mutable|typename|\" +\r\n        \"constexpr|new|delete|alignas|alignof|decltype|noexcept|thread_local\"\r\n    );\r\n\r\n    var keywordOperators = (\r\n        \"and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|\" +\r\n        \"const_cast|dynamic_cast|reinterpret_cast|static_cast|sizeof|namespace\"\r\n    );\r\n\r\n    var builtinConstants = (\r\n        \"NULL|true|false|TRUE|FALSE|nullptr\"\r\n    );\r\n\r\n    var keywordMapper = this.$keywords = this.createKeywordMapper({\r\n        \"keyword.control\" : keywordControls,\r\n        \"storage.type\" : storageType,\r\n        \"storage.modifier\" : storageModifiers,\r\n        \"keyword.operator\" : keywordOperators,\r\n        \"variable.language\": \"this\",\r\n        \"constant.language\": builtinConstants\r\n    }, \"identifier\");\r\n\r\n    var identifierRe = \"[a-zA-Z\\\\$_\\u00a1-\\uffff][a-zA-Z\\\\d\\\\$_\\u00a1-\\uffff]*\\\\b\";\r\n    var escapeRe = /\\\\(?:['\"?\\\\abfnrtv]|[0-7]{1,3}|x[a-fA-F\\d]{2}|u[a-fA-F\\d]{4}U[a-fA-F\\d]{8}|.)/.source;\r\n    var formatRe = \"%\"\r\n          + /(\\d+\\$)?/.source // field (argument #)\r\n          + /[#0\\- +']*/.source // flags\r\n          + /[,;:_]?/.source // separator character (AltiVec)\r\n          + /((-?\\d+)|\\*(-?\\d+\\$)?)?/.source // minimum field width\r\n          + /(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?/.source // precision\r\n          + /(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?/.source // length modifier\r\n          + /(\\[[^\"\\]]+\\]|[diouxXDOUeEfFgGaACcSspn%])/.source; // conversion type\r\n\r\n    this.$rules = { \r\n        \"start\" : [\r\n            {\r\n                token : \"comment\",\r\n                regex : \"//$\",\r\n                next : \"start\"\r\n            }, {\r\n                token : \"comment\",\r\n                regex : \"//\",\r\n                next : \"singleLineComment\"\r\n            },\r\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\r\n            {\r\n                token : \"comment\", // multi line comment\r\n                regex : \"\\\\/\\\\*\",\r\n                next : \"comment\"\r\n            }, {\r\n                token : \"string\", // character\r\n                regex : \"'(?:\" + escapeRe + \"|.)?'\"\r\n            }, {\r\n                token : \"string.start\",\r\n                regex : '\"', \r\n                stateName: \"qqstring\",\r\n                next: [\r\n                    { token: \"string\", regex: /\\\\\\s*$/, next: \"qqstring\" },\r\n                    { token: \"constant.language.escape\", regex: escapeRe },\r\n                    { token: \"constant.language.escape\", regex: formatRe },\r\n                    { token: \"string.end\", regex: '\"|$', next: \"start\" },\r\n                    { defaultToken: \"string\"}\r\n                ]\r\n            }, {\r\n                token : \"string.start\",\r\n                regex : 'R\"\\\\(', \r\n                stateName: \"rawString\",\r\n                next: [\r\n                    { token: \"string.end\", regex: '\\\\)\"', next: \"start\" },\r\n                    { defaultToken: \"string\"}\r\n                ]\r\n            }, {\r\n                token : \"constant.numeric\", // hex\r\n                regex : \"0[xX][0-9a-fA-F]+(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\r\n            }, {\r\n                token : \"constant.numeric\", // float\r\n                regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\r\n            }, {\r\n                token : \"keyword\", // pre-compiler directives\r\n                regex : \"#\\\\s*(?:include|import|pragma|line|define|undef)\\\\b\",\r\n                next  : \"directive\"\r\n            }, {\r\n                token : \"keyword\", // special case pre-compiler directive\r\n                regex : \"#\\\\s*(?:endif|if|ifdef|else|elif|ifndef)\\\\b\"\r\n            }, {\r\n                token : \"support.function.C99.c\",\r\n                regex : cFunctions\r\n            }, {\r\n                token : keywordMapper,\r\n                regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\"\r\n            }, {\r\n                token : \"keyword.operator\",\r\n                regex : /--|\\+\\+|<<=|>>=|>>>=|<>|&&|\\|\\||\\?:|[*%\\/+\\-&\\^|~!<>=]=?/\r\n            }, {\r\n              token : \"punctuation.operator\",\r\n              regex : \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.\"\r\n            }, {\r\n                token : \"paren.lparen\",\r\n                regex : \"[[({]\"\r\n            }, {\r\n                token : \"paren.rparen\",\r\n                regex : \"[\\\\])}]\"\r\n            }, {\r\n                token : \"text\",\r\n                regex : \"\\\\s+\"\r\n            }\r\n        ],\r\n        \"comment\" : [\r\n            {\r\n                token : \"comment\", // closing comment\r\n                regex : \"\\\\*\\\\/\",\r\n                next : \"start\"\r\n            }, {\r\n                defaultToken : \"comment\"\r\n            }\r\n        ],\r\n        \"singleLineComment\" : [\r\n            {\r\n                token : \"comment\",\r\n                regex : /\\\\$/,\r\n                next : \"singleLineComment\"\r\n            }, {\r\n                token : \"comment\",\r\n                regex : /$/,\r\n                next : \"start\"\r\n            }, {\r\n                defaultToken: \"comment\"\r\n            }\r\n        ],\r\n        \"directive\" : [\r\n            {\r\n                token : \"constant.other.multiline\",\r\n                regex : /\\\\/\r\n            },\r\n            {\r\n                token : \"constant.other.multiline\",\r\n                regex : /.*\\\\/\r\n            },\r\n            {\r\n                token : \"constant.other\",\r\n                regex : \"\\\\s*<.+?>\",\r\n                next : \"start\"\r\n            },\r\n            {\r\n                token : \"constant.other\", // single line\r\n                regex : '\\\\s*[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]',\r\n                next : \"start\"\r\n            }, \r\n            {\r\n                token : \"constant.other\", // single line\r\n                regex : \"\\\\s*['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\",\r\n                next : \"start\"\r\n            },\r\n            {\r\n                token : \"constant.other\",\r\n                regex : /[^\\\\\\/]+/,\r\n                next : \"start\"\r\n            }\r\n        ]\r\n    };\r\n\r\n    this.embedRules(DocCommentHighlightRules, \"doc-\",\r\n        [ DocCommentHighlightRules.getEndRule(\"start\") ]);\r\n    this.normalizeRules();\r\n};\r\n\r\noop.inherits(c_cppHighlightRules, TextHighlightRules);\r\n\r\nexports.c_cppHighlightRules = c_cppHighlightRules;\r\n});\r\n\r\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar Range = require(\"../range\").Range;\r\n\r\nvar MatchingBraceOutdent = function() {};\r\n\r\n(function() {\r\n\r\n    this.checkOutdent = function(line, input) {\r\n        if (! /^\\s+$/.test(line))\r\n            return false;\r\n\r\n        return /^\\s*\\}/.test(input);\r\n    };\r\n\r\n    this.autoOutdent = function(doc, row) {\r\n        var line = doc.getLine(row);\r\n        var match = line.match(/^(\\s*\\})/);\r\n\r\n        if (!match) return 0;\r\n\r\n        var column = match[1].length;\r\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\r\n\r\n        if (!openBracePos || openBracePos.row == row) return 0;\r\n\r\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\r\n        doc.replace(new Range(row, 0, row, column-1), indent);\r\n    };\r\n\r\n    this.$getIndent = function(line) {\r\n        return line.match(/^\\s*/)[0];\r\n    };\r\n\r\n}).call(MatchingBraceOutdent.prototype);\r\n\r\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\r\n});\r\n\r\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../../lib/oop\");\r\nvar Range = require(\"../../range\").Range;\r\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\r\n\r\nvar FoldMode = exports.FoldMode = function(commentRegex) {\r\n    if (commentRegex) {\r\n        this.foldingStartMarker = new RegExp(\r\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\r\n        );\r\n        this.foldingStopMarker = new RegExp(\r\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\r\n        );\r\n    }\r\n};\r\noop.inherits(FoldMode, BaseFoldMode);\r\n\r\n(function() {\r\n    \r\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\r\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\r\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\r\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\r\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\r\n    this._getFoldWidgetBase = this.getFoldWidget;\r\n    this.getFoldWidget = function(session, foldStyle, row) {\r\n        var line = session.getLine(row);\r\n    \r\n        if (this.singleLineBlockCommentRe.test(line)) {\r\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\r\n                return \"\";\r\n        }\r\n    \r\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\r\n    \r\n        if (!fw && this.startRegionRe.test(line))\r\n            return \"start\"; // lineCommentRegionStart\r\n    \r\n        return fw;\r\n    };\r\n\r\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\r\n        var line = session.getLine(row);\r\n        \r\n        if (this.startRegionRe.test(line))\r\n            return this.getCommentRegionBlock(session, line, row);\r\n        \r\n        var match = line.match(this.foldingStartMarker);\r\n        if (match) {\r\n            var i = match.index;\r\n\r\n            if (match[1])\r\n                return this.openingBracketBlock(session, match[1], row, i);\r\n                \r\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\r\n            \r\n            if (range && !range.isMultiLine()) {\r\n                if (forceMultiline) {\r\n                    range = this.getSectionRange(session, row);\r\n                } else if (foldStyle != \"all\")\r\n                    range = null;\r\n            }\r\n            \r\n            return range;\r\n        }\r\n\r\n        if (foldStyle === \"markbegin\")\r\n            return;\r\n\r\n        var match = line.match(this.foldingStopMarker);\r\n        if (match) {\r\n            var i = match.index + match[0].length;\r\n\r\n            if (match[1])\r\n                return this.closingBracketBlock(session, match[1], row, i);\r\n\r\n            return session.getCommentFoldRange(row, i, -1);\r\n        }\r\n    };\r\n    \r\n    this.getSectionRange = function(session, row) {\r\n        var line = session.getLine(row);\r\n        var startIndent = line.search(/\\S/);\r\n        var startRow = row;\r\n        var startColumn = line.length;\r\n        row = row + 1;\r\n        var endRow = row;\r\n        var maxRow = session.getLength();\r\n        while (++row < maxRow) {\r\n            line = session.getLine(row);\r\n            var indent = line.search(/\\S/);\r\n            if (indent === -1)\r\n                continue;\r\n            if  (startIndent > indent)\r\n                break;\r\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\r\n            \r\n            if (subRange) {\r\n                if (subRange.start.row <= startRow) {\r\n                    break;\r\n                } else if (subRange.isMultiLine()) {\r\n                    row = subRange.end.row;\r\n                } else if (startIndent == indent) {\r\n                    break;\r\n                }\r\n            }\r\n            endRow = row;\r\n        }\r\n        \r\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\r\n    };\r\n    this.getCommentRegionBlock = function(session, line, row) {\r\n        var startColumn = line.search(/\\s*$/);\r\n        var maxRow = session.getLength();\r\n        var startRow = row;\r\n        \r\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\r\n        var depth = 1;\r\n        while (++row < maxRow) {\r\n            line = session.getLine(row);\r\n            var m = re.exec(line);\r\n            if (!m) continue;\r\n            if (m[1]) depth--;\r\n            else depth++;\r\n\r\n            if (!depth) break;\r\n        }\r\n\r\n        var endRow = row;\r\n        if (endRow > startRow) {\r\n            return new Range(startRow, startColumn, endRow, line.length);\r\n        }\r\n    };\r\n\r\n}).call(FoldMode.prototype);\r\n\r\n});\r\n\r\nace.define(\"ace/mode/c_cpp\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/c_cpp_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/range\",\"ace/mode/behaviour/cstyle\",\"ace/mode/folding/cstyle\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextMode = require(\"./text\").Mode;\r\nvar c_cppHighlightRules = require(\"./c_cpp_highlight_rules\").c_cppHighlightRules;\r\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\r\nvar Range = require(\"../range\").Range;\r\nvar CstyleBehaviour = require(\"./behaviour/cstyle\").CstyleBehaviour;\r\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\r\n\r\nvar Mode = function() {\r\n    this.HighlightRules = c_cppHighlightRules;\r\n\r\n    this.$outdent = new MatchingBraceOutdent();\r\n    this.$behaviour = new CstyleBehaviour();\r\n\r\n    this.foldingRules = new CStyleFoldMode();\r\n};\r\noop.inherits(Mode, TextMode);\r\n\r\n(function() {\r\n\r\n    this.lineCommentStart = \"//\";\r\n    this.blockComment = {start: \"/*\", end: \"*/\"};\r\n\r\n    this.getNextLineIndent = function(state, line, tab) {\r\n        var indent = this.$getIndent(line);\r\n\r\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\r\n        var tokens = tokenizedLine.tokens;\r\n        var endState = tokenizedLine.state;\r\n\r\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\r\n            return indent;\r\n        }\r\n\r\n        if (state == \"start\") {\r\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\r\n            if (match) {\r\n                indent += tab;\r\n            }\r\n        } else if (state == \"doc-start\") {\r\n            if (endState == \"start\") {\r\n                return \"\";\r\n            }\r\n            var match = line.match(/^\\s*(\\/?)\\*/);\r\n            if (match) {\r\n                if (match[1]) {\r\n                    indent += \" \";\r\n                }\r\n                indent += \"* \";\r\n            }\r\n        }\r\n\r\n        return indent;\r\n    };\r\n\r\n    this.checkOutdent = function(state, line, input) {\r\n        return this.$outdent.checkOutdent(line, input);\r\n    };\r\n\r\n    this.autoOutdent = function(state, doc, row) {\r\n        this.$outdent.autoOutdent(doc, row);\r\n    };\r\n\r\n    this.$id = \"ace/mode/c_cpp\";\r\n    this.snippetFileId = \"ace/snippets/c_cpp\";\r\n}).call(Mode.prototype);\r\n\r\nexports.Mode = Mode;\r\n});\r\n\r\nace.define(\"ace/mode/protobuf_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\r\n    \"use strict\";\r\n\r\n    var oop = require(\"../lib/oop\");\r\n    var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\n    var ProtobufHighlightRules = function() {\r\n\r\n        var builtinTypes = \"double|float|int32|int64|uint32|uint64|sint32|\" +\r\n                           \"sint64|fixed32|fixed64|sfixed32|sfixed64|bool|\" +\r\n                           \"string|bytes\";\r\n        var keywordDeclaration = \"message|required|optional|repeated|package|\" +\r\n                                 \"import|option|enum\";\r\n\r\n        var keywordMapper = this.createKeywordMapper({\r\n            \"keyword.declaration.protobuf\": keywordDeclaration,\r\n            \"support.type\": builtinTypes\r\n        }, \"identifier\");\r\n\r\n        this.$rules = {\r\n            \"start\": [{\r\n                    token: \"comment\",\r\n                    regex: /\\/\\/.*$/\r\n                }, {\r\n                    token: \"comment\",\r\n                    regex: /\\/\\*/,\r\n                    next: \"comment\"\r\n                }, {\r\n                    token: \"constant\",\r\n                    regex: \"<[^>]+>\"\r\n                }, {\r\n                    regex: \"=\",\r\n                    token: \"keyword.operator.assignment.protobuf\"\r\n                }, {\r\n                    token : \"string\", // single line\r\n                    regex : '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\r\n                }, {\r\n                    token : \"string\", // single line\r\n                    regex : '[\\'](?:(?:\\\\\\\\.)|(?:[^\\'\\\\\\\\]))*?[\\']'\r\n                }, {\r\n                    token: \"constant.numeric\", // hex\r\n                    regex: \"0[xX][0-9a-fA-F]+\\\\b\"\r\n                }, {\r\n                    token: \"constant.numeric\", // float\r\n                    regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\r\n                }, {\r\n                    token: keywordMapper,\r\n                    regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\r\n                }],\r\n            \"comment\": [{\r\n                    token : \"comment\", // closing comment\r\n                    regex : \"\\\\*\\\\/\",\r\n                    next : \"start\"\r\n                }, {\r\n                    defaultToken : \"comment\"\r\n                }]\r\n        };\r\n\r\n        this.normalizeRules();\r\n    };\r\n\r\n    oop.inherits(ProtobufHighlightRules, TextHighlightRules);\r\n\r\n    exports.ProtobufHighlightRules = ProtobufHighlightRules;\r\n});\r\n\r\nace.define(\"ace/mode/protobuf\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/c_cpp\",\"ace/mode/protobuf_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar CMode = require(\"./c_cpp\").Mode;\r\nvar ProtobufHighlightRules = require(\"./protobuf_highlight_rules\").ProtobufHighlightRules;\r\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\r\n\r\nvar Mode = function() {\r\n    CMode.call(this);\r\n    this.foldingRules = new CStyleFoldMode();\r\n    this.HighlightRules = ProtobufHighlightRules;\r\n};\r\noop.inherits(Mode, CMode);\r\n\r\n(function() {\r\n    this.lineCommentStart = \"//\";\r\n    this.blockComment = {start: \"/*\", end: \"*/\"};\r\n    this.$id = \"ace/mode/protobuf\";\r\n}).call(Mode.prototype);\r\n\r\nexports.Mode = Mode;\r\n});                (function() {\r\n                    ace.require([\"ace/mode/protobuf\"], function(m) {\r\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\r\n                            module.exports = m;\r\n                        }\r\n                    });\r\n                })();\r\n            "]},"metadata":{},"sourceType":"script"}