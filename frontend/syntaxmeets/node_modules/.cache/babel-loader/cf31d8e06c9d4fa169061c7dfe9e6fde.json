{"ast":null,"code":"ace.define(\"ace/snippets/python\", [\"require\", \"exports\", \"module\"], function (require, exports, module) {\n  \"use strict\";\n\n  exports.snippetText = \"snippet #!\\n\\\r\n\t#!/usr/bin/env python\\n\\\r\nsnippet imp\\n\\\r\n\timport ${1:module}\\n\\\r\nsnippet from\\n\\\r\n\tfrom ${1:package} import ${2:module}\\n\\\r\n# Module Docstring\\n\\\r\nsnippet docs\\n\\\r\n\t'''\\n\\\r\n\tFile: ${1:FILENAME:file_name}\\n\\\r\n\tAuthor: ${2:author}\\n\\\r\n\tDescription: ${3}\\n\\\r\n\t'''\\n\\\r\nsnippet wh\\n\\\r\n\twhile ${1:condition}:\\n\\\r\n\t\t${2:# TODO: write code...}\\n\\\r\n# dowh - does the same as do...while in other languages\\n\\\r\nsnippet dowh\\n\\\r\n\twhile True:\\n\\\r\n\t\t${1:# TODO: write code...}\\n\\\r\n\t\tif ${2:condition}:\\n\\\r\n\t\t\tbreak\\n\\\r\nsnippet with\\n\\\r\n\twith ${1:expr} as ${2:var}:\\n\\\r\n\t\t${3:# TODO: write code...}\\n\\\r\n# New Class\\n\\\r\nsnippet cl\\n\\\r\n\tclass ${1:ClassName}(${2:object}):\\n\\\r\n\t\t\\\"\\\"\\\"${3:docstring for $1}\\\"\\\"\\\"\\n\\\r\n\t\tdef __init__(self, ${4:arg}):\\n\\\r\n\t\t\t${5:super($1, self).__init__()}\\n\\\r\n\t\t\tself.$4 = $4\\n\\\r\n\t\t\t${6}\\n\\\r\n# New Function\\n\\\r\nsnippet def\\n\\\r\n\tdef ${1:fname}(${2:`indent('.') ? 'self' : ''`}):\\n\\\r\n\t\t\\\"\\\"\\\"${3:docstring for $1}\\\"\\\"\\\"\\n\\\r\n\t\t${4:# TODO: write code...}\\n\\\r\nsnippet deff\\n\\\r\n\tdef ${1:fname}(${2:`indent('.') ? 'self' : ''`}):\\n\\\r\n\t\t${3:# TODO: write code...}\\n\\\r\n# New Method\\n\\\r\nsnippet defs\\n\\\r\n\tdef ${1:mname}(self, ${2:arg}):\\n\\\r\n\t\t${3:# TODO: write code...}\\n\\\r\n# New Property\\n\\\r\nsnippet property\\n\\\r\n\tdef ${1:foo}():\\n\\\r\n\t\tdoc = \\\"${2:The $1 property.}\\\"\\n\\\r\n\t\tdef fget(self):\\n\\\r\n\t\t\t${3:return self._$1}\\n\\\r\n\t\tdef fset(self, value):\\n\\\r\n\t\t\t${4:self._$1 = value}\\n\\\r\n# Ifs\\n\\\r\nsnippet if\\n\\\r\n\tif ${1:condition}:\\n\\\r\n\t\t${2:# TODO: write code...}\\n\\\r\nsnippet el\\n\\\r\n\telse:\\n\\\r\n\t\t${1:# TODO: write code...}\\n\\\r\nsnippet ei\\n\\\r\n\telif ${1:condition}:\\n\\\r\n\t\t${2:# TODO: write code...}\\n\\\r\n# For\\n\\\r\nsnippet for\\n\\\r\n\tfor ${1:item} in ${2:items}:\\n\\\r\n\t\t${3:# TODO: write code...}\\n\\\r\n# Encodes\\n\\\r\nsnippet cutf8\\n\\\r\n\t# -*- coding: utf-8 -*-\\n\\\r\nsnippet clatin1\\n\\\r\n\t# -*- coding: latin-1 -*-\\n\\\r\nsnippet cascii\\n\\\r\n\t# -*- coding: ascii -*-\\n\\\r\n# Lambda\\n\\\r\nsnippet ld\\n\\\r\n\t${1:var} = lambda ${2:vars} : ${3:action}\\n\\\r\nsnippet .\\n\\\r\n\tself.\\n\\\r\nsnippet try Try/Except\\n\\\r\n\ttry:\\n\\\r\n\t\t${1:# TODO: write code...}\\n\\\r\n\texcept ${2:Exception}, ${3:e}:\\n\\\r\n\t\t${4:raise $3}\\n\\\r\nsnippet try Try/Except/Else\\n\\\r\n\ttry:\\n\\\r\n\t\t${1:# TODO: write code...}\\n\\\r\n\texcept ${2:Exception}, ${3:e}:\\n\\\r\n\t\t${4:raise $3}\\n\\\r\n\telse:\\n\\\r\n\t\t${5:# TODO: write code...}\\n\\\r\nsnippet try Try/Except/Finally\\n\\\r\n\ttry:\\n\\\r\n\t\t${1:# TODO: write code...}\\n\\\r\n\texcept ${2:Exception}, ${3:e}:\\n\\\r\n\t\t${4:raise $3}\\n\\\r\n\tfinally:\\n\\\r\n\t\t${5:# TODO: write code...}\\n\\\r\nsnippet try Try/Except/Else/Finally\\n\\\r\n\ttry:\\n\\\r\n\t\t${1:# TODO: write code...}\\n\\\r\n\texcept ${2:Exception}, ${3:e}:\\n\\\r\n\t\t${4:raise $3}\\n\\\r\n\telse:\\n\\\r\n\t\t${5:# TODO: write code...}\\n\\\r\n\tfinally:\\n\\\r\n\t\t${6:# TODO: write code...}\\n\\\r\n# if __name__ == '__main__':\\n\\\r\nsnippet ifmain\\n\\\r\n\tif __name__ == '__main__':\\n\\\r\n\t\t${1:main()}\\n\\\r\n# __magic__\\n\\\r\nsnippet _\\n\\\r\n\t__${1:init}__${2}\\n\\\r\n# python debugger (pdb)\\n\\\r\nsnippet pdb\\n\\\r\n\timport pdb; pdb.set_trace()\\n\\\r\n# ipython debugger (ipdb)\\n\\\r\nsnippet ipdb\\n\\\r\n\timport ipdb; ipdb.set_trace()\\n\\\r\n# ipython debugger (pdbbb)\\n\\\r\nsnippet pdbbb\\n\\\r\n\timport pdbpp; pdbpp.set_trace()\\n\\\r\nsnippet pprint\\n\\\r\n\timport pprint; pprint.pprint(${1})${2}\\n\\\r\nsnippet \\\"\\n\\\r\n\t\\\"\\\"\\\"\\n\\\r\n\t${1:doc}\\n\\\r\n\t\\\"\\\"\\\"\\n\\\r\n# test function/method\\n\\\r\nsnippet test\\n\\\r\n\tdef test_${1:description}(${2:self}):\\n\\\r\n\t\t${3:# TODO: write code...}\\n\\\r\n# test case\\n\\\r\nsnippet testcase\\n\\\r\n\tclass ${1:ExampleCase}(unittest.TestCase):\\n\\\r\n\t\t\\n\\\r\n\t\tdef test_${2:description}(self):\\n\\\r\n\t\t\t${3:# TODO: write code...}\\n\\\r\nsnippet fut\\n\\\r\n\tfrom __future__ import ${1}\\n\\\r\n#getopt\\n\\\r\nsnippet getopt\\n\\\r\n\ttry:\\n\\\r\n\t\t# Short option syntax: \\\"hv:\\\"\\n\\\r\n\t\t# Long option syntax: \\\"help\\\" or \\\"verbose=\\\"\\n\\\r\n\t\topts, args = getopt.getopt(sys.argv[1:], \\\"${1:short_options}\\\", [${2:long_options}])\\n\\\r\n\t\\n\\\r\n\texcept getopt.GetoptError, err:\\n\\\r\n\t\t# Print debug info\\n\\\r\n\t\tprint str(err)\\n\\\r\n\t\t${3:error_action}\\n\\\r\n\\n\\\r\n\tfor option, argument in opts:\\n\\\r\n\t\tif option in (\\\"-h\\\", \\\"--help\\\"):\\n\\\r\n\t\t\t${4}\\n\\\r\n\t\telif option in (\\\"-v\\\", \\\"--verbose\\\"):\\n\\\r\n\t\t\tverbose = argument\\n\\\r\n\";\n  exports.scope = \"python\";\n});\n\n(function () {\n  ace.require([\"ace/snippets/python\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["C:/Users/akash/Desktop/Project/React/SyntaxMeets/frontend/syntaxmeets/node_modules/ace-builds/src-noconflict/snippets/python.js"],"names":["ace","define","require","exports","module","snippetText","scope","m"],"mappings":"AAAAA,GAAG,CAACC,MAAJ,CAAW,qBAAX,EAAiC,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,CAAjC,EAAiE,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AACpG;;AAEAD,EAAAA,OAAO,CAACE,WAAR,GAAsB;AACtgB,QAAhB;AAEC,CApKD;;AAoKmB,CAAC,YAAW;AACXN,EAAAA,GAAG,CAACE,OAAJ,CAAY,CAAC,qBAAD,CAAZ,EAAqC,UAASK,CAAT,EAAY;AAC7C,QAAI,OAAOH,MAAP,IAAiB,QAAjB,IAA6B,OAAOD,OAAP,IAAkB,QAA/C,IAA2DC,MAA/D,EAAuE;AACnEA,MAAAA,MAAM,CAACD,OAAP,GAAiBI,CAAjB;AACH;AACJ,GAJD;AAKH,CANE","sourcesContent":["ace.define(\"ace/snippets/python\",[\"require\",\"exports\",\"module\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nexports.snippetText = \"snippet #!\\n\\\r\n\t#!/usr/bin/env python\\n\\\r\nsnippet imp\\n\\\r\n\timport ${1:module}\\n\\\r\nsnippet from\\n\\\r\n\tfrom ${1:package} import ${2:module}\\n\\\r\n# Module Docstring\\n\\\r\nsnippet docs\\n\\\r\n\t'''\\n\\\r\n\tFile: ${1:FILENAME:file_name}\\n\\\r\n\tAuthor: ${2:author}\\n\\\r\n\tDescription: ${3}\\n\\\r\n\t'''\\n\\\r\nsnippet wh\\n\\\r\n\twhile ${1:condition}:\\n\\\r\n\t\t${2:# TODO: write code...}\\n\\\r\n# dowh - does the same as do...while in other languages\\n\\\r\nsnippet dowh\\n\\\r\n\twhile True:\\n\\\r\n\t\t${1:# TODO: write code...}\\n\\\r\n\t\tif ${2:condition}:\\n\\\r\n\t\t\tbreak\\n\\\r\nsnippet with\\n\\\r\n\twith ${1:expr} as ${2:var}:\\n\\\r\n\t\t${3:# TODO: write code...}\\n\\\r\n# New Class\\n\\\r\nsnippet cl\\n\\\r\n\tclass ${1:ClassName}(${2:object}):\\n\\\r\n\t\t\\\"\\\"\\\"${3:docstring for $1}\\\"\\\"\\\"\\n\\\r\n\t\tdef __init__(self, ${4:arg}):\\n\\\r\n\t\t\t${5:super($1, self).__init__()}\\n\\\r\n\t\t\tself.$4 = $4\\n\\\r\n\t\t\t${6}\\n\\\r\n# New Function\\n\\\r\nsnippet def\\n\\\r\n\tdef ${1:fname}(${2:`indent('.') ? 'self' : ''`}):\\n\\\r\n\t\t\\\"\\\"\\\"${3:docstring for $1}\\\"\\\"\\\"\\n\\\r\n\t\t${4:# TODO: write code...}\\n\\\r\nsnippet deff\\n\\\r\n\tdef ${1:fname}(${2:`indent('.') ? 'self' : ''`}):\\n\\\r\n\t\t${3:# TODO: write code...}\\n\\\r\n# New Method\\n\\\r\nsnippet defs\\n\\\r\n\tdef ${1:mname}(self, ${2:arg}):\\n\\\r\n\t\t${3:# TODO: write code...}\\n\\\r\n# New Property\\n\\\r\nsnippet property\\n\\\r\n\tdef ${1:foo}():\\n\\\r\n\t\tdoc = \\\"${2:The $1 property.}\\\"\\n\\\r\n\t\tdef fget(self):\\n\\\r\n\t\t\t${3:return self._$1}\\n\\\r\n\t\tdef fset(self, value):\\n\\\r\n\t\t\t${4:self._$1 = value}\\n\\\r\n# Ifs\\n\\\r\nsnippet if\\n\\\r\n\tif ${1:condition}:\\n\\\r\n\t\t${2:# TODO: write code...}\\n\\\r\nsnippet el\\n\\\r\n\telse:\\n\\\r\n\t\t${1:# TODO: write code...}\\n\\\r\nsnippet ei\\n\\\r\n\telif ${1:condition}:\\n\\\r\n\t\t${2:# TODO: write code...}\\n\\\r\n# For\\n\\\r\nsnippet for\\n\\\r\n\tfor ${1:item} in ${2:items}:\\n\\\r\n\t\t${3:# TODO: write code...}\\n\\\r\n# Encodes\\n\\\r\nsnippet cutf8\\n\\\r\n\t# -*- coding: utf-8 -*-\\n\\\r\nsnippet clatin1\\n\\\r\n\t# -*- coding: latin-1 -*-\\n\\\r\nsnippet cascii\\n\\\r\n\t# -*- coding: ascii -*-\\n\\\r\n# Lambda\\n\\\r\nsnippet ld\\n\\\r\n\t${1:var} = lambda ${2:vars} : ${3:action}\\n\\\r\nsnippet .\\n\\\r\n\tself.\\n\\\r\nsnippet try Try/Except\\n\\\r\n\ttry:\\n\\\r\n\t\t${1:# TODO: write code...}\\n\\\r\n\texcept ${2:Exception}, ${3:e}:\\n\\\r\n\t\t${4:raise $3}\\n\\\r\nsnippet try Try/Except/Else\\n\\\r\n\ttry:\\n\\\r\n\t\t${1:# TODO: write code...}\\n\\\r\n\texcept ${2:Exception}, ${3:e}:\\n\\\r\n\t\t${4:raise $3}\\n\\\r\n\telse:\\n\\\r\n\t\t${5:# TODO: write code...}\\n\\\r\nsnippet try Try/Except/Finally\\n\\\r\n\ttry:\\n\\\r\n\t\t${1:# TODO: write code...}\\n\\\r\n\texcept ${2:Exception}, ${3:e}:\\n\\\r\n\t\t${4:raise $3}\\n\\\r\n\tfinally:\\n\\\r\n\t\t${5:# TODO: write code...}\\n\\\r\nsnippet try Try/Except/Else/Finally\\n\\\r\n\ttry:\\n\\\r\n\t\t${1:# TODO: write code...}\\n\\\r\n\texcept ${2:Exception}, ${3:e}:\\n\\\r\n\t\t${4:raise $3}\\n\\\r\n\telse:\\n\\\r\n\t\t${5:# TODO: write code...}\\n\\\r\n\tfinally:\\n\\\r\n\t\t${6:# TODO: write code...}\\n\\\r\n# if __name__ == '__main__':\\n\\\r\nsnippet ifmain\\n\\\r\n\tif __name__ == '__main__':\\n\\\r\n\t\t${1:main()}\\n\\\r\n# __magic__\\n\\\r\nsnippet _\\n\\\r\n\t__${1:init}__${2}\\n\\\r\n# python debugger (pdb)\\n\\\r\nsnippet pdb\\n\\\r\n\timport pdb; pdb.set_trace()\\n\\\r\n# ipython debugger (ipdb)\\n\\\r\nsnippet ipdb\\n\\\r\n\timport ipdb; ipdb.set_trace()\\n\\\r\n# ipython debugger (pdbbb)\\n\\\r\nsnippet pdbbb\\n\\\r\n\timport pdbpp; pdbpp.set_trace()\\n\\\r\nsnippet pprint\\n\\\r\n\timport pprint; pprint.pprint(${1})${2}\\n\\\r\nsnippet \\\"\\n\\\r\n\t\\\"\\\"\\\"\\n\\\r\n\t${1:doc}\\n\\\r\n\t\\\"\\\"\\\"\\n\\\r\n# test function/method\\n\\\r\nsnippet test\\n\\\r\n\tdef test_${1:description}(${2:self}):\\n\\\r\n\t\t${3:# TODO: write code...}\\n\\\r\n# test case\\n\\\r\nsnippet testcase\\n\\\r\n\tclass ${1:ExampleCase}(unittest.TestCase):\\n\\\r\n\t\t\\n\\\r\n\t\tdef test_${2:description}(self):\\n\\\r\n\t\t\t${3:# TODO: write code...}\\n\\\r\nsnippet fut\\n\\\r\n\tfrom __future__ import ${1}\\n\\\r\n#getopt\\n\\\r\nsnippet getopt\\n\\\r\n\ttry:\\n\\\r\n\t\t# Short option syntax: \\\"hv:\\\"\\n\\\r\n\t\t# Long option syntax: \\\"help\\\" or \\\"verbose=\\\"\\n\\\r\n\t\topts, args = getopt.getopt(sys.argv[1:], \\\"${1:short_options}\\\", [${2:long_options}])\\n\\\r\n\t\\n\\\r\n\texcept getopt.GetoptError, err:\\n\\\r\n\t\t# Print debug info\\n\\\r\n\t\tprint str(err)\\n\\\r\n\t\t${3:error_action}\\n\\\r\n\\n\\\r\n\tfor option, argument in opts:\\n\\\r\n\t\tif option in (\\\"-h\\\", \\\"--help\\\"):\\n\\\r\n\t\t\t${4}\\n\\\r\n\t\telif option in (\\\"-v\\\", \\\"--verbose\\\"):\\n\\\r\n\t\t\tverbose = argument\\n\\\r\n\";\r\nexports.scope = \"python\";\r\n\r\n});                (function() {\r\n                    ace.require([\"ace/snippets/python\"], function(m) {\r\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\r\n                            module.exports = m;\r\n                        }\r\n                    });\r\n                })();\r\n            "]},"metadata":{},"sourceType":"script"}