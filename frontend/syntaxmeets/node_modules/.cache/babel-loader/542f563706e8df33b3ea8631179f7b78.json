{"ast":null,"code":"ace.define(\"ace/mode/prolog_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var PrologHighlightRules = function () {\n    this.$rules = {\n      start: [{\n        include: '#comment'\n      }, {\n        include: '#basic_fact'\n      }, {\n        include: '#rule'\n      }, {\n        include: '#directive'\n      }, {\n        include: '#fact'\n      }],\n      '#atom': [{\n        token: 'constant.other.atom.prolog',\n        regex: '\\\\b[a-z][a-zA-Z0-9_]*\\\\b'\n      }, {\n        token: 'constant.numeric.prolog',\n        regex: '-?\\\\d+(?:\\\\.\\\\d+)?'\n      }, {\n        include: '#string'\n      }],\n      '#basic_elem': [{\n        include: '#comment'\n      }, {\n        include: '#statement'\n      }, {\n        include: '#constants'\n      }, {\n        include: '#operators'\n      }, {\n        include: '#builtins'\n      }, {\n        include: '#list'\n      }, {\n        include: '#atom'\n      }, {\n        include: '#variable'\n      }],\n      '#basic_fact': [{\n        token: ['entity.name.function.fact.basic.prolog', 'punctuation.end.fact.basic.prolog'],\n        regex: '([a-z]\\\\w*)(\\\\.)'\n      }],\n      '#builtins': [{\n        token: 'support.function.builtin.prolog',\n        regex: '\\\\b(?:abolish|abort|ancestors|arg|ascii|assert[az]|atom(?:ic)?|body|char|close|conc|concat|consult|define|definition|dynamic|dump|fail|file|free|free_proc|functor|getc|goal|halt|head|head|integer|length|listing|match_args|member|next_clause|nl|nonvar|nth|number|cvars|nvars|offset|op|print?|prompt|putc|quoted|ratom|read|redefine|rename|retract(?:all)?|see|seeing|seen|skip|spy|statistics|system|tab|tell|telling|term|time|told|univ|unlink_clause|unspy_predicate|var|write)\\\\b'\n      }],\n      '#comment': [{\n        token: ['punctuation.definition.comment.prolog', 'comment.line.percentage.prolog'],\n        regex: '(%)(.*$)'\n      }, {\n        token: 'punctuation.definition.comment.prolog',\n        regex: '/\\\\*',\n        push: [{\n          token: 'punctuation.definition.comment.prolog',\n          regex: '\\\\*/',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.block.prolog'\n        }]\n      }],\n      '#constants': [{\n        token: 'constant.language.prolog',\n        regex: '\\\\b(?:true|false|yes|no)\\\\b'\n      }],\n      '#directive': [{\n        token: 'keyword.operator.directive.prolog',\n        regex: ':-',\n        push: [{\n          token: 'meta.directive.prolog',\n          regex: '\\\\.',\n          next: 'pop'\n        }, {\n          include: '#comment'\n        }, {\n          include: '#statement'\n        }, {\n          defaultToken: 'meta.directive.prolog'\n        }]\n      }],\n      '#expr': [{\n        include: '#comments'\n      }, {\n        token: 'meta.expression.prolog',\n        regex: '\\\\(',\n        push: [{\n          token: 'meta.expression.prolog',\n          regex: '\\\\)',\n          next: 'pop'\n        }, {\n          include: '#expr'\n        }, {\n          defaultToken: 'meta.expression.prolog'\n        }]\n      }, {\n        token: 'keyword.control.cutoff.prolog',\n        regex: '!'\n      }, {\n        token: 'punctuation.control.and.prolog',\n        regex: ','\n      }, {\n        token: 'punctuation.control.or.prolog',\n        regex: ';'\n      }, {\n        include: '#basic_elem'\n      }],\n      '#fact': [{\n        token: ['entity.name.function.fact.prolog', 'punctuation.begin.fact.parameters.prolog'],\n        regex: '([a-z]\\\\w*)(\\\\()(?!.*:-)',\n        push: [{\n          token: ['punctuation.end.fact.parameters.prolog', 'punctuation.end.fact.prolog'],\n          regex: '(\\\\))(\\\\.?)',\n          next: 'pop'\n        }, {\n          include: '#parameter'\n        }, {\n          defaultToken: 'meta.fact.prolog'\n        }]\n      }],\n      '#list': [{\n        token: 'punctuation.begin.list.prolog',\n        regex: '\\\\[(?=.*\\\\])',\n        push: [{\n          token: 'punctuation.end.list.prolog',\n          regex: '\\\\]',\n          next: 'pop'\n        }, {\n          include: '#comment'\n        }, {\n          token: 'punctuation.separator.list.prolog',\n          regex: ','\n        }, {\n          token: 'punctuation.concat.list.prolog',\n          regex: '\\\\|',\n          push: [{\n            token: 'meta.list.concat.prolog',\n            regex: '(?=\\\\s*\\\\])',\n            next: 'pop'\n          }, {\n            include: '#basic_elem'\n          }, {\n            defaultToken: 'meta.list.concat.prolog'\n          }]\n        }, {\n          include: '#basic_elem'\n        }, {\n          defaultToken: 'meta.list.prolog'\n        }]\n      }],\n      '#operators': [{\n        token: 'keyword.operator.prolog',\n        regex: '\\\\\\\\\\\\+|\\\\bnot\\\\b|\\\\bis\\\\b|->|[><]|[><\\\\\\\\:=]?=|(?:=\\\\\\\\|\\\\\\\\=)='\n      }],\n      '#parameter': [{\n        token: 'variable.language.anonymous.prolog',\n        regex: '\\\\b_\\\\b'\n      }, {\n        token: 'variable.parameter.prolog',\n        regex: '\\\\b[A-Z_]\\\\w*\\\\b'\n      }, {\n        token: 'punctuation.separator.parameters.prolog',\n        regex: ','\n      }, {\n        include: '#basic_elem'\n      }, {\n        token: 'text',\n        regex: '[^\\\\s]'\n      }],\n      '#rule': [{\n        token: 'meta.rule.prolog',\n        regex: '(?=[a-z]\\\\w*.*:-)',\n        push: [{\n          token: 'punctuation.rule.end.prolog',\n          regex: '\\\\.',\n          next: 'pop'\n        }, {\n          token: 'meta.rule.signature.prolog',\n          regex: '(?=[a-z]\\\\w*.*:-)',\n          push: [{\n            token: 'meta.rule.signature.prolog',\n            regex: '(?=:-)',\n            next: 'pop'\n          }, {\n            token: 'entity.name.function.rule.prolog',\n            regex: '[a-z]\\\\w*(?=\\\\(|\\\\s*:-)'\n          }, {\n            token: 'punctuation.rule.parameters.begin.prolog',\n            regex: '\\\\(',\n            push: [{\n              token: 'punctuation.rule.parameters.end.prolog',\n              regex: '\\\\)',\n              next: 'pop'\n            }, {\n              include: '#parameter'\n            }, {\n              defaultToken: 'meta.rule.parameters.prolog'\n            }]\n          }, {\n            defaultToken: 'meta.rule.signature.prolog'\n          }]\n        }, {\n          token: 'keyword.operator.definition.prolog',\n          regex: ':-',\n          push: [{\n            token: 'meta.rule.definition.prolog',\n            regex: '(?=\\\\.)',\n            next: 'pop'\n          }, {\n            include: '#comment'\n          }, {\n            include: '#expr'\n          }, {\n            defaultToken: 'meta.rule.definition.prolog'\n          }]\n        }, {\n          defaultToken: 'meta.rule.prolog'\n        }]\n      }],\n      '#statement': [{\n        token: 'meta.statement.prolog',\n        regex: '(?=[a-z]\\\\w*\\\\()',\n        push: [{\n          token: 'punctuation.end.statement.parameters.prolog',\n          regex: '\\\\)',\n          next: 'pop'\n        }, {\n          include: '#builtins'\n        }, {\n          include: '#atom'\n        }, {\n          token: 'punctuation.begin.statement.parameters.prolog',\n          regex: '\\\\(',\n          push: [{\n            token: 'meta.statement.parameters.prolog',\n            regex: '(?=\\\\))',\n            next: 'pop'\n          }, {\n            token: 'punctuation.separator.statement.prolog',\n            regex: ','\n          }, {\n            include: '#basic_elem'\n          }, {\n            defaultToken: 'meta.statement.parameters.prolog'\n          }]\n        }, {\n          defaultToken: 'meta.statement.prolog'\n        }]\n      }],\n      '#string': [{\n        token: 'punctuation.definition.string.begin.prolog',\n        regex: '\\'',\n        push: [{\n          token: 'punctuation.definition.string.end.prolog',\n          regex: '\\'',\n          next: 'pop'\n        }, {\n          token: 'constant.character.escape.prolog',\n          regex: '\\\\\\\\.'\n        }, {\n          token: 'constant.character.escape.quote.prolog',\n          regex: '\\'\\''\n        }, {\n          defaultToken: 'string.quoted.single.prolog'\n        }]\n      }],\n      '#variable': [{\n        token: 'variable.language.anonymous.prolog',\n        regex: '\\\\b_\\\\b'\n      }, {\n        token: 'variable.other.prolog',\n        regex: '\\\\b[A-Z_][a-zA-Z0-9_]*\\\\b'\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  PrologHighlightRules.metaData = {\n    fileTypes: ['plg', 'prolog'],\n    foldingStartMarker: '(%\\\\s*region \\\\w*)|([a-z]\\\\w*.*:- ?)',\n    foldingStopMarker: '(%\\\\s*end(\\\\s*region)?)|(?=\\\\.)',\n    keyEquivalent: '^~P',\n    name: 'Prolog',\n    scopeName: 'source.prolog'\n  };\n  oop.inherits(PrologHighlightRules, TextHighlightRules);\n  exports.PrologHighlightRules = PrologHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/prolog\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/prolog_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var PrologHighlightRules = require(\"./prolog_highlight_rules\").PrologHighlightRules;\n\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function () {\n    this.HighlightRules = PrologHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"%\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n    this.$id = \"ace/mode/prolog\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/prolog\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["C:/Users/akash/Desktop/Project/React/SyntaxMeets/frontend/syntaxmeets/node_modules/ace-builds/src-noconflict/mode-prolog.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","PrologHighlightRules","$rules","start","include","token","regex","push","next","defaultToken","normalizeRules","metaData","fileTypes","foldingStartMarker","foldingStopMarker","keyEquivalent","name","scopeName","inherits","Range","BaseFoldMode","FoldMode","commentRegex","RegExp","source","replace","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","$id"],"mappings":"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","sourcesContent":["ace.define(\"ace/mode/prolog_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\nvar PrologHighlightRules = function() {\r\n\r\n    this.$rules = { start: \r\n       [ { include: '#comment' },\r\n         { include: '#basic_fact' },\r\n         { include: '#rule' },\r\n         { include: '#directive' },\r\n         { include: '#fact' } ],\r\n      '#atom': \r\n       [ { token: 'constant.other.atom.prolog',\r\n           regex: '\\\\b[a-z][a-zA-Z0-9_]*\\\\b' },\r\n         { token: 'constant.numeric.prolog',\r\n           regex: '-?\\\\d+(?:\\\\.\\\\d+)?' },\r\n         { include: '#string' } ],\r\n      '#basic_elem': \r\n       [ { include: '#comment' },\r\n         { include: '#statement' },\r\n         { include: '#constants' },\r\n         { include: '#operators' },\r\n         { include: '#builtins' },\r\n         { include: '#list' },\r\n         { include: '#atom' },\r\n         { include: '#variable' } ],\r\n      '#basic_fact': \r\n       [ { token: \r\n            [ 'entity.name.function.fact.basic.prolog',\r\n              'punctuation.end.fact.basic.prolog' ],\r\n           regex: '([a-z]\\\\w*)(\\\\.)' } ],\r\n      '#builtins': \r\n       [ { token: 'support.function.builtin.prolog',\r\n           regex: '\\\\b(?:abolish|abort|ancestors|arg|ascii|assert[az]|atom(?:ic)?|body|char|close|conc|concat|consult|define|definition|dynamic|dump|fail|file|free|free_proc|functor|getc|goal|halt|head|head|integer|length|listing|match_args|member|next_clause|nl|nonvar|nth|number|cvars|nvars|offset|op|print?|prompt|putc|quoted|ratom|read|redefine|rename|retract(?:all)?|see|seeing|seen|skip|spy|statistics|system|tab|tell|telling|term|time|told|univ|unlink_clause|unspy_predicate|var|write)\\\\b' } ],\r\n      '#comment': \r\n       [ { token: \r\n            [ 'punctuation.definition.comment.prolog',\r\n              'comment.line.percentage.prolog' ],\r\n           regex: '(%)(.*$)' },\r\n         { token: 'punctuation.definition.comment.prolog',\r\n           regex: '/\\\\*',\r\n           push: \r\n            [ { token: 'punctuation.definition.comment.prolog',\r\n                regex: '\\\\*/',\r\n                next: 'pop' },\r\n              { defaultToken: 'comment.block.prolog' } ] } ],\r\n      '#constants': \r\n       [ { token: 'constant.language.prolog',\r\n           regex: '\\\\b(?:true|false|yes|no)\\\\b' } ],\r\n      '#directive': \r\n       [ { token: 'keyword.operator.directive.prolog',\r\n           regex: ':-',\r\n           push: \r\n            [ { token: 'meta.directive.prolog', regex: '\\\\.', next: 'pop' },\r\n              { include: '#comment' },\r\n              { include: '#statement' },\r\n              { defaultToken: 'meta.directive.prolog' } ] } ],\r\n      '#expr': \r\n       [ { include: '#comments' },\r\n         { token: 'meta.expression.prolog',\r\n           regex: '\\\\(',\r\n           push: \r\n            [ { token: 'meta.expression.prolog', regex: '\\\\)', next: 'pop' },\r\n              { include: '#expr' },\r\n              { defaultToken: 'meta.expression.prolog' } ] },\r\n         { token: 'keyword.control.cutoff.prolog', regex: '!' },\r\n         { token: 'punctuation.control.and.prolog', regex: ',' },\r\n         { token: 'punctuation.control.or.prolog', regex: ';' },\r\n         { include: '#basic_elem' } ],\r\n      '#fact': \r\n       [ { token: \r\n            [ 'entity.name.function.fact.prolog',\r\n              'punctuation.begin.fact.parameters.prolog' ],\r\n           regex: '([a-z]\\\\w*)(\\\\()(?!.*:-)',\r\n           push: \r\n            [ { token: \r\n                 [ 'punctuation.end.fact.parameters.prolog',\r\n                   'punctuation.end.fact.prolog' ],\r\n                regex: '(\\\\))(\\\\.?)',\r\n                next: 'pop' },\r\n              { include: '#parameter' },\r\n              { defaultToken: 'meta.fact.prolog' } ] } ],\r\n      '#list': \r\n       [ { token: 'punctuation.begin.list.prolog',\r\n           regex: '\\\\[(?=.*\\\\])',\r\n           push: \r\n            [ { token: 'punctuation.end.list.prolog',\r\n                regex: '\\\\]',\r\n                next: 'pop' },\r\n              { include: '#comment' },\r\n              { token: 'punctuation.separator.list.prolog', regex: ',' },\r\n              { token: 'punctuation.concat.list.prolog',\r\n                regex: '\\\\|',\r\n                push: \r\n                 [ { token: 'meta.list.concat.prolog',\r\n                     regex: '(?=\\\\s*\\\\])',\r\n                     next: 'pop' },\r\n                   { include: '#basic_elem' },\r\n                   { defaultToken: 'meta.list.concat.prolog' } ] },\r\n              { include: '#basic_elem' },\r\n              { defaultToken: 'meta.list.prolog' } ] } ],\r\n      '#operators': \r\n       [ { token: 'keyword.operator.prolog',\r\n           regex: '\\\\\\\\\\\\+|\\\\bnot\\\\b|\\\\bis\\\\b|->|[><]|[><\\\\\\\\:=]?=|(?:=\\\\\\\\|\\\\\\\\=)=' } ],\r\n      '#parameter': \r\n       [ { token: 'variable.language.anonymous.prolog',\r\n           regex: '\\\\b_\\\\b' },\r\n         { token: 'variable.parameter.prolog',\r\n           regex: '\\\\b[A-Z_]\\\\w*\\\\b' },\r\n         { token: 'punctuation.separator.parameters.prolog', regex: ',' },\r\n         { include: '#basic_elem' },\r\n         { token: 'text', regex: '[^\\\\s]' } ],\r\n      '#rule': \r\n       [ { token: 'meta.rule.prolog',\r\n           regex: '(?=[a-z]\\\\w*.*:-)',\r\n           push: \r\n            [ { token: 'punctuation.rule.end.prolog',\r\n                regex: '\\\\.',\r\n                next: 'pop' },\r\n              { token: 'meta.rule.signature.prolog',\r\n                regex: '(?=[a-z]\\\\w*.*:-)',\r\n                push: \r\n                 [ { token: 'meta.rule.signature.prolog',\r\n                     regex: '(?=:-)',\r\n                     next: 'pop' },\r\n                   { token: 'entity.name.function.rule.prolog',\r\n                     regex: '[a-z]\\\\w*(?=\\\\(|\\\\s*:-)' },\r\n                   { token: 'punctuation.rule.parameters.begin.prolog',\r\n                     regex: '\\\\(',\r\n                     push: \r\n                      [ { token: 'punctuation.rule.parameters.end.prolog',\r\n                          regex: '\\\\)',\r\n                          next: 'pop' },\r\n                        { include: '#parameter' },\r\n                        { defaultToken: 'meta.rule.parameters.prolog' } ] },\r\n                   { defaultToken: 'meta.rule.signature.prolog' } ] },\r\n              { token: 'keyword.operator.definition.prolog',\r\n                regex: ':-',\r\n                push: \r\n                 [ { token: 'meta.rule.definition.prolog',\r\n                     regex: '(?=\\\\.)',\r\n                     next: 'pop' },\r\n                   { include: '#comment' },\r\n                   { include: '#expr' },\r\n                   { defaultToken: 'meta.rule.definition.prolog' } ] },\r\n              { defaultToken: 'meta.rule.prolog' } ] } ],\r\n      '#statement': \r\n       [ { token: 'meta.statement.prolog',\r\n           regex: '(?=[a-z]\\\\w*\\\\()',\r\n           push: \r\n            [ { token: 'punctuation.end.statement.parameters.prolog',\r\n                regex: '\\\\)',\r\n                next: 'pop' },\r\n              { include: '#builtins' },\r\n              { include: '#atom' },\r\n              { token: 'punctuation.begin.statement.parameters.prolog',\r\n                regex: '\\\\(',\r\n                push: \r\n                 [ { token: 'meta.statement.parameters.prolog',\r\n                     regex: '(?=\\\\))',\r\n                     next: 'pop' },\r\n                   { token: 'punctuation.separator.statement.prolog', regex: ',' },\r\n                   { include: '#basic_elem' },\r\n                   { defaultToken: 'meta.statement.parameters.prolog' } ] },\r\n              { defaultToken: 'meta.statement.prolog' } ] } ],\r\n      '#string': \r\n       [ { token: 'punctuation.definition.string.begin.prolog',\r\n           regex: '\\'',\r\n           push: \r\n            [ { token: 'punctuation.definition.string.end.prolog',\r\n                regex: '\\'',\r\n                next: 'pop' },\r\n              { token: 'constant.character.escape.prolog', regex: '\\\\\\\\.' },\r\n              { token: 'constant.character.escape.quote.prolog',\r\n                regex: '\\'\\'' },\r\n              { defaultToken: 'string.quoted.single.prolog' } ] } ],\r\n      '#variable': \r\n       [ { token: 'variable.language.anonymous.prolog',\r\n           regex: '\\\\b_\\\\b' },\r\n         { token: 'variable.other.prolog',\r\n           regex: '\\\\b[A-Z_][a-zA-Z0-9_]*\\\\b' } ] };\r\n    \r\n    this.normalizeRules();\r\n};\r\n\r\nPrologHighlightRules.metaData = { fileTypes: [ 'plg', 'prolog' ],\r\n      foldingStartMarker: '(%\\\\s*region \\\\w*)|([a-z]\\\\w*.*:- ?)',\r\n      foldingStopMarker: '(%\\\\s*end(\\\\s*region)?)|(?=\\\\.)',\r\n      keyEquivalent: '^~P',\r\n      name: 'Prolog',\r\n      scopeName: 'source.prolog' };\r\n\r\n\r\noop.inherits(PrologHighlightRules, TextHighlightRules);\r\n\r\nexports.PrologHighlightRules = PrologHighlightRules;\r\n});\r\n\r\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../../lib/oop\");\r\nvar Range = require(\"../../range\").Range;\r\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\r\n\r\nvar FoldMode = exports.FoldMode = function(commentRegex) {\r\n    if (commentRegex) {\r\n        this.foldingStartMarker = new RegExp(\r\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\r\n        );\r\n        this.foldingStopMarker = new RegExp(\r\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\r\n        );\r\n    }\r\n};\r\noop.inherits(FoldMode, BaseFoldMode);\r\n\r\n(function() {\r\n    \r\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\r\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\r\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\r\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\r\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\r\n    this._getFoldWidgetBase = this.getFoldWidget;\r\n    this.getFoldWidget = function(session, foldStyle, row) {\r\n        var line = session.getLine(row);\r\n    \r\n        if (this.singleLineBlockCommentRe.test(line)) {\r\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\r\n                return \"\";\r\n        }\r\n    \r\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\r\n    \r\n        if (!fw && this.startRegionRe.test(line))\r\n            return \"start\"; // lineCommentRegionStart\r\n    \r\n        return fw;\r\n    };\r\n\r\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\r\n        var line = session.getLine(row);\r\n        \r\n        if (this.startRegionRe.test(line))\r\n            return this.getCommentRegionBlock(session, line, row);\r\n        \r\n        var match = line.match(this.foldingStartMarker);\r\n        if (match) {\r\n            var i = match.index;\r\n\r\n            if (match[1])\r\n                return this.openingBracketBlock(session, match[1], row, i);\r\n                \r\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\r\n            \r\n            if (range && !range.isMultiLine()) {\r\n                if (forceMultiline) {\r\n                    range = this.getSectionRange(session, row);\r\n                } else if (foldStyle != \"all\")\r\n                    range = null;\r\n            }\r\n            \r\n            return range;\r\n        }\r\n\r\n        if (foldStyle === \"markbegin\")\r\n            return;\r\n\r\n        var match = line.match(this.foldingStopMarker);\r\n        if (match) {\r\n            var i = match.index + match[0].length;\r\n\r\n            if (match[1])\r\n                return this.closingBracketBlock(session, match[1], row, i);\r\n\r\n            return session.getCommentFoldRange(row, i, -1);\r\n        }\r\n    };\r\n    \r\n    this.getSectionRange = function(session, row) {\r\n        var line = session.getLine(row);\r\n        var startIndent = line.search(/\\S/);\r\n        var startRow = row;\r\n        var startColumn = line.length;\r\n        row = row + 1;\r\n        var endRow = row;\r\n        var maxRow = session.getLength();\r\n        while (++row < maxRow) {\r\n            line = session.getLine(row);\r\n            var indent = line.search(/\\S/);\r\n            if (indent === -1)\r\n                continue;\r\n            if  (startIndent > indent)\r\n                break;\r\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\r\n            \r\n            if (subRange) {\r\n                if (subRange.start.row <= startRow) {\r\n                    break;\r\n                } else if (subRange.isMultiLine()) {\r\n                    row = subRange.end.row;\r\n                } else if (startIndent == indent) {\r\n                    break;\r\n                }\r\n            }\r\n            endRow = row;\r\n        }\r\n        \r\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\r\n    };\r\n    this.getCommentRegionBlock = function(session, line, row) {\r\n        var startColumn = line.search(/\\s*$/);\r\n        var maxRow = session.getLength();\r\n        var startRow = row;\r\n        \r\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\r\n        var depth = 1;\r\n        while (++row < maxRow) {\r\n            line = session.getLine(row);\r\n            var m = re.exec(line);\r\n            if (!m) continue;\r\n            if (m[1]) depth--;\r\n            else depth++;\r\n\r\n            if (!depth) break;\r\n        }\r\n\r\n        var endRow = row;\r\n        if (endRow > startRow) {\r\n            return new Range(startRow, startColumn, endRow, line.length);\r\n        }\r\n    };\r\n\r\n}).call(FoldMode.prototype);\r\n\r\n});\r\n\r\nace.define(\"ace/mode/prolog\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/prolog_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextMode = require(\"./text\").Mode;\r\nvar PrologHighlightRules = require(\"./prolog_highlight_rules\").PrologHighlightRules;\r\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\r\n\r\nvar Mode = function() {\r\n    this.HighlightRules = PrologHighlightRules;\r\n    this.foldingRules = new FoldMode();\r\n    this.$behaviour = this.$defaultBehaviour;\r\n};\r\noop.inherits(Mode, TextMode);\r\n\r\n(function() {\r\n    this.lineCommentStart = \"%\";\r\n    this.blockComment = {start: \"/*\", end: \"*/\"};\r\n    this.$id = \"ace/mode/prolog\";\r\n}).call(Mode.prototype);\r\n\r\nexports.Mode = Mode;\r\n});                (function() {\r\n                    ace.require([\"ace/mode/prolog\"], function(m) {\r\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\r\n                            module.exports = m;\r\n                        }\r\n                    });\r\n                })();\r\n            "]},"metadata":{},"sourceType":"script"}