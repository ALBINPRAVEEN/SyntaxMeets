{"ast":null,"code":"ace.define(\"ace/mode/lisp_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var LispHighlightRules = function () {\n    var keywordControl = \"case|do|let|loop|if|else|when\";\n    var keywordOperator = \"eq|neq|and|or\";\n    var constantLanguage = \"null|nil\";\n    var supportFunctions = \"cons|car|cdr|cond|lambda|format|setq|setf|quote|eval|append|list|listp|memberp|t|load|progn\";\n    var keywordMapper = this.createKeywordMapper({\n      \"keyword.control\": keywordControl,\n      \"keyword.operator\": keywordOperator,\n      \"constant.language\": constantLanguage,\n      \"support.function\": supportFunctions\n    }, \"identifier\", true);\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \";.*$\"\n      }, {\n        token: [\"storage.type.function-type.lisp\", \"text\", \"entity.name.function.lisp\"],\n        regex: \"(?:\\\\b(?:(defun|defmethod|defmacro))\\\\b)(\\\\s+)((?:\\\\w|\\\\-|\\\\!|\\\\?)*)\"\n      }, {\n        token: [\"punctuation.definition.constant.character.lisp\", \"constant.character.lisp\"],\n        regex: \"(#)((?:\\\\w|[\\\\\\\\+-=<>'\\\"&#])+)\"\n      }, {\n        token: [\"punctuation.definition.variable.lisp\", \"variable.other.global.lisp\", \"punctuation.definition.variable.lisp\"],\n        regex: \"(\\\\*)(\\\\S*)(\\\\*)\"\n      }, {\n        token: \"constant.numeric\",\n        // hex\n        regex: \"0[xX][0-9a-fA-F]+(?:L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?(?:L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n      }, {\n        token: \"string\",\n        regex: '\"(?=.)',\n        next: \"qqstring\"\n      }],\n      \"qqstring\": [{\n        token: \"constant.character.escape.lisp\",\n        regex: \"\\\\\\\\.\"\n      }, {\n        token: \"string\",\n        regex: '[^\"\\\\\\\\]+'\n      }, {\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"qqstring\"\n      }, {\n        token: \"string\",\n        regex: '\"|$',\n        next: \"start\"\n      }]\n    };\n  };\n\n  oop.inherits(LispHighlightRules, TextHighlightRules);\n  exports.LispHighlightRules = LispHighlightRules;\n});\nace.define(\"ace/mode/lisp\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/lisp_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var LispHighlightRules = require(\"./lisp_highlight_rules\").LispHighlightRules;\n\n  var Mode = function () {\n    this.HighlightRules = LispHighlightRules;\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \";\";\n    this.$id = \"ace/mode/lisp\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/lisp\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["C:/Users/akash/Desktop/Project/React/SyntaxMeets/frontend/syntaxmeets/node_modules/ace-builds/src-noconflict/mode-lisp.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","LispHighlightRules","keywordControl","keywordOperator","constantLanguage","supportFunctions","keywordMapper","createKeywordMapper","$rules","token","regex","next","inherits","TextMode","Mode","HighlightRules","$behaviour","$defaultBehaviour","lineCommentStart","$id","call","prototype","m"],"mappings":"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","sourcesContent":["ace.define(\"ace/mode/lisp_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\nvar LispHighlightRules = function() {\r\n    var keywordControl = \"case|do|let|loop|if|else|when\";\r\n    var keywordOperator = \"eq|neq|and|or\";\r\n    var constantLanguage = \"null|nil\";\r\n    var supportFunctions = \"cons|car|cdr|cond|lambda|format|setq|setf|quote|eval|append|list|listp|memberp|t|load|progn\";\r\n\r\n    var keywordMapper = this.createKeywordMapper({\r\n        \"keyword.control\": keywordControl,\r\n        \"keyword.operator\": keywordOperator,\r\n        \"constant.language\": constantLanguage,\r\n        \"support.function\": supportFunctions\r\n    }, \"identifier\", true);\r\n\r\n    this.$rules = \r\n        {\r\n    \"start\": [\r\n        {\r\n            token : \"comment\",\r\n            regex : \";.*$\"\r\n        },\r\n        {\r\n            token: [\"storage.type.function-type.lisp\", \"text\", \"entity.name.function.lisp\"],\r\n            regex: \"(?:\\\\b(?:(defun|defmethod|defmacro))\\\\b)(\\\\s+)((?:\\\\w|\\\\-|\\\\!|\\\\?)*)\"\r\n        },\r\n        {\r\n            token: [\"punctuation.definition.constant.character.lisp\", \"constant.character.lisp\"],\r\n            regex: \"(#)((?:\\\\w|[\\\\\\\\+-=<>'\\\"&#])+)\"\r\n        },\r\n        {\r\n            token: [\"punctuation.definition.variable.lisp\", \"variable.other.global.lisp\", \"punctuation.definition.variable.lisp\"],\r\n            regex: \"(\\\\*)(\\\\S*)(\\\\*)\"\r\n        },\r\n        {\r\n            token : \"constant.numeric\", // hex\r\n            regex : \"0[xX][0-9a-fA-F]+(?:L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\r\n        }, \r\n        {\r\n            token : \"constant.numeric\", // float\r\n            regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?(?:L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\r\n        },\r\n        {\r\n                token : keywordMapper,\r\n                regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\r\n        },\r\n        {\r\n            token : \"string\",\r\n            regex : '\"(?=.)',\r\n            next  : \"qqstring\"\r\n        }\r\n    ],\r\n    \"qqstring\": [\r\n        {\r\n            token: \"constant.character.escape.lisp\",\r\n            regex: \"\\\\\\\\.\"\r\n        },\r\n        {\r\n            token : \"string\",\r\n            regex : '[^\"\\\\\\\\]+'\r\n        }, {\r\n            token : \"string\",\r\n            regex : \"\\\\\\\\$\",\r\n            next  : \"qqstring\"\r\n        }, {\r\n            token : \"string\",\r\n            regex : '\"|$',\r\n            next  : \"start\"\r\n        }\r\n    ]\r\n};\r\n\r\n};\r\n\r\noop.inherits(LispHighlightRules, TextHighlightRules);\r\n\r\nexports.LispHighlightRules = LispHighlightRules;\r\n});\r\n\r\nace.define(\"ace/mode/lisp\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/lisp_highlight_rules\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextMode = require(\"./text\").Mode;\r\nvar LispHighlightRules = require(\"./lisp_highlight_rules\").LispHighlightRules;\r\n\r\nvar Mode = function() {\r\n    this.HighlightRules = LispHighlightRules;\r\n    this.$behaviour = this.$defaultBehaviour;\r\n};\r\noop.inherits(Mode, TextMode);\r\n\r\n(function() {\r\n       \r\n    this.lineCommentStart = \";\";\r\n    \r\n    this.$id = \"ace/mode/lisp\";\r\n}).call(Mode.prototype);\r\n\r\nexports.Mode = Mode;\r\n});                (function() {\r\n                    ace.require([\"ace/mode/lisp\"], function(m) {\r\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\r\n                            module.exports = m;\r\n                        }\r\n                    });\r\n                })();\r\n            "]},"metadata":{},"sourceType":"script"}