{"ast":null,"code":"ace.define(\"ace/snippets/perl\", [\"require\", \"exports\", \"module\"], function (require, exports, module) {\n  \"use strict\";\n\n  exports.snippetText = \"# #!/usr/bin/perl\\n\\\r\nsnippet #!\\n\\\r\n\t#!/usr/bin/env perl\\n\\\r\n\\n\\\r\n# Hash Pointer\\n\\\r\nsnippet .\\n\\\r\n\t =>\\n\\\r\n# Function\\n\\\r\nsnippet sub\\n\\\r\n\tsub ${1:function_name} {\\n\\\r\n\t\t${2:#body ...}\\n\\\r\n\t}\\n\\\r\n# Conditional\\n\\\r\nsnippet if\\n\\\r\n\tif (${1}) {\\n\\\r\n\t\t${2:# body...}\\n\\\r\n\t}\\n\\\r\n# Conditional if..else\\n\\\r\nsnippet ife\\n\\\r\n\tif (${1}) {\\n\\\r\n\t\t${2:# body...}\\n\\\r\n\t}\\n\\\r\n\telse {\\n\\\r\n\t\t${3:# else...}\\n\\\r\n\t}\\n\\\r\n# Conditional if..elsif..else\\n\\\r\nsnippet ifee\\n\\\r\n\tif (${1}) {\\n\\\r\n\t\t${2:# body...}\\n\\\r\n\t}\\n\\\r\n\telsif (${3}) {\\n\\\r\n\t\t${4:# elsif...}\\n\\\r\n\t}\\n\\\r\n\telse {\\n\\\r\n\t\t${5:# else...}\\n\\\r\n\t}\\n\\\r\n# Conditional One-line\\n\\\r\nsnippet xif\\n\\\r\n\t${1:expression} if ${2:condition};${3}\\n\\\r\n# Unless conditional\\n\\\r\nsnippet unless\\n\\\r\n\tunless (${1}) {\\n\\\r\n\t\t${2:# body...}\\n\\\r\n\t}\\n\\\r\n# Unless conditional One-line\\n\\\r\nsnippet xunless\\n\\\r\n\t${1:expression} unless ${2:condition};${3}\\n\\\r\n# Try/Except\\n\\\r\nsnippet eval\\n\\\r\n\tlocal $@;\\n\\\r\n\teval {\\n\\\r\n\t\t${1:# do something risky...}\\n\\\r\n\t};\\n\\\r\n\tif (my $e = $@) {\\n\\\r\n\t\t${2:# handle failure...}\\n\\\r\n\t}\\n\\\r\n# While Loop\\n\\\r\nsnippet wh\\n\\\r\n\twhile (${1}) {\\n\\\r\n\t\t${2:# body...}\\n\\\r\n\t}\\n\\\r\n# While Loop One-line\\n\\\r\nsnippet xwh\\n\\\r\n\t${1:expression} while ${2:condition};${3}\\n\\\r\n# C-style For Loop\\n\\\r\nsnippet cfor\\n\\\r\n\tfor (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {\\n\\\r\n\t\t${4:# body...}\\n\\\r\n\t}\\n\\\r\n# For loop one-line\\n\\\r\nsnippet xfor\\n\\\r\n\t${1:expression} for @${2:array};${3}\\n\\\r\n# Foreach Loop\\n\\\r\nsnippet for\\n\\\r\n\tforeach my $${1:x} (@${2:array}) {\\n\\\r\n\t\t${3:# body...}\\n\\\r\n\t}\\n\\\r\n# Foreach Loop One-line\\n\\\r\nsnippet fore\\n\\\r\n\t${1:expression} foreach @${2:array};${3}\\n\\\r\n# Package\\n\\\r\nsnippet package\\n\\\r\n\tpackage ${1:`substitute(Filename('', 'Page Title'), '^.', '\\\\u&', '')`};\\n\\\r\n\\n\\\r\n\t${2}\\n\\\r\n\\n\\\r\n\t1;\\n\\\r\n\\n\\\r\n\t__END__\\n\\\r\n# Package syntax perl >= 5.14\\n\\\r\nsnippet packagev514\\n\\\r\n\tpackage ${1:`substitute(Filename('', 'Page Title'), '^.', '\\\\u&', '')`} ${2:0.99};\\n\\\r\n\\n\\\r\n\t${3}\\n\\\r\n\\n\\\r\n\t1;\\n\\\r\n\\n\\\r\n\t__END__\\n\\\r\n#moose\\n\\\r\nsnippet moose\\n\\\r\n\tuse Moose;\\n\\\r\n\tuse namespace::autoclean;\\n\\\r\n\t${1:#}BEGIN {extends '${2:ParentClass}'};\\n\\\r\n\\n\\\r\n\t${3}\\n\\\r\n# parent\\n\\\r\nsnippet parent\\n\\\r\n\tuse parent qw(${1:Parent Class});\\n\\\r\n# Read File\\n\\\r\nsnippet slurp\\n\\\r\n\tmy $${1:var} = do { local $/; open my $file, '<', \\\"${2:file}\\\"; <$file> };\\n\\\r\n\t${3}\\n\\\r\n# strict warnings\\n\\\r\nsnippet strwar\\n\\\r\n\tuse strict;\\n\\\r\n\tuse warnings;\\n\\\r\n# older versioning with perlcritic bypass\\n\\\r\nsnippet vers\\n\\\r\n\t## no critic\\n\\\r\n\tour $VERSION = '${1:version}';\\n\\\r\n\teval $VERSION;\\n\\\r\n\t## use critic\\n\\\r\n# new 'switch' like feature\\n\\\r\nsnippet switch\\n\\\r\n\tuse feature 'switch';\\n\\\r\n\\n\\\r\n# Anonymous subroutine\\n\\\r\nsnippet asub\\n\\\r\n\tsub {\\n\\\r\n\t \t${1:# body }\\n\\\r\n\t}\\n\\\r\n\\n\\\r\n\\n\\\r\n\\n\\\r\n# Begin block\\n\\\r\nsnippet begin\\n\\\r\n\tBEGIN {\\n\\\r\n\t\t${1:# begin body}\\n\\\r\n\t}\\n\\\r\n\\n\\\r\n# call package function with some parameter\\n\\\r\nsnippet pkgmv\\n\\\r\n\t__PACKAGE__->${1:package_method}(${2:var})\\n\\\r\n\\n\\\r\n# call package function without a parameter\\n\\\r\nsnippet pkgm\\n\\\r\n\t__PACKAGE__->${1:package_method}()\\n\\\r\n\\n\\\r\n# call package \\\"get_\\\" function without a parameter\\n\\\r\nsnippet pkget\\n\\\r\n\t__PACKAGE__->get_${1:package_method}()\\n\\\r\n\\n\\\r\n# call package function with a parameter\\n\\\r\nsnippet pkgetv\\n\\\r\n\t__PACKAGE__->get_${1:package_method}(${2:var})\\n\\\r\n\\n\\\r\n# complex regex\\n\\\r\nsnippet qrx\\n\\\r\n\tqr/\\n\\\r\n\t     ${1:regex}\\n\\\r\n\t/xms\\n\\\r\n\\n\\\r\n#simpler regex\\n\\\r\nsnippet qr/\\n\\\r\n\tqr/${1:regex}/x\\n\\\r\n\\n\\\r\n#given\\n\\\r\nsnippet given\\n\\\r\n\tgiven ($${1:var}) {\\n\\\r\n\t\t${2:# cases}\\n\\\r\n\t\t${3:# default}\\n\\\r\n\t}\\n\\\r\n\\n\\\r\n# switch-like case\\n\\\r\nsnippet when\\n\\\r\n\twhen (${1:case}) {\\n\\\r\n\t\t${2:# body}\\n\\\r\n\t}\\n\\\r\n\\n\\\r\n# hash slice\\n\\\r\nsnippet hslice\\n\\\r\n\t@{ ${1:hash}  }{ ${2:array} }\\n\\\r\n\\n\\\r\n\\n\\\r\n# map\\n\\\r\nsnippet map\\n\\\r\n\tmap {  ${2: body }    }  ${1: @array } ;\\n\\\r\n\\n\\\r\n\\n\\\r\n\\n\\\r\n# Pod stub\\n\\\r\nsnippet ppod\\n\\\r\n\t=head1 NAME\\n\\\r\n\\n\\\r\n\t${1:ClassName} - ${2:ShortDesc}\\n\\\r\n\\n\\\r\n\t=head1 SYNOPSIS\\n\\\r\n\\n\\\r\n\t  use $1;\\n\\\r\n\\n\\\r\n\t  ${3:# synopsis...}\\n\\\r\n\\n\\\r\n\t=head1 DESCRIPTION\\n\\\r\n\\n\\\r\n\t${4:# longer description...}\\n\\\r\n\\n\\\r\n\\n\\\r\n\t=head1 INTERFACE\\n\\\r\n\\n\\\r\n\\n\\\r\n\t=head1 DEPENDENCIES\\n\\\r\n\\n\\\r\n\\n\\\r\n\t=head1 SEE ALSO\\n\\\r\n\\n\\\r\n\\n\\\r\n# Heading for a subroutine stub\\n\\\r\nsnippet psub\\n\\\r\n\t=head2 ${1:MethodName}\\n\\\r\n\\n\\\r\n\t${2:Summary....}\\n\\\r\n\\n\\\r\n# Heading for inline subroutine pod\\n\\\r\nsnippet psubi\\n\\\r\n\t=head2 ${1:MethodName}\\n\\\r\n\\n\\\r\n\t${2:Summary...}\\n\\\r\n\\n\\\r\n\\n\\\r\n\t=cut\\n\\\r\n# inline documented subroutine\\n\\\r\nsnippet subpod\\n\\\r\n\t=head2 $1\\n\\\r\n\\n\\\r\n\tSummary of $1\\n\\\r\n\\n\\\r\n\t=cut\\n\\\r\n\\n\\\r\n\tsub ${1:subroutine_name} {\\n\\\r\n\t\t${2:# body...}\\n\\\r\n\t}\\n\\\r\n# Subroutine signature\\n\\\r\nsnippet parg\\n\\\r\n\t=over 2\\n\\\r\n\\n\\\r\n\t=item\\n\\\r\n\tArguments\\n\\\r\n\\n\\\r\n\\n\\\r\n\t=over 3\\n\\\r\n\\n\\\r\n\t=item\\n\\\r\n\tC<${1:DataStructure}>\\n\\\r\n\\n\\\r\n\t  ${2:Sample}\\n\\\r\n\\n\\\r\n\\n\\\r\n\t=back\\n\\\r\n\\n\\\r\n\\n\\\r\n\t=item\\n\\\r\n\tReturn\\n\\\r\n\\n\\\r\n\t=over 3\\n\\\r\n\\n\\\r\n\\n\\\r\n\t=item\\n\\\r\n\tC<${3:...return data}>\\n\\\r\n\\n\\\r\n\\n\\\r\n\t=back\\n\\\r\n\\n\\\r\n\\n\\\r\n\t=back\\n\\\r\n\\n\\\r\n\\n\\\r\n\\n\\\r\n# Moose has\\n\\\r\nsnippet has\\n\\\r\n\thas ${1:attribute} => (\\n\\\r\n\t\tis\t    => '${2:ro|rw}',\\n\\\r\n\t\tisa \t=> '${3:Str|Int|HashRef|ArrayRef|etc}',\\n\\\r\n\t\tdefault => sub {\\n\\\r\n\t\t\t${4:defaultvalue}\\n\\\r\n\t\t},\\n\\\r\n\t\t${5:# other attributes}\\n\\\r\n\t);\\n\\\r\n\\n\\\r\n\\n\\\r\n# override\\n\\\r\nsnippet override\\n\\\r\n\toverride ${1:attribute} => sub {\\n\\\r\n\t\t${2:# my $self = shift;};\\n\\\r\n\t\t${3:# my ($self, $args) = @_;};\\n\\\r\n\t};\\n\\\r\n\\n\\\r\n\\n\\\r\n# use test classes\\n\\\r\nsnippet tuse\\n\\\r\n\tuse Test::More;\\n\\\r\n\tuse Test::Deep; # (); # uncomment to stop prototype errors\\n\\\r\n\tuse Test::Exception;\\n\\\r\n\\n\\\r\n# local test lib\\n\\\r\nsnippet tlib\\n\\\r\n\tuse lib qw{ ./t/lib };\\n\\\r\n\\n\\\r\n#test methods\\n\\\r\nsnippet tmeths\\n\\\r\n\t$ENV{TEST_METHOD} = '${1:regex}';\\n\\\r\n\\n\\\r\n# runtestclass\\n\\\r\nsnippet trunner\\n\\\r\n\tuse ${1:test_class};\\n\\\r\n\t$1->runtests();\\n\\\r\n\\n\\\r\n# Test::Class-style test\\n\\\r\nsnippet tsub\\n\\\r\n\tsub t${1:number}_${2:test_case} :Test(${3:num_of_tests}) {\\n\\\r\n\t\tmy $self = shift;\\n\\\r\n\t\t${4:#  body}\\n\\\r\n\\n\\\r\n\t}\\n\\\r\n\\n\\\r\n# Test::Routine-style test\\n\\\r\nsnippet trsub\\n\\\r\n\ttest ${1:test_name} => { description => '${2:Description of test.}'} => sub {\\n\\\r\n\t\tmy ($self) = @_;\\n\\\r\n\t\t${3:# test code}\\n\\\r\n\t};\\n\\\r\n\\n\\\r\n#prep test method\\n\\\r\nsnippet tprep\\n\\\r\n\tsub prep${1:number}_${2:test_case} :Test(startup) {\\n\\\r\n\t\tmy $self = shift;\\n\\\r\n\t\t${4:#  body}\\n\\\r\n\t}\\n\\\r\n\\n\\\r\n# cause failures to print stack trace\\n\\\r\nsnippet debug_trace\\n\\\r\n\tuse Carp; # 'verbose';\\n\\\r\n\t# cloak \\\"die\\\"\\n\\\r\n\t# warn \\\"warning\\\"\\n\\\r\n\t$SIG{'__DIE__'} = sub {\\n\\\r\n\t\trequire Carp; Carp::confess\\n\\\r\n\t};\\n\\\r\n\\n\\\r\n\";\n  exports.scope = \"perl\";\n});\n\n(function () {\n  ace.require([\"ace/snippets/perl\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["C:/Users/akash/Desktop/Project/React/SyntaxMeets/frontend/syntaxmeets/node_modules/ace-builds/src-noconflict/snippets/perl.js"],"names":["ace","define","require","exports","module","snippetText","scope","m"],"mappings":"AAAAA,GAAG,CAACC,MAAJ,CAAW,mBAAX,EAA+B,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,CAA/B,EAA+D,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AAClG;;AAEAD,EAAAA,OAAO,CAACE,WAAR,GAAsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAtB;AA4VAF,EAAAA,OAAO,CAACG,KAAR,GAAgB,MAAhB;AAEC,CAjWD;;AAiWmB,CAAC,YAAW;AACXN,EAAAA,GAAG,CAACE,OAAJ,CAAY,CAAC,mBAAD,CAAZ,EAAmC,UAASK,CAAT,EAAY;AAC3C,QAAI,OAAOH,MAAP,IAAiB,QAAjB,IAA6B,OAAOD,OAAP,IAAkB,QAA/C,IAA2DC,MAA/D,EAAuE;AACnEA,MAAAA,MAAM,CAACD,OAAP,GAAiBI,CAAjB;AACH;AACJ,GAJD;AAKH,CANE","sourcesContent":["ace.define(\"ace/snippets/perl\",[\"require\",\"exports\",\"module\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nexports.snippetText = \"# #!/usr/bin/perl\\n\\\r\nsnippet #!\\n\\\r\n\t#!/usr/bin/env perl\\n\\\r\n\\n\\\r\n# Hash Pointer\\n\\\r\nsnippet .\\n\\\r\n\t =>\\n\\\r\n# Function\\n\\\r\nsnippet sub\\n\\\r\n\tsub ${1:function_name} {\\n\\\r\n\t\t${2:#body ...}\\n\\\r\n\t}\\n\\\r\n# Conditional\\n\\\r\nsnippet if\\n\\\r\n\tif (${1}) {\\n\\\r\n\t\t${2:# body...}\\n\\\r\n\t}\\n\\\r\n# Conditional if..else\\n\\\r\nsnippet ife\\n\\\r\n\tif (${1}) {\\n\\\r\n\t\t${2:# body...}\\n\\\r\n\t}\\n\\\r\n\telse {\\n\\\r\n\t\t${3:# else...}\\n\\\r\n\t}\\n\\\r\n# Conditional if..elsif..else\\n\\\r\nsnippet ifee\\n\\\r\n\tif (${1}) {\\n\\\r\n\t\t${2:# body...}\\n\\\r\n\t}\\n\\\r\n\telsif (${3}) {\\n\\\r\n\t\t${4:# elsif...}\\n\\\r\n\t}\\n\\\r\n\telse {\\n\\\r\n\t\t${5:# else...}\\n\\\r\n\t}\\n\\\r\n# Conditional One-line\\n\\\r\nsnippet xif\\n\\\r\n\t${1:expression} if ${2:condition};${3}\\n\\\r\n# Unless conditional\\n\\\r\nsnippet unless\\n\\\r\n\tunless (${1}) {\\n\\\r\n\t\t${2:# body...}\\n\\\r\n\t}\\n\\\r\n# Unless conditional One-line\\n\\\r\nsnippet xunless\\n\\\r\n\t${1:expression} unless ${2:condition};${3}\\n\\\r\n# Try/Except\\n\\\r\nsnippet eval\\n\\\r\n\tlocal $@;\\n\\\r\n\teval {\\n\\\r\n\t\t${1:# do something risky...}\\n\\\r\n\t};\\n\\\r\n\tif (my $e = $@) {\\n\\\r\n\t\t${2:# handle failure...}\\n\\\r\n\t}\\n\\\r\n# While Loop\\n\\\r\nsnippet wh\\n\\\r\n\twhile (${1}) {\\n\\\r\n\t\t${2:# body...}\\n\\\r\n\t}\\n\\\r\n# While Loop One-line\\n\\\r\nsnippet xwh\\n\\\r\n\t${1:expression} while ${2:condition};${3}\\n\\\r\n# C-style For Loop\\n\\\r\nsnippet cfor\\n\\\r\n\tfor (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {\\n\\\r\n\t\t${4:# body...}\\n\\\r\n\t}\\n\\\r\n# For loop one-line\\n\\\r\nsnippet xfor\\n\\\r\n\t${1:expression} for @${2:array};${3}\\n\\\r\n# Foreach Loop\\n\\\r\nsnippet for\\n\\\r\n\tforeach my $${1:x} (@${2:array}) {\\n\\\r\n\t\t${3:# body...}\\n\\\r\n\t}\\n\\\r\n# Foreach Loop One-line\\n\\\r\nsnippet fore\\n\\\r\n\t${1:expression} foreach @${2:array};${3}\\n\\\r\n# Package\\n\\\r\nsnippet package\\n\\\r\n\tpackage ${1:`substitute(Filename('', 'Page Title'), '^.', '\\\\u&', '')`};\\n\\\r\n\\n\\\r\n\t${2}\\n\\\r\n\\n\\\r\n\t1;\\n\\\r\n\\n\\\r\n\t__END__\\n\\\r\n# Package syntax perl >= 5.14\\n\\\r\nsnippet packagev514\\n\\\r\n\tpackage ${1:`substitute(Filename('', 'Page Title'), '^.', '\\\\u&', '')`} ${2:0.99};\\n\\\r\n\\n\\\r\n\t${3}\\n\\\r\n\\n\\\r\n\t1;\\n\\\r\n\\n\\\r\n\t__END__\\n\\\r\n#moose\\n\\\r\nsnippet moose\\n\\\r\n\tuse Moose;\\n\\\r\n\tuse namespace::autoclean;\\n\\\r\n\t${1:#}BEGIN {extends '${2:ParentClass}'};\\n\\\r\n\\n\\\r\n\t${3}\\n\\\r\n# parent\\n\\\r\nsnippet parent\\n\\\r\n\tuse parent qw(${1:Parent Class});\\n\\\r\n# Read File\\n\\\r\nsnippet slurp\\n\\\r\n\tmy $${1:var} = do { local $/; open my $file, '<', \\\"${2:file}\\\"; <$file> };\\n\\\r\n\t${3}\\n\\\r\n# strict warnings\\n\\\r\nsnippet strwar\\n\\\r\n\tuse strict;\\n\\\r\n\tuse warnings;\\n\\\r\n# older versioning with perlcritic bypass\\n\\\r\nsnippet vers\\n\\\r\n\t## no critic\\n\\\r\n\tour $VERSION = '${1:version}';\\n\\\r\n\teval $VERSION;\\n\\\r\n\t## use critic\\n\\\r\n# new 'switch' like feature\\n\\\r\nsnippet switch\\n\\\r\n\tuse feature 'switch';\\n\\\r\n\\n\\\r\n# Anonymous subroutine\\n\\\r\nsnippet asub\\n\\\r\n\tsub {\\n\\\r\n\t \t${1:# body }\\n\\\r\n\t}\\n\\\r\n\\n\\\r\n\\n\\\r\n\\n\\\r\n# Begin block\\n\\\r\nsnippet begin\\n\\\r\n\tBEGIN {\\n\\\r\n\t\t${1:# begin body}\\n\\\r\n\t}\\n\\\r\n\\n\\\r\n# call package function with some parameter\\n\\\r\nsnippet pkgmv\\n\\\r\n\t__PACKAGE__->${1:package_method}(${2:var})\\n\\\r\n\\n\\\r\n# call package function without a parameter\\n\\\r\nsnippet pkgm\\n\\\r\n\t__PACKAGE__->${1:package_method}()\\n\\\r\n\\n\\\r\n# call package \\\"get_\\\" function without a parameter\\n\\\r\nsnippet pkget\\n\\\r\n\t__PACKAGE__->get_${1:package_method}()\\n\\\r\n\\n\\\r\n# call package function with a parameter\\n\\\r\nsnippet pkgetv\\n\\\r\n\t__PACKAGE__->get_${1:package_method}(${2:var})\\n\\\r\n\\n\\\r\n# complex regex\\n\\\r\nsnippet qrx\\n\\\r\n\tqr/\\n\\\r\n\t     ${1:regex}\\n\\\r\n\t/xms\\n\\\r\n\\n\\\r\n#simpler regex\\n\\\r\nsnippet qr/\\n\\\r\n\tqr/${1:regex}/x\\n\\\r\n\\n\\\r\n#given\\n\\\r\nsnippet given\\n\\\r\n\tgiven ($${1:var}) {\\n\\\r\n\t\t${2:# cases}\\n\\\r\n\t\t${3:# default}\\n\\\r\n\t}\\n\\\r\n\\n\\\r\n# switch-like case\\n\\\r\nsnippet when\\n\\\r\n\twhen (${1:case}) {\\n\\\r\n\t\t${2:# body}\\n\\\r\n\t}\\n\\\r\n\\n\\\r\n# hash slice\\n\\\r\nsnippet hslice\\n\\\r\n\t@{ ${1:hash}  }{ ${2:array} }\\n\\\r\n\\n\\\r\n\\n\\\r\n# map\\n\\\r\nsnippet map\\n\\\r\n\tmap {  ${2: body }    }  ${1: @array } ;\\n\\\r\n\\n\\\r\n\\n\\\r\n\\n\\\r\n# Pod stub\\n\\\r\nsnippet ppod\\n\\\r\n\t=head1 NAME\\n\\\r\n\\n\\\r\n\t${1:ClassName} - ${2:ShortDesc}\\n\\\r\n\\n\\\r\n\t=head1 SYNOPSIS\\n\\\r\n\\n\\\r\n\t  use $1;\\n\\\r\n\\n\\\r\n\t  ${3:# synopsis...}\\n\\\r\n\\n\\\r\n\t=head1 DESCRIPTION\\n\\\r\n\\n\\\r\n\t${4:# longer description...}\\n\\\r\n\\n\\\r\n\\n\\\r\n\t=head1 INTERFACE\\n\\\r\n\\n\\\r\n\\n\\\r\n\t=head1 DEPENDENCIES\\n\\\r\n\\n\\\r\n\\n\\\r\n\t=head1 SEE ALSO\\n\\\r\n\\n\\\r\n\\n\\\r\n# Heading for a subroutine stub\\n\\\r\nsnippet psub\\n\\\r\n\t=head2 ${1:MethodName}\\n\\\r\n\\n\\\r\n\t${2:Summary....}\\n\\\r\n\\n\\\r\n# Heading for inline subroutine pod\\n\\\r\nsnippet psubi\\n\\\r\n\t=head2 ${1:MethodName}\\n\\\r\n\\n\\\r\n\t${2:Summary...}\\n\\\r\n\\n\\\r\n\\n\\\r\n\t=cut\\n\\\r\n# inline documented subroutine\\n\\\r\nsnippet subpod\\n\\\r\n\t=head2 $1\\n\\\r\n\\n\\\r\n\tSummary of $1\\n\\\r\n\\n\\\r\n\t=cut\\n\\\r\n\\n\\\r\n\tsub ${1:subroutine_name} {\\n\\\r\n\t\t${2:# body...}\\n\\\r\n\t}\\n\\\r\n# Subroutine signature\\n\\\r\nsnippet parg\\n\\\r\n\t=over 2\\n\\\r\n\\n\\\r\n\t=item\\n\\\r\n\tArguments\\n\\\r\n\\n\\\r\n\\n\\\r\n\t=over 3\\n\\\r\n\\n\\\r\n\t=item\\n\\\r\n\tC<${1:DataStructure}>\\n\\\r\n\\n\\\r\n\t  ${2:Sample}\\n\\\r\n\\n\\\r\n\\n\\\r\n\t=back\\n\\\r\n\\n\\\r\n\\n\\\r\n\t=item\\n\\\r\n\tReturn\\n\\\r\n\\n\\\r\n\t=over 3\\n\\\r\n\\n\\\r\n\\n\\\r\n\t=item\\n\\\r\n\tC<${3:...return data}>\\n\\\r\n\\n\\\r\n\\n\\\r\n\t=back\\n\\\r\n\\n\\\r\n\\n\\\r\n\t=back\\n\\\r\n\\n\\\r\n\\n\\\r\n\\n\\\r\n# Moose has\\n\\\r\nsnippet has\\n\\\r\n\thas ${1:attribute} => (\\n\\\r\n\t\tis\t    => '${2:ro|rw}',\\n\\\r\n\t\tisa \t=> '${3:Str|Int|HashRef|ArrayRef|etc}',\\n\\\r\n\t\tdefault => sub {\\n\\\r\n\t\t\t${4:defaultvalue}\\n\\\r\n\t\t},\\n\\\r\n\t\t${5:# other attributes}\\n\\\r\n\t);\\n\\\r\n\\n\\\r\n\\n\\\r\n# override\\n\\\r\nsnippet override\\n\\\r\n\toverride ${1:attribute} => sub {\\n\\\r\n\t\t${2:# my $self = shift;};\\n\\\r\n\t\t${3:# my ($self, $args) = @_;};\\n\\\r\n\t};\\n\\\r\n\\n\\\r\n\\n\\\r\n# use test classes\\n\\\r\nsnippet tuse\\n\\\r\n\tuse Test::More;\\n\\\r\n\tuse Test::Deep; # (); # uncomment to stop prototype errors\\n\\\r\n\tuse Test::Exception;\\n\\\r\n\\n\\\r\n# local test lib\\n\\\r\nsnippet tlib\\n\\\r\n\tuse lib qw{ ./t/lib };\\n\\\r\n\\n\\\r\n#test methods\\n\\\r\nsnippet tmeths\\n\\\r\n\t$ENV{TEST_METHOD} = '${1:regex}';\\n\\\r\n\\n\\\r\n# runtestclass\\n\\\r\nsnippet trunner\\n\\\r\n\tuse ${1:test_class};\\n\\\r\n\t$1->runtests();\\n\\\r\n\\n\\\r\n# Test::Class-style test\\n\\\r\nsnippet tsub\\n\\\r\n\tsub t${1:number}_${2:test_case} :Test(${3:num_of_tests}) {\\n\\\r\n\t\tmy $self = shift;\\n\\\r\n\t\t${4:#  body}\\n\\\r\n\\n\\\r\n\t}\\n\\\r\n\\n\\\r\n# Test::Routine-style test\\n\\\r\nsnippet trsub\\n\\\r\n\ttest ${1:test_name} => { description => '${2:Description of test.}'} => sub {\\n\\\r\n\t\tmy ($self) = @_;\\n\\\r\n\t\t${3:# test code}\\n\\\r\n\t};\\n\\\r\n\\n\\\r\n#prep test method\\n\\\r\nsnippet tprep\\n\\\r\n\tsub prep${1:number}_${2:test_case} :Test(startup) {\\n\\\r\n\t\tmy $self = shift;\\n\\\r\n\t\t${4:#  body}\\n\\\r\n\t}\\n\\\r\n\\n\\\r\n# cause failures to print stack trace\\n\\\r\nsnippet debug_trace\\n\\\r\n\tuse Carp; # 'verbose';\\n\\\r\n\t# cloak \\\"die\\\"\\n\\\r\n\t# warn \\\"warning\\\"\\n\\\r\n\t$SIG{'__DIE__'} = sub {\\n\\\r\n\t\trequire Carp; Carp::confess\\n\\\r\n\t};\\n\\\r\n\\n\\\r\n\";\r\nexports.scope = \"perl\";\r\n\r\n});                (function() {\r\n                    ace.require([\"ace/snippets/perl\"], function(m) {\r\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\r\n                            module.exports = m;\r\n                        }\r\n                    });\r\n                })();\r\n            "]},"metadata":{},"sourceType":"script"}