{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Point = function () {\n  /**\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\n  function Point(x, y) {\n    _classCallCheck(this, Point);\n\n    this.x = x;\n    this.y = y;\n  }\n  /**\r\n   * Update the x and y values\r\n   *\r\n   * @param {Point} point\r\n   */\n\n\n  _createClass(Point, [{\n    key: \"update\",\n    value: function update(point) {\n      this.x = point.x;\n      this.y = point.y;\n    }\n    /**\r\n     * Get the difference for x and y axis to another point\r\n     *\r\n     * @param {Point} point\r\n     * @returns {Point}\r\n     */\n\n  }, {\n    key: \"getDifferenceTo\",\n    value: function getDifferenceTo(point) {\n      return new Point(this.x - point.x, this.y - point.y);\n    }\n    /**\r\n     * Calculate distance to another point\r\n     *\r\n     * @param {Point} point\r\n     * @returns {Point}\r\n     */\n\n  }, {\n    key: \"getDistanceTo\",\n    value: function getDistanceTo(point) {\n      var diff = this.getDifferenceTo(point);\n      return Math.sqrt(Math.pow(diff.x, 2) + Math.pow(diff.y, 2));\n    }\n  }]);\n\n  return Point;\n}();\n\nexports.default = Point;","map":{"version":3,"sources":["C:/Users/akash/Desktop/Project/React/SyntaxMeets/frontend/syntaxmeets/node_modules/catenary-curve/lib/Point.js"],"names":["Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","Point","x","y","update","point","getDifferenceTo","getDistanceTo","diff","Math","sqrt","pow","default"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nvar Point = function () {\r\n  /**\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  function Point(x, y) {\r\n    _classCallCheck(this, Point);\r\n\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  /**\r\n   * Update the x and y values\r\n   *\r\n   * @param {Point} point\r\n   */\r\n\r\n\r\n  _createClass(Point, [{\r\n    key: \"update\",\r\n    value: function update(point) {\r\n      this.x = point.x;\r\n      this.y = point.y;\r\n    }\r\n\r\n    /**\r\n     * Get the difference for x and y axis to another point\r\n     *\r\n     * @param {Point} point\r\n     * @returns {Point}\r\n     */\r\n\r\n  }, {\r\n    key: \"getDifferenceTo\",\r\n    value: function getDifferenceTo(point) {\r\n      return new Point(this.x - point.x, this.y - point.y);\r\n    }\r\n\r\n    /**\r\n     * Calculate distance to another point\r\n     *\r\n     * @param {Point} point\r\n     * @returns {Point}\r\n     */\r\n\r\n  }, {\r\n    key: \"getDistanceTo\",\r\n    value: function getDistanceTo(point) {\r\n      var diff = this.getDifferenceTo(point);\r\n\r\n      return Math.sqrt(Math.pow(diff.x, 2) + Math.pow(diff.y, 2));\r\n    }\r\n  }]);\r\n\r\n  return Point;\r\n}();\r\n\r\nexports.default = Point;"]},"metadata":{},"sourceType":"script"}